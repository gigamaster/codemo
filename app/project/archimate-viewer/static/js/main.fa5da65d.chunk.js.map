{"version":3,"sources":["archimate-model/archimate/access-type.ts","archimate-model/archimate/diagram-type.ts","archimate-model/archimate/layers.ts","archimate-model/archimate/element-type.ts","archimate-model/archimate/relationship-type.ts","archimate-model/archimate/viewpoint-type.ts","archimate-model/archimate/color.ts","archimate-model/archimate/font.ts","archimate-model/archimate/style.ts","archimate-model/archimate/range.ts","archimate-model/archimate/point.ts","archimate-model/archimate/bounds.ts","archimate-model/archimate/segment.ts","archimate-model/archimate/path.ts","archimate-model/archimate/interfaces.ts","archimate-model/archimate/property.ts","archimate-model/archimate/view-node.ts","archimate-model/archimate/connection.ts","archimate-model/archimate/element.ts","archimate-model/archimate/organization.ts","archimate-model/archimate/relationship.ts","archimate-model/archimate/diagram.ts","archimate-model/archimate/model.ts","archimate-model/archimate/query-runner.ts","archimate-model/archimate/query.ts","archimate-model/archimate/parser/archi/dom-helpers.ts","archimate-model/archimate/parser/archi/bendpoint-parser.ts","archimate-model/archimate/parser/archi/documentation-parser.ts","archimate-model/archimate/parser/archi/folder-parser.ts","archimate-model/archimate/parser/archi/properties-parser.ts","archimate-model/archimate/parser/archi/content-parser.ts","archimate-model/archimate/parser/archi/style-parser.ts","archimate-model/archimate/parser/archi/viewpoint-parser.ts","archimate-model/archimate/parser/archi/connection-parser.ts","archimate-model/archimate/parser/archi/bounds-parser.ts","archimate-model/archimate/parser/archi/view-node-parser.ts","archimate-model/archimate/parser/archi/diagram-parser.ts","archimate-model/archimate/parser/archi/element-tag-parser.ts","archimate-model/archimate/parser/archi/archi-file-reader.ts","components/main/archimate-connection.tsx","components/main/archimate-svg.tsx","components/main/text-flow.tsx","components/main/entity-label.tsx","components/main/selected-view-node.tsx","components/main/view-nodes/default-element.tsx","components/main/view-nodes/badged-rect.tsx","components/main/view-nodes/application-component-view-node.tsx","components/main/view-nodes/artifact-view-node.tsx","components/main/view-nodes/motivation-view-node.tsx","components/main/view-nodes/assessment-view-node.tsx","components/main/view-nodes/business-actor-view-node.tsx","components/main/view-nodes/business-role-view-node.tsx","components/main/view-nodes/collaboration-view-node.tsx","components/main/view-nodes/constraint-view-node.tsx","components/main/view-nodes/data-object-view-node.tsx","components/main/view-nodes/contract-view-node.tsx","components/main/view-nodes/deliverable-view-node.tsx","components/main/view-nodes/badged-node-view-node.tsx","components/main/view-nodes/device-view-node.tsx","components/main/view-nodes/diagram-ref-view-node.tsx","components/main/view-nodes/distribution-network-view-node.tsx","components/main/view-nodes/driver-view-node.tsx","components/main/view-nodes/badged-rounded-rect.tsx","components/main/view-nodes/event-view-node.tsx","components/main/view-nodes/function-view-node.tsx","components/main/view-nodes/gap-view-node.tsx","components/main/view-nodes/goal-view-node.tsx","components/main/view-nodes/group-view-node.tsx","components/main/view-nodes/grouping-view-node.tsx","components/main/view-nodes/interaction-view-node.tsx","components/main/view-nodes/interface-view-node.tsx","components/main/view-nodes/junction.tsx","components/main/view-nodes/location-view-node.tsx","components/main/view-nodes/meaning-view-node.tsx","components/main/view-nodes/network-view-node.tsx","components/main/view-nodes/node-view-node.tsx","components/main/view-nodes/note-view-node.tsx","components/main/view-nodes/or-junction.tsx","components/main/view-nodes/outcome-view-node.tsx","components/main/view-nodes/path-view-node.tsx","components/main/view-nodes/plateau-view-node.tsx","components/main/view-nodes/principle-view-node.tsx","components/main/view-nodes/process-view-node.tsx","components/main/view-nodes/product-view-node.tsx","components/main/view-nodes/representation-view-node.tsx","components/main/view-nodes/requirement-view-node.tsx","components/main/view-nodes/resource-view-node.tsx","components/main/view-nodes/service-view-node.tsx","components/main/view-nodes/stakeholder-view-node.tsx","components/main/view-nodes/sticky-view-node.tsx","components/main/view-nodes/system-software-view-node.tsx","components/main/view-nodes/value-view-node.tsx","components/main/view-nodes/work-package-view-node.tsx","components/main/svg-pan-zoom.tsx","components/main/force-layout.tsx","components/main/archimate-diagram-view.tsx","components/main/archimate-view-node.ts","components/sidebar/panel.tsx","components/sidebar/info/documentation-panel.tsx","components/sidebar/entity-link.tsx","components/sidebar/info/elements-table.tsx","components/sidebar/info/entity-id-panel.tsx","components/sidebar/info/views-table.tsx","components/sidebar/info/properties-panel.tsx","components/sidebar/info/relationships-table.tsx","components/sidebar/info/info-tab.tsx","components/sidebar/model-info.tsx","components/sidebar/query/query-picker.tsx","components/sidebar/query/query-wizard-form/element-type-filter.tsx","components/sidebar/query/query-wizard-form/layer-checkbox.tsx","components/sidebar/query/query-wizard.tsx","components/sidebar/query/query-tab.tsx","components/sidebar/search/search-result.tsx","components/sidebar/search/search-tab.tsx","components/sidebar/views/organization-item.tsx","components/sidebar/views/organization-tree.tsx","components/sidebar/views/organization-content.tsx","components/sidebar/sidebar.tsx","components/sidebar/views/views-tab.tsx","components/archimate-navigator.tsx","archimate-model/archimate/parser/reader.ts","serviceWorker.ts","index.tsx"],"names":["AccessType","DiagramType","Layer","ElementType","Layers","Strategy","Business","Application","Technology","Physical","Motivation","ImplementationAndMigration","Connectors","Other","None","DisplayLayers","layerClassName","layer","layerElements","Capability","CourseOfAction","Resource","BusinessActor","BusinessCollaboration","BusinessEvent","BusinessFunction","BusinessInteraction","BusinessInterface","BusinessObject","BusinessProcess","BusinessRole","BusinessService","Contract","Product","Representation","ApplicationCollaboration","ApplicationComponent","ApplicationEvent","ApplicationFunction","ApplicationInteraction","ApplicationInterface","ApplicationProcess","ApplicationService","DataObject","Artifact","CommunicationNetwork","CommunicationPath","Device","InfrastructureFunction","InfrastructureInterface","InfrastructureService","Network","Node","Path","SystemSoftware","TechnologyCollaboration","TechnologyEvent","TechnologyFunction","TechnologyInteraction","TechnologyInterface","TechnologyObject","TechnologyProcess","TechnologyService","DistributionNetwork","Equipment","Facility","Material","Assessment","Constraint","Driver","Goal","Meaning","Outcome","Principle","Requirement","Stakeholder","Value","Deliverable","Gap","ImplementationEvent","Plateau","WorkPackage","AndJunction","Junction","OrJunction","Location","Grouping","ElementTypes","RelationshipType","CoreElementTypes","concat","ConnectorElementTypes","ViewpointType","RelationshipTypes","Composition","Aggregation","Assignment","Realization","Realisation","Serving","UsedBy","Access","Influence","Triggering","Flow","Specialization","Specialisation","Association","Viewpoints","Total","Introductory","Organization","Application_platform","Information_structure","Layered","Application_usage","Technology_usage","Business_process_cooperation","Application_cooperation","Service_realization","Implementation_and_deployment","Goal_realization","Goal_contribution","Principles","Requirements_realization","Capability_map","Outcome_realization","Resource_map","Project","Migration","Implementation_and_migration","Actor_cooperation","Business_function","Business_process","Application_behavior","Application_structure","Infrastructure","Infrastructure_usage","Landscape_map","Custom","ViewpointTypeElementTypes","Map","viewpointForElementTypes","elementTypes","viewpoint","forEach","value","key","is","Set","elementTypesForViewpoint","viewpointType","currentElementTypes","get","undefined","Color","r","g","b","a","this","str","md","match","Number","parseInt","vals","push","scaledAlpha","vs","filter","v","map","toString","s","trim","length","join","max","Math","round","Font","name","size","style","fontData","fontParts","split","parseFloat","Style","textAlignment","fillColor","lineColor","fontColor","lineWidth","font","textPosition","Range","begin","end","beginMax","endMin","min","n","Point","x","y","other","sqrt","bounds","xRange","cover","yRange","Bounds","width","height","top","left","right","bottom","location","os","val","zeroBounds","Segment","subtract","dist","fromStart","pointAtPercent","pct","connection","autoLayout","points","segments","sourceBounds","targetBounds","dCmds","pathLength","calcPoints","calcSegments","bendpoints","eachCons","pts","curve_segment","move_to","line_to","fraction","lengthFromStart","pt","reduce","acc","segment","point","ax","bx","axRange","bxRange","overlapXCenter","overlapMidpoint","rightOf","ay","by","ayRange","byRange","overlapYCenter","above","bendpoint","fromPoint","segAryLen","segs","Array","idx","boundsAry","normalizedBendPoints","shift","boundsToPoints","ptHash","set","from","values","segmentLengths","total","cp","c","pt1","fromEnd","pt2","q_curve","ary","cons","len","mappedAry","i","InitExtents","maxX","MIN_SAFE_INTEGER","maxY","minX","MAX_SAFE_INTEGER","minY","ExtendableError","message","constructor","stack","Error","ParserError","LogicError","UnsupportedFormat","xmlns","Property","ViewNode","model","diagram","id","documentation","type","viewRefs","content","properties","parent","nodes","connections","element","childType","conceptRef","xpathPath","index","vx","vy","fx","fy","entity","makeUniqueId","lookup","Connection","inside","center","source","target","sourceAttachment","targetAttachment","relationship","sourceEntity","targetEntity","typeName","srcTargetLookup","sourceViewNode","absolutePosition","targetViewNode","midpoint","extents","srcOrTarget","Element","href","diagramCache","relationshipCache","relationships","rel","diagrams","dia","elements","find","el","organizations","items","itemId","item","maybeItem","Relationship","accessType","derived","strength","Diagram","connectionRouterType","background","path","elementsCache","relationshipsCache","diagramsCache","conn","entityInstance","viewNode","viewConcepts","vc","accExtents","vcExtents","DIAGRAM_MARGIN","Model","metadata","propertyDefs","version","viewpoints","indexHash","emptyIndexHash","rebuildIndex","viewOrg","o","org","random","node","delete","list","adjacencyListReducer","missingId","buildIndex","ref","indexViewNodes","indexOrganizations","con","alMap","cv","QueryRunner","query","visited","queue","toJS","depth","resultElements","resultRelationships","pop","relationshipTypesFilter","relationshipTypes","relationshipElementTypesFilter","spiderRelationships","maxPathDepth","pathDepth","searchQueueItem","otherElement","sourceElement","targetElement","includes","add","every","e","elementTypeFilter","Query","includeDerivedRelations","layerFilter","props","Object","assign","availableElementTypes","et","vet","queryResult","findOrCreateDiagram","nodesConns","diagramNodesAndConnections","run","lookupDiagram","ModelQuery","viewOrganization","elementsRelationships","relationshipElements","elementViewNodeMap","viewNodeFor","connectionFor","vn","getStringAttribute","attr","attributes","getNamedItem","getNSStringAttribute","ns","getNamedItemNS","getIntAttribute","strVal","BendpointParser","createPoint","child","parseAttrInt","children","nodeName","attrName","isNaN","DocumentationParser","parentElement","docElementName","docEl","querySelector","textContent","FolderParser","createOrganization","organization","PropertiesParser","handleElement","els","ContentParser","contentEl","StyleParser","rgba","archiFontString","archiViewpointMap","ViewpointParser","domEl","viewpointStr","ConnectionParser","offset","documentationParser","bendpointParser","styleParser","createConnection","some","BoundsParser","boundsEl","ViewNodeParser","contentParser","boundsParser","createViewNode","replace","parentEl","register","viewNodeParser","viewNodes","curr","DiagramParser","propertiesParser","viewpointParser","ElementTagParser","doc","diagramParser","t","typeStr","parseArchimateElement","jTypeAttr","parseArchimateRelationship","ArchimateDiagramModel","parseArchimateDiagram","SketchModel","querySelectorAll","archiEl","ArchiElement","parseAccessType","Read","Write","ReadWrite","accessTypeStr","stringToAccessType","ArchiFileReader","parseModel","fixBendpoints","modelNodes","getElementsByTagNameNS","modelNode","dConns","d","startLocation","ArchimateConnection","state","groupAttrs","pathAttrs","selectedHighlight","lineText","prevProps","fromX","fromY","toX","toY","setState","selected","attrs","className","onClicked","onClick","bind","text_position","textAnchor","textStyle","cssStyle","stroke","toRGBA","strokeWidth","fill","color","fontFamily","fontSize","textAlign","pathClass","lineStyle","cssClassify","toLowerCase","React","ArchimateSvg","style2","strokeLinecap","strokeLinejoin","style3","style4","preserveAspectRatio","zoomAndPan","diagramName","gradientUnits","spreadMethod","x1","y1","x2","y2","stopColor","viewBox","transform","cx","cy","ry","rx","refX","refY","markerUnits","markerWidth","markerHeight","orient","TextFlow","lines","tspans","textWidth","text","maxLineWidth","maxWidth","calcWidth","words","line","calcLineWidth","svg","document","createElementNS","svgDoc","ownerDocument","setAttribute","insertAdjacentText","insertAdjacentElement","body","bbox","getBBox","removeChild","badgeBounds","textBounds","lineX","dy","EntityLabel","lineHeight","label","tb","clipPathId","clipPathD","clipPath","bb","badgeNotchHeight","SelectedViewNode","display","DefaultViewNode","backgroundClass","defaultBackgroundClass","badge","margin","reducedBy","title","desc","entityShape","entityBadge","entityLabel","elementType","shapeStyle","optLabel","elInst","BadgedRectViewNode","ApplicationComponentViewNode","mainBoxX","mainBoxWidth","componentDecoration","ArtifactViewNode","MotivationViewNode","AssessmentViewNode","BusinessActorViewNode","BusinessRoleViewNode","CollaborationViewNode","ConstraintViewNode","DataObjectViewNode","decorStyle","ContractViewNode","DeliverableViewNode","BadgedNodeViewNode","nodeBoxHeight","nodeBoxWidth","DeviceViewNode","viewNodeBounds","decorationPath","DiagramRefViewNode","DistributionNetworkViewNode","DriverViewNode","BadgedRoundedRectViewNode","EventViewNode","eventPath","notchX","notchHeight","eventWidth","FunctionViewNode","GapViewNode","GoalViewNode","GroupViewNode","groupHeaderHeight","GroupingViewNode","InteractionViewNode","InterfaceViewNode","elipsePath","JunctionViewNode","LocationViewNode","MeaningViewNode","NetworkViewNode","NodeViewNode","NoteViewNode","OrJunctionViewNode","OutcomeViewNode","PathViewNode","PlateauViewNode","PrincipleViewNode","ProcessViewNode","processPath","shaftTop","shaftBottom","middle","arrowBack","ProductViewNode","RepresentationViewNode","RequirementViewNode","ResourceViewNode","ServiceViewNode","servicePath","StakeholderViewNode","StickyViewNode","SystemSoftwareViewNode","ValueViewNode","WorkPackageViewNode","ZoomMode","DEFAULT_DISTANCE","ForceLayout","forceLink","simulation","prevNodes","prevConnections","adjustLinkDistance","ticked","force","d3force","centerX","centerY","onForceLayoutTick","nodesData","distance","on","nextConnections","of","nextNodes","links","alpha","restart","stop","MOUSE_WHEEL_SPEED","SvgPanZoom","minZoom","maxZoom","POSITIVE_INFINITY","storedCTMResult","mouseX","mouseY","calculateTransform","scalex","clientWidth","scaley","clientHeight","scale","tx","ty","zoomMode","FitToWindow","FitToWindowWidth","OneToOne","UserZoom","numbersDiffer","onZoom","onMouseDown","button","window","event","getOffsetXY","transformToScreen","addEventListener","onMouseMove","onMouseUp","dx","internalMoveBy","releaseDocumentMouse","removeEventListener","onWheel","scaleMultiplier","getScaleMultiplier","deltaY","publicZoomTo","preventDefault","onKeyDown","z","keyCode","stopPropagation","clientRect","owner","getBoundingClientRect","ownerRect","onSvgResize","svgSize","svgPanZoomRef","current","ownerSVGElement","rect","getClientRects","wheel","keepTransformInsideBounds","moveTo","smooth","moveBy","zoomByRatio","clientX","clientY","ratio","newScale","boundingBox","getBoundingBox","adjusted","getClientRect","diff","leftTop","client","sceneWidth","sceneHeight","parentCTM","getScreenCTM","parentScaleX","parentScaleY","parentOffsetX","parentOffsetY","f","offsetX","offsetY","MIN_DETECTABLE_CHANGE","abs","delta","ArchimateDiagramView","svgTopGroup","onFitToWindow","onFitToWidth","onOneHundredPercent","onZoomIn","onZoomOut","ext","diagramExtents","selectedDiagram","calculateMaxExtents","position","Button","Glyphicon","glyph","toFixed","isAutoLayout","elType","archimateViewNode","entityClicked","nodeIsSelected","paddingLeft","paddingRight","selectedEntity","nodeElement","DOMRect","Panel","handleCollapseExpand","collapse","initiallyCollapsed","panelClsName","header","iconClsName","aria-expanded","aria-hidden","DocumentationPanel","hasContent","EntityLink","textClass","ElementsTable","elementRows","colSpan","sort","byTypeAndName","elementClicked","empty","localeCompare","EntityIdPanel","entityContent","diagramContent","relationshipContent","elementContent","viewpointDescription","refMaybe","relationshipRefLink","ViewsTable","views","tableRows","byName","view","byOptionalString","PropertiesPanel","byKeyAndValue","property","propertiesEmpty","RelationshipsTable","byType","relationshipName","InfoTab","viewsEntity","ModelInfo","Form","horizontal","FormGroup","Col","componentClass","ControlLabel","sm","FormControl","Static","modelName","diagramRow","diagramViewpoint","QueryTab","onQuerySelected","queryId","queries","q","defaultExpanded","Heading","Title","toggle","Collapse","Body","controlId","InputGroup","placeholder","defaultValue","selectedQuery","onChange","Feedback","onNewQuery","HelpBlock","ElementTypeFilter","onToggle","onQueryChanged","updateQuery","onFilterCollapse","filterCollapsed","checkboxes","rowSpan","Checkbox","checked","LayerCheckbox","QueryWizard","fuseOptions","keys","maxPatternLength","shouldSort","threshold","onQueryNameChanged","onViewpointChanged","onPathDepthChanged","onLayerFilterChanged","remove","onAddClick","onRemoveClick","onSearchChanged","search","calculateResults","allElements","List","onLayerFilterCollapse","layerFilterCollapsed","elementTypeFilterCollapsed","results","Well","bsSize","columns","layerChecked","step","Badge","ListGroup","slice","ListGroupItem","addRemoveElement","isSelected","bsStyle","fuse","fuseElementTypes","fuseFilteredElements","Fuse","newQuery","onDiagramUpdated","prevState","SearchResult","resultClicked","entityType","SearchTab","handleClick","handleChange","currentTarget","entities","searchText","nextProps","maxResultIdx","opts","searchTitle","disabled","resultItems","result","PureComponent","OrganizationItem","selectedItemClass","selectedItemIconStyle","OrganizationTree","ulId","organizationId","linkHref","role","data-toggle","organizationName","OrganizationContent","sortedOrganizations","memoizeOne","entitySortFunc","itemEntities","isEqual","nextState","nameA","nameB","SidebarTab","SidebarWidth","ViewsTab","Sidebar","sidebarCollapsed","sidebarWidth","Normal","flexBasis","onSizeButtonClick","Collapsed","widthStyle","Wide","Tabs","animation","defaultActiveKey","DiagramTreeTab","activeKey","sidebarTabKey","onSelect","onTabSelected","Tab","eventKey","diagramLinkClicked","GraphTab","ArchimateNavigator","onCloseException","error","onWorkingViewHide","working","onDiagramLinkClick","hash","onEntityClick","onSidebarTabSelected","selectedDiagramId","selectedEntityId","exceptionView","workingView","diagramClicked","parser","DOMParser","loadStart","Date","now","loadTime","parseDone","parseStart","parseTime","fetch","modelUrl","then","response","parsedModel","xmlDocument","parseFromString","nsAttr","parse","err","curModel","String","errorMessage","Alert","onDismiss","Modal","show","onHide","Header","aria-valuenow","aria-valuemin","aria-valuemax","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uNAAYA,ECAAC,ECEAC,E,yGFFAF,O,mBAAAA,I,eAAAA,I,iBAAAA,I,0BAAAA,M,cCAAC,K,8CAAAA,E,0BAAAA,E,yBAAAA,M,cCEAC,K,oBAAAA,E,oBAAAA,E,0BAAAA,E,wBAAAA,E,oBAAAA,E,wBAAAA,E,0DAAAA,E,wBAAAA,E,cAAAA,E,aAAAA,M,KAaL,ICbKC,EDaCC,EAAkB,CAC7BF,EAAMG,SACNH,EAAMI,SACNJ,EAAMK,YACNL,EAAMM,WACNN,EAAMO,SACNP,EAAMQ,WACNR,EAAMS,2BACNT,EAAMU,WACNV,EAAMW,MACNX,EAAMY,MAGKC,EAAyB,CACpCb,EAAMG,SACNH,EAAMI,SACNJ,EAAMK,YACNL,EAAMM,WACNN,EAAMO,SACNP,EAAMQ,WACNR,EAAMS,4BAGD,SAASK,EAAeC,GAC7B,OAAQA,GACN,KAAKf,EAAMG,SACT,MAAO,gCACT,KAAKH,EAAMI,SACT,MAAO,gCACT,KAAKJ,EAAMK,YACT,MAAO,mCACT,KAAKL,EAAMM,WACT,MAAO,sCACT,KAAKN,EAAMO,SACT,MAAO,gCACT,KAAKP,EAAMQ,WACT,MAAO,kCACT,KAAKR,EAAMS,2BACT,MAAO,sCACT,KAAKT,EAAMU,WACT,MAAO,kCACT,KAAKV,EAAMW,MACT,MAAO,6BACT,KAAKX,EAAMY,KACX,QACE,MAAO,6BAIN,SAASI,EAAcD,GAC5B,OAAQA,GACN,KAAKf,EAAMG,SACT,MAAO,CACLF,EAAYgB,WACZhB,EAAYiB,eACZjB,EAAYkB,UAEhB,KAAKnB,EAAMI,SACT,MAAO,CACLH,EAAYmB,cACZnB,EAAYoB,sBACZpB,EAAYqB,cACZrB,EAAYsB,iBACZtB,EAAYuB,oBACZvB,EAAYwB,kBACZxB,EAAYyB,eACZzB,EAAY0B,gBACZ1B,EAAY2B,aACZ3B,EAAY4B,gBACZ5B,EAAY6B,SACZ7B,EAAY8B,QACZ9B,EAAY+B,gBAEhB,KAAKhC,EAAMK,YACT,MAAO,CACLJ,EAAYgC,yBACZhC,EAAYiC,qBACZjC,EAAYkC,iBACZlC,EAAYmC,oBACZnC,EAAYoC,uBACZpC,EAAYqC,qBACZrC,EAAYsC,mBACZtC,EAAYuC,mBACZvC,EAAYwC,YAEhB,KAAKzC,EAAMM,WACT,MAAO,CACLL,EAAYyC,SACZzC,EAAY0C,qBACZ1C,EAAY2C,kBACZ3C,EAAY4C,OACZ5C,EAAY6C,uBACZ7C,EAAY8C,wBACZ9C,EAAY+C,sBACZ/C,EAAYgD,QACZhD,EAAYiD,KACZjD,EAAYkD,KACZlD,EAAYmD,eACZnD,EAAYoD,wBACZpD,EAAYqD,gBACZrD,EAAYsD,mBACZtD,EAAYuD,sBACZvD,EAAYwD,oBACZxD,EAAYyD,iBACZzD,EAAY0D,kBACZ1D,EAAY2D,mBAEhB,KAAK5D,EAAMO,SACT,MAAO,CACLN,EAAY4D,oBACZ5D,EAAY6D,UACZ7D,EAAY8D,SACZ9D,EAAY+D,UAEhB,KAAKhE,EAAMQ,WACT,MAAO,CACLP,EAAYgE,WACZhE,EAAYiE,WACZjE,EAAYkE,OACZlE,EAAYmE,KACZnE,EAAYoE,QACZpE,EAAYqE,QACZrE,EAAYsE,UACZtE,EAAYuE,YACZvE,EAAYwE,YACZxE,EAAYyE,OAEhB,KAAK1E,EAAMS,2BACT,MAAO,CACLR,EAAY0E,YACZ1E,EAAY2E,IACZ3E,EAAY4E,oBACZ5E,EAAY6E,QACZ7E,EAAY8E,aAEhB,KAAK/E,EAAMU,WACT,MAAO,CACLT,EAAY+E,YACZ/E,EAAYgF,SACZhF,EAAYiF,YAEhB,KAAKlF,EAAMW,MACT,MAAO,CAACV,EAAYkF,SAAUlF,EAAYmF,UAC5C,KAAKpF,EAAMY,KACX,QACE,OAAOyE,I,SC9JDpF,K,8BAAAA,E,8CAAAA,E,8BAAAA,E,oCAAAA,E,0CAAAA,E,sCAAAA,E,gCAAAA,E,kCAAAA,E,4BAAAA,E,kCAAAA,E,oBAAAA,E,oBAAAA,E,kBAAAA,E,gCAAAA,E,oDAAAA,E,4CAAAA,E,oCAAAA,E,0CAAAA,E,gDAAAA,E,4CAAAA,E,wCAAAA,E,wCAAAA,E,wBAAAA,E,oBAAAA,E,4CAAAA,E,sCAAAA,E,gBAAAA,E,gDAAAA,E,kDAAAA,E,8CAAAA,E,kBAAAA,E,YAAAA,E,YAAAA,E,gCAAAA,E,kDAAAA,E,kCAAAA,E,wCAAAA,E,8CAAAA,E,0CAAAA,E,oCAAAA,E,sCAAAA,E,sCAAAA,E,0CAAAA,E,sBAAAA,E,oBAAAA,E,oBAAAA,E,wBAAAA,E,wBAAAA,E,gBAAAA,E,YAAAA,E,kBAAAA,E,kBAAAA,E,sBAAAA,E,0BAAAA,E,0BAAAA,E,cAAAA,E,0BAAAA,E,UAAAA,E,0CAAAA,E,kBAAAA,E,0BAAAA,E,0BAAAA,E,oBAAAA,E,wBAAAA,E,wBAAAA,E,gCAAAA,E,oBAAAA,E,qBAAAA,M,KAuEL,ICzEKqF,EDyECD,EAAwC,CACnDpF,EAAYmB,cACZnB,EAAYoB,sBACZpB,EAAYqB,cACZrB,EAAYsB,iBACZtB,EAAYuB,oBACZvB,EAAYwB,kBACZxB,EAAYyB,eACZzB,EAAY0B,gBACZ1B,EAAY2B,aACZ3B,EAAY4B,gBACZ5B,EAAY6B,SACZ7B,EAAYkF,SACZlF,EAAY8B,QACZ9B,EAAY+B,eACZ/B,EAAYgC,yBACZhC,EAAYiC,qBACZjC,EAAYkC,iBACZlC,EAAYmC,oBACZnC,EAAYoC,uBACZpC,EAAYqC,qBACZrC,EAAYsC,mBACZtC,EAAYuC,mBACZvC,EAAYwC,WACZxC,EAAYyC,SACZzC,EAAY0C,qBACZ1C,EAAY2C,kBACZ3C,EAAY4C,OACZ5C,EAAY6C,uBACZ7C,EAAY8C,wBACZ9C,EAAY+C,sBACZ/C,EAAYgD,QACZhD,EAAYiD,KACZjD,EAAYkD,KACZlD,EAAYmD,eACZnD,EAAYoD,wBACZpD,EAAYqD,gBACZrD,EAAYsD,mBACZtD,EAAYuD,sBACZvD,EAAYwD,oBACZxD,EAAYyD,iBACZzD,EAAY0D,kBACZ1D,EAAY2D,kBACZ3D,EAAY4D,oBACZ5D,EAAY6D,UACZ7D,EAAY8D,SACZ9D,EAAY+D,SACZ/D,EAAYgE,WACZhE,EAAYiE,WACZjE,EAAYkE,OACZlE,EAAYmE,KACZnE,EAAYoE,QACZpE,EAAYqE,QACZrE,EAAYsE,UACZtE,EAAYuE,YACZvE,EAAYwE,YACZxE,EAAYyE,MACZzE,EAAY0E,YACZ1E,EAAY2E,IACZ3E,EAAY4E,oBACZ5E,EAAY6E,QACZ7E,EAAY8E,YACZ9E,EAAY+E,YACZ/E,EAAYgF,SACZhF,EAAYiF,WACZjF,EAAYgB,WACZhB,EAAYiB,eACZjB,EAAYkB,SACZlB,EAAYmF,UAGDG,EAA4CvE,EACvDhB,EAAMI,UACNoF,OAAOxE,EAAchB,EAAMK,aAAcW,EAAchB,EAAMM,aAClDmF,EAAiDzE,EAC5DhB,EAAMU,a,SCpJI4E,K,sCAAAA,E,sCAAAA,E,oCAAAA,E,sCAAAA,E,sCAAAA,E,8BAAAA,E,4BAAAA,E,4BAAAA,E,kCAAAA,E,oCAAAA,E,wBAAAA,E,4CAAAA,E,4CAAAA,E,sCAAAA,E,gCAAAA,E,sCAAAA,E,qCAAAA,M,KAoBL,ICZKI,EDYCC,EAAoB,CAC/BL,EAAiBM,YACjBN,EAAiBO,YACjBP,EAAiBQ,WACjBR,EAAiBS,YACjBT,EAAiBU,YACjBV,EAAiBW,QACjBX,EAAiBY,OACjBZ,EAAiBa,OACjBb,EAAiBc,UACjBd,EAAiBe,WACjBf,EAAiBgB,KACjBhB,EAAiBiB,eACjBjB,EAAiBkB,eACjBlB,EAAiBmB,YACjBnB,EAAiBL,SACjBK,EAAiBN,YACjBM,EAAiBJ,Y,kBC7BPQ,K,cAAAA,E,4BAAAA,E,4BAAAA,E,4CAAAA,E,8CAAAA,E,wBAAAA,E,kBAAAA,E,oBAAAA,E,kBAAAA,E,sCAAAA,E,oCAAAA,E,4DAAAA,E,kDAAAA,E,0CAAAA,E,8DAAAA,E,oCAAAA,E,sCAAAA,E,wBAAAA,E,oDAAAA,E,wBAAAA,E,oBAAAA,E,gCAAAA,E,0CAAAA,E,4BAAAA,E,kBAAAA,E,sBAAAA,E,4DAAAA,E,0BAAAA,E,sCAAAA,E,sCAAAA,E,oCAAAA,E,4CAAAA,E,8CAAAA,E,gCAAAA,E,4CAAAA,E,8BAAAA,E,iBAAAA,M,KAwCL,IAAMgB,EAAwC,CACnDhB,EAAciB,MACdjB,EAAckB,aACdlB,EAAcmB,aACdnB,EAAcoB,qBACdpB,EAAcqB,sBACdrB,EAAcpF,WACdoF,EAAcsB,QACdtB,EAAcnF,SACdmF,EAAc3D,QACd2D,EAAcuB,kBACdvB,EAAcwB,iBACdxB,EAAcyB,6BACdzB,EAAc0B,wBACd1B,EAAc2B,oBACd3B,EAAc4B,8BACd5B,EAAc6B,iBACd7B,EAAc8B,kBACd9B,EAAc+B,WACd/B,EAAcgC,yBACdhC,EAAclF,WACdkF,EAAcvF,SACduF,EAAciC,eACdjC,EAAckC,oBACdlC,EAAcmC,aACdnC,EAAcoC,QACdpC,EAAcqC,UACdrC,EAAcsC,6BACdtC,EAAcjB,YACdiB,EAAcuC,kBACdvC,EAAcwC,kBACdxC,EAAcyC,iBACdzC,EAAc0C,qBACd1C,EAAc2C,sBACd3C,EAAc4C,eACd5C,EAAc6C,qBACd7C,EAAc8C,cACd9C,EAAc+C,QAGHC,EAA4B,IAAIC,IAG3C,CACA,CACEjD,EAAcuC,kBACdxC,EAAsBD,OACpBvF,EAAYiC,qBACZjC,EAAYqC,qBACZrC,EAAYuC,mBACZvC,EAAYmB,cACZnB,EAAYoB,sBACZpB,EAAYwB,kBACZxB,EAAY2B,aACZ3B,EAAY4B,kBAGhB,CACE6D,EAAc0C,qBACd3C,EAAsBD,OACpBvF,EAAYgC,yBACZhC,EAAYiC,qBACZjC,EAAYmC,oBACZnC,EAAYoC,uBACZpC,EAAYqC,qBACZrC,EAAYuC,mBACZvC,EAAYwC,aAGhB,CACEiD,EAAc0B,wBACd3B,EAAsBD,OACpBvF,EAAYgC,yBACZhC,EAAYiC,qBACZjC,EAAYmC,oBACZnC,EAAYoC,uBACZpC,EAAYqC,qBACZrC,EAAYuC,mBACZvC,EAAYwC,WACZxC,EAAYkF,WAGhB,CAACO,EAAcoB,qBAAsBvB,GACrC,CACEG,EAAc2C,sBACd5C,EAAsBD,OACpBvF,EAAYgC,yBACZhC,EAAYiC,qBACZjC,EAAYqC,qBACZrC,EAAYwC,aAGhB,CACEiD,EAAcuB,kBACdxB,EAAsBD,OACpBvF,EAAYgC,yBACZhC,EAAYiC,qBACZjC,EAAYqC,qBACZrC,EAAYuC,mBACZvC,EAAYqB,cACZrB,EAAYsB,iBACZtB,EAAYuB,oBACZvB,EAAYyB,eACZzB,EAAY0B,gBACZ1B,EAAY2B,aACZ3B,EAAYwC,aAGhB,CACEiD,EAAcwC,kBACdzC,EAAsBD,OACpBvF,EAAYmB,cACZnB,EAAYsB,iBACZtB,EAAY2B,eAGhB,CACE8D,EAAcyC,iBACd1C,EAAsBD,OACpBvF,EAAYuC,mBACZvC,EAAYmB,cACZnB,EAAYoB,sBACZpB,EAAYqB,cACZrB,EAAYsB,iBACZtB,EAAYuB,oBACZvB,EAAYyB,eACZzB,EAAY0B,gBACZ1B,EAAY2B,aACZ3B,EAAY4B,gBACZ5B,EAAYkF,SACZlF,EAAY+B,iBAGhB,CACE0D,EAAcyB,6BACd1B,EAAsBD,OACpBvF,EAAYgC,yBACZhC,EAAYiC,qBACZjC,EAAYkC,iBACZlC,EAAYmC,oBACZnC,EAAYoC,uBACZpC,EAAYqC,qBACZrC,EAAYsC,mBACZtC,EAAYuC,mBACZvC,EAAYmB,cACZnB,EAAYoB,sBACZpB,EAAYqB,cACZrB,EAAYsB,iBACZtB,EAAYuB,oBACZvB,EAAYwB,kBACZxB,EAAYyB,eACZzB,EAAY0B,gBACZ1B,EAAY2B,aACZ3B,EAAY4B,gBACZ5B,EAAYwC,WACZxC,EAAYkF,SACZlF,EAAY+B,iBAGhB,CAAC0D,EAAciC,eAAgBpC,GAC/B,CACEG,EAAc8B,kBACd,CACEvH,EAAYiE,WACZjE,EAAYmE,KACZnE,EAAYsE,UACZtE,EAAYuE,cAGhB,CACEkB,EAAc6B,iBACd,CACEtH,EAAYiE,WACZjE,EAAYmE,KACZnE,EAAYsE,UACZtE,EAAYuE,cAGhB,CACEkB,EAAc4B,8BACd7B,EAAsBD,OACpBvF,EAAYgC,yBACZhC,EAAYiC,qBACZjC,EAAYyC,SACZzC,EAAY2C,kBACZ3C,EAAYwC,WACZxC,EAAY4C,OACZ5C,EAAY+C,sBACZ/C,EAAYgD,QACZhD,EAAYiD,KACZjD,EAAYmD,iBAGhB,CACEsC,EAAcsC,6BACdzC,EAAiBC,OACfC,EACAxF,EAAYkF,SACZlF,EAAYuE,YACZvE,EAAYiE,WACZjE,EAAYmE,KACZnE,EAAY2B,aACZ3B,EAAY8E,YACZ9E,EAAY0E,YACZ1E,EAAYmB,cACZnB,EAAY6E,QACZ7E,EAAY2E,MAGhB,CACEc,EAAcqB,sBACdtB,EAAsBD,OACpBvF,EAAYyC,SACZzC,EAAYyB,eACZzB,EAAYwC,WACZxC,EAAYoE,QACZpE,EAAY+B,iBAGhB,CACE0D,EAAc6C,qBACd9C,EAAsBD,OACpBvF,EAAYiC,qBACZjC,EAAYmC,oBACZnC,EAAY2C,kBACZ3C,EAAY4C,OACZ5C,EAAY6C,uBACZ7C,EAAY8C,wBACZ9C,EAAY+C,sBACZ/C,EAAYgD,QACZhD,EAAYiD,KACZjD,EAAYmD,iBAGhB,CACEsC,EAAc4C,eACd7C,EAAsBD,OACpBvF,EAAYyC,SACZzC,EAAY2C,kBACZ3C,EAAY4C,OACZ5C,EAAY6C,uBACZ7C,EAAY8C,wBACZ9C,EAAY+C,sBACZ/C,EAAYkF,SACZlF,EAAYgD,QACZhD,EAAYiD,KACZjD,EAAYmD,iBAGhB,CAACsC,EAAckB,aAAcrB,GAC7B,CAACG,EAAc8C,cAAenD,EAAaG,OAAOC,IAClD,CAACC,EAAcsB,QAAS3B,EAAaG,OAAOC,IAC5C,CACEC,EAAcqC,UACdtC,EAAsBD,OAAOvF,EAAY2E,IAAK3E,EAAY6E,UAE5D,CACEY,EAAclF,WACd,CACEP,EAAYgE,WACZhE,EAAYiE,WACZjE,EAAYkE,OACZlE,EAAYmE,KACZnE,EAAYsE,UACZtE,EAAYuE,YACZvE,EAAYwE,cAGhB,CACEiB,EAAcmB,aACdpB,EAAsBD,OACpBvF,EAAYmB,cACZnB,EAAYoB,sBACZpB,EAAYwB,kBACZxB,EAAY2B,aACZ3B,EAAYkF,WAGhB,CAACO,EAAckC,oBAAqBrC,GACpC,CAACG,EAAcnF,SAAUgF,GACzB,CAACG,EAAc+B,WAAY,CAACxH,EAAYmE,KAAMnE,EAAYsE,YAC1D,CACEmB,EAAc3D,QACd0D,EAAsBD,OACpBvF,EAAYiC,qBACZjC,EAAYqC,qBACZrC,EAAYuC,mBACZvC,EAAYmB,cACZnB,EAAYqB,cACZrB,EAAYsB,iBACZtB,EAAYuB,oBACZvB,EAAYwB,kBACZxB,EAAY0B,gBACZ1B,EAAY2B,aACZ3B,EAAY4B,gBACZ5B,EAAY6B,SACZ7B,EAAY8B,QACZ9B,EAAYyE,QAGhB,CACEgB,EAAcoC,QACdrC,EAAsBD,OACpBvF,EAAYmB,cACZnB,EAAY2B,aACZ3B,EAAY0E,YACZ1E,EAAYmE,KACZnE,EAAY8E,cAGhB,CACEW,EAAcgC,yBACdnC,EAAiBC,OACfC,EACAxF,EAAYiE,WACZjE,EAAYmE,KACZnE,EAAYuE,cAGhB,CAACkB,EAAcmC,aAActC,GAC7B,CACEG,EAAc2B,oBACd5B,EAAsBD,OACpBvF,EAAYgC,yBACZhC,EAAYiC,qBACZjC,EAAYuC,mBACZvC,EAAYmB,cACZnB,EAAYoB,sBACZpB,EAAYqB,cACZrB,EAAYsB,iBACZtB,EAAYuB,oBACZvB,EAAYyB,eACZzB,EAAY0B,gBACZ1B,EAAY2B,aACZ3B,EAAY4B,gBACZ5B,EAAYwC,aAGhB,CACEiD,EAAcjB,YACd,CACExE,EAAYgE,WACZhE,EAAYkE,OACZlE,EAAYmE,KACZnE,EAAYwE,cAGhB,CAACiB,EAAcvF,SAAUoF,GACzB,CAACG,EAAcwB,iBAAkB3B,GACjC,CAACG,EAAcpF,WAAYiF,GAC3B,CAACG,EAAciB,MAAOtB,KAGjB,SAASuD,EACdC,GAEA,IAAIC,EAAYpD,EAAc+C,OAQ9B,OAPAC,EAA0BK,SACxB,SAACC,EAAgCC,GAC3BC,aAAGL,EAAcM,cAAiBH,MACpCF,EAAYG,MAIXH,EAGF,SAASM,EACdC,EACAC,GAEA,GAAID,IAAkB3D,EAAc+C,OAClC,OAAOa,EAEP,IAAMT,EAAeH,EAA0Ba,IAAIF,GACnD,YAAqBG,IAAjBX,EACKS,EAEAH,cAAiBN,GCtavB,IAAMY,EAAb,WA+BE,WAAYC,EAAWC,EAAWC,EAAWC,GAAa,yBALnDH,OAKkD,OAJlDC,OAIkD,OAHlDC,OAGkD,OAFlDC,OAEkD,EACvDC,KAAKJ,EAAIA,EACTI,KAAKH,EAAIA,EACTG,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,EAnCb,sDAIqBE,GACjB,GAAKA,EAAL,CAGA,IAAMC,EAAKD,EAAIE,MAAM,sDACrB,GAAKD,EAGL,OAAO,IAAIP,EACTS,OAAOC,SAASH,EAAG,GAAI,IACvBE,OAAOC,SAASH,EAAG,GAAI,IACvBE,OAAOC,SAASH,EAAG,GAAI,IACvBA,EAAG,GAAME,OAAOC,SAASH,EAAG,GAAI,IAAM,IAAS,IAAQ,QAhB7D,8BAuBI,OAAO,IAAIP,EAAM,EAAG,EAAG,EAAG,SAvB9B,gDAuCI,MAAM,YAAN,OAAmBK,KAAKJ,EAAxB,gBAAiCI,KAAKH,EAAtC,gBAA+CG,KAAKF,EAApD,gBAA6DE,KAAKD,EAAlE,OAvCJ,+BA2CI,IAAMO,EAAiB,CAACN,KAAKJ,EAAGI,KAAKH,EAAGG,KAAKF,GACzCE,KAAKD,GACPO,EAAKC,KAAKP,KAAKQ,eAEjB,IAAMC,EAAKH,EACRI,QAAO,SAAAC,GAAC,YAAUjB,IAANiB,KACZC,KAAY,SAAAD,GAAC,OAAIA,KACjBC,KAAI,SAAAD,GAAC,OAAIA,EAAEE,SAAS,OACpBD,KAAI,SAAAE,GAAC,OAAIA,EAAEC,UACXH,KAAI,SAAAE,GAAC,OAAkB,IAAbA,EAAEE,OAAF,WAAqBF,GAAMA,KACrCG,KAAK,IAER,MAAM,IAAN,OAAWR,KAvDf,oCAiE0C,IAApBS,EAAmB,uDAAL,IAChC,OAAKlB,KAAKD,EAGHoB,KAAKC,MAAMF,GAAOlB,KAAKD,EAAI,MAFzBmB,MAnEb,KCJaG,EAAb,WA0BE,WAAYC,EAAeC,EAAeC,EAAgBC,GAAoB,yBANvEH,UAMsE,OALtEC,UAKsE,OAHtEC,WAGsE,OAFtEC,cAEsE,EACvEH,IACFtB,KAAKsB,KAAOA,GAEVC,IACFvB,KAAKuB,KAAOA,GAEVC,IACFxB,KAAKwB,MAAQA,GAEXC,IACFzB,KAAKyB,SAAWA,GArCtB,iEAOgCxB,GAC5B,GAAKA,EAAL,CAGA,IAAMyB,EAAYzB,EAAI0B,MAAM,KAC5B,OAAO,IAAIN,EACTK,EAAU,GACVtB,OAAOwB,WAAWF,EAAU,IAC5BtB,OAAOC,SAASqB,EAAU,GAAI,IAC9BzB,QAhBN,gDA0CI,MAAM,cAAN,OAAqBD,KAAKsB,KAA1B,mBAAyCtB,KAAKuB,KAA9C,oBAA8DvB,KAAKwB,MAAnE,OA1CJ,oCA8CI,OACExB,KAAKyB,UACL,CACE,EACAzB,KAAKsB,KACLtB,KAAKuB,KACLvB,KAAKwB,MACL,UACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACAxB,KAAKsB,MAEJV,KAAI,SAAAD,GAAC,gBAAOA,MACZM,KAAK,OAvEd,oCA8EI,OAAQjB,KAAKwB,OACX,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,cACT,QACE,MAAO,QAtFf,KCIaK,EAAb,sCAESC,mBAFT,OAISC,eAJT,OAMSC,eANT,OASSC,eATT,OAWSC,eAXT,OAaSC,UAbT,OAeSC,kBAfT,GCFqBC,E,WAInB,WAAYC,EAAeC,GAAc,yBAHlCD,WAGiC,OAFjCC,SAEiC,EACtCvC,KAAKsC,MAAQA,EACbtC,KAAKuC,IAAMA,E,4DAGU3C,GACrB,IAAM4C,EAAWrB,KAAKD,IAAIlB,KAAKsC,MAAO1C,EAAE0C,OAClCG,EAAStB,KAAKuB,IAAI1C,KAAKuC,IAAK3C,EAAE2C,KACpC,KAAIC,EAAWC,GAGf,OAAQD,EAAWC,GAAU,I,4BAGlBE,GACX,OAAO3C,KAAKsC,OAASK,GAAKA,GAAK3C,KAAKuC,Q,KCnB3BK,EAAb,WAIE,WAAYC,EAAWC,GAAY,yBAH5BD,OAG2B,OAF3BC,OAE2B,EAChC9C,KAAK6C,EAAIA,EACT7C,KAAK8C,EAAIA,EANb,mDASgBC,GACZ,OAAO/C,KAAK6C,IAAME,EAAMF,GAAK7C,KAAK8C,IAAMC,EAAMD,IAVlD,+BAakBC,GACd,OAAO5B,KAAK6B,KAAK,SAACD,EAAMF,EAAI7C,KAAK6C,EAAM,GAAtB,SAA2BE,EAAMD,EAAI9C,KAAK8C,EAAM,MAdrE,iCAkBI,MAAO,CAAC9C,KAAK6C,EAAG7C,KAAK8C,GAAGlC,KAAI,SAAAD,GAAC,OAAIA,EAAEE,cAAYI,KAAK,OAlBxD,6BAuBgBgC,GACZ,YAAevD,IAAXuD,IAGGA,EAAOC,SAASC,MAAMnD,KAAK6C,IAAMI,EAAOG,SAASD,MAAMnD,KAAK8C,QA3BvE,KCEaO,EAAb,WAkBE,WACER,EACAC,EACAQ,EACAC,GACC,yBAdaV,OAcd,OAbcC,OAad,OAZcQ,WAYd,OAXcC,YAWd,OAVcC,SAUd,OATcC,UASd,OARcC,WAQd,OAPcC,YAOd,EACA3D,KAAK6C,EAAIA,EACT7C,KAAK8C,EAAIA,EACT9C,KAAKsD,MAAQA,EACbtD,KAAKuD,OAASA,EACdvD,KAAKwD,IAAMxD,KAAK8C,GAAK,EACrB9C,KAAKyD,KAAOzD,KAAK6C,GAAK,EACtB7C,KAAK0D,MAAQ1D,KAAKyD,KAAOzD,KAAKsD,MAC9BtD,KAAK2D,OAAS3D,KAAKwD,IAAMxD,KAAKuD,OA/BlC,2DAC0BK,GACtB,OAAO,IAAIP,EAAOO,EAASf,EAAGe,EAASd,EAAG,EAAG,KAFjD,mCAMI,OAAO,IAAIO,EAAO,EAAG,EAAG,EAAG,OAN/B,4CAkCgBQ,GACZ,OAAO,IAAIR,EACTrD,KAAKyD,KAAOI,EAAGJ,KACfzD,KAAKwD,IAAMK,EAAGL,IACdxD,KAAKsD,MACLtD,KAAKuD,UAvCX,iCA4CI,MAAM,aAAN,OAAoBvD,KAAK6C,EAAzB,gBAAkC7C,KAAK8C,EAAvC,oBAAoD9C,KAAKsD,MAAzD,qBACEtD,KAAKuD,OADP,OA5CJ,+BAkDI,OAAO,IAAIlB,EAAMrC,KAAKyD,KAAMzD,KAAK0D,SAlDrC,+BAsDI,OAAO,IAAIrB,EAAMrC,KAAKwD,IAAKxD,KAAK2D,UAtDpC,+BA2DI,OAAO,IAAIf,EACT5C,KAAKyD,KAAOzD,KAAKsD,MAAQ,EACzBtD,KAAKwD,IAAMxD,KAAKuD,OAAS,KA7D/B,4BAiEeR,GACX,OAAO/C,KAAK2D,OAASZ,EAAMS,MAlE/B,4BAqEeT,GACX,OAAO/C,KAAKwD,IAAMT,EAAMY,SAtE5B,8BAyEiBZ,GACb,OAAO/C,KAAKyD,KAAOV,EAAMW,QA1E7B,6BA6EgBX,GACZ,OAAO/C,KAAK0D,MAAQX,EAAMU,OA9E9B,gCAiFmBK,GACf,OAAO,IAAIT,EACTrD,KAAKyD,KAAOK,EACZ9D,KAAKwD,IAAMM,EACX9D,KAAKsD,MAAc,EAANQ,EACb9D,KAAKuD,OAAe,EAANO,KAtFpB,6BA2FgBf,GACZ,OACE/C,KAAKyD,KAAOV,EAAMU,MAClBzD,KAAK0D,MAAQX,EAAMW,OACnB1D,KAAKwD,IAAMT,EAAMS,KACjBxD,KAAK2D,OAASZ,EAAMY,SAhG1B,8BAqGI,OAAsB,IAAf3D,KAAKsD,OAAiC,IAAhBtD,KAAKuD,WArGtC,KAyGO,SAASQ,IACd,OAAO,IAAIV,EAAO,EAAG,EAAG,EAAG,G,YC5GhBW,EAAb,WAIE,WAAYjE,EAAUD,GAAW,yBAH1BC,OAGyB,OAFzBD,OAEyB,EAC9BE,KAAKD,EAAIA,EACTC,KAAKF,EAAIA,EANb,qDAUI,OAAOE,KAAKF,EAAEmE,SAASjE,KAAKD,KAVhC,8BAaiBmE,GACb,IAAMlD,EAAShB,KAAKF,EAAEmE,SAASjE,KAAKD,GACpC,OAAOC,KAAKmE,UAAUnD,EAASkD,KAfnC,gCAkBmBA,GACf,IAAMlD,EAAShB,KAAKF,EAAEmE,SAASjE,KAAKD,GACpC,OAAImE,EAAO,EACFlE,KAAKD,EAEViB,EAASkD,EACJlE,KAAKF,EAEPE,KAAKoE,eAAeF,EAAOlD,KA1BtC,qCA6BwBqD,GACpB,OAAO,IAAIzB,EACT5C,KAAKD,EAAE8C,GAAK7C,KAAKF,EAAE+C,EAAI7C,KAAKD,EAAE8C,GAAKwB,EACnCrE,KAAKD,EAAE+C,GAAK9C,KAAKF,EAAEgD,EAAI9C,KAAKD,EAAE+C,GAAKuB,OAhCzC,KCKahL,EAAb,WAUE,WAAYiL,EAAwBC,GAAuB,yBATpDD,gBASmD,OARnDE,YAQmD,OAPnDC,cAOmD,OANnDC,kBAMmD,OALnDC,kBAKmD,OAJnDJ,gBAImD,OAHlDK,WAGkD,OAFlDC,gBAEkD,EACxD7E,KAAKsE,WAAaA,EAClBtE,KAAKuE,WAAaA,IAAc,EAChCvE,KAAK0E,aAAe1E,KAAKsE,WAAWI,gBAAkBX,IACtD/D,KAAK2E,aAAe3E,KAAKsE,WAAWK,gBAAkBZ,IACtD/D,KAAKwE,OAASxE,KAAK8E,aACnB9E,KAAKyE,SAAWzE,KAAK+E,eAhBzB,gDAyCsB,IAAD,SACjB,GAAI/E,KAAK4E,MACP,OAAO5E,KAAK4E,MAAM3D,KAAK,KAEzB,IAAI+D,EAAyB,GACxBhF,KAAKuE,aACRS,EAAahF,KAAKiF,SAASjF,KAAKwE,OAAQ,GAAG5D,KAAI,SAAAsE,GAAG,OAChD,EAAKC,cAAcD,EAAI,GAAIA,EAAI,GAAIA,EAAI,QAG3C,IAAMN,GAAmB,MAAgBlJ,OAAjB,SACtBsE,KAAKoF,QAAQpF,KAAKwE,OAAO,KADH,mBAEnBQ,GAFmB,CAGtBhF,KAAKqF,QAAQrF,KAAKwE,OAAOxE,KAAKwE,OAAOxD,OAAS,OAIhD,OAFAhB,KAAK4E,MAAQA,EAENA,EAAM3D,KAAK,OA1DtB,4BA+DeqE,GACX,IAAIC,EAAkBvF,KAAKgB,SAAWsE,EAChCE,EAAKxF,KAAKyE,SAASgB,QACvB,SAACC,EAAwBC,GACvB,YAAYjG,IAARgG,GAAqBC,EAAQ3E,UAAYuE,EACpCI,EAAQxB,UAAUoB,IAE3BA,GAAmBI,EAAQ3E,SACpB0E,UAEThG,GAEF,OAAO8F,GAAqB,IAAI5C,EAAM,EAAK,KA3E/C,iCAgFI,OAAO5C,KAAK4F,MAAM,MAhFtB,qCAyFyB7F,EAAWD,GAChC,IAII+F,EACAC,EALEC,EAAUhG,EAAEmD,SACZ8C,EAAUlG,EAAEoD,SACZ+C,EAAiBF,EAAQG,gBAAgBF,GAI3CC,EACFJ,EAAKC,EAAKG,EACDnG,EAAEqG,QAAQpG,IACnB8F,EAAK9F,EAAE2D,MACPoC,EAAKhG,EAAE2D,OAEPoC,EAAK9F,EAAE0D,KACPqC,EAAKhG,EAAE4D,OAGT,IAKI0C,EACAC,EANEC,EAAUvG,EAAEqD,SACZmD,EAAUzG,EAAEsD,SAEZoD,EAAiBF,EAAQJ,gBAAgBK,GAc/C,OAVIC,EACFJ,EAAKC,EAAKG,EACD1G,EAAE2G,MAAM1G,IACjBqG,EAAKrG,EAAEyD,IACP6C,EAAKvG,EAAE6D,SAEPyC,EAAKrG,EAAE4D,OACP0C,EAAKvG,EAAE0D,KAGF,CAAC,IAAIZ,EAAMiD,EAAIO,GAAK,IAAIxD,EAAMkD,EAAIO,MA3H7C,6CA+HI,OACErG,KAAKsE,WAAWU,WAKbpE,KAAI,SAAA8F,GAAS,OAAIrD,EAAOsD,UAAUD,QArI3C,qCA4II,IAFA,IAAME,EAAY5G,KAAKwE,OAAOxD,OAAS,EACjC6F,EAAO,IAAIC,MAAMF,GACdG,EAAM,EAAGA,EAAMF,EAAK7F,SAAU+F,EACrCF,EAAKE,GAAO,IAAI/C,EAAQhE,KAAKwE,OAAOuC,GAAM/G,KAAKwE,OAAOuC,EAAM,IAE9D,OAAOF,IA/IX,mCA0JI,IAPA,IAAMG,GAAY,IAAIF,OACnBpL,OAAOsE,KAAK0E,aAAc1E,KAAKiH,uBAAwBjH,KAAK2E,cAC5DjE,QAAO,SAAAZ,GAAC,YAAUJ,IAANI,KAGX0E,EAAkB,GAClBzE,EAAIiH,EAAUE,QACXF,EAAUhG,OAAS,GAAG,CAC3B,IAAMlB,EAAIkH,EAAUE,QACpB1C,EAASA,EAAO9I,OAAOsE,KAAKmH,eAAepH,EAAGD,IAC9CC,EAAID,EAIN,IAAMsH,EAAS,IAAIvI,IAEnB,OADA2F,EAAOvF,SAAQ,SAAAuG,GAAE,OAAI4B,EAAOC,IAAI7B,EAAG3E,WAAY2E,MACxCsB,MAAMQ,KAAKF,EAAOG,YAnK7B,uCAwKI,OAAOvH,KAAKyE,SAAS7D,KAAI,SAAAE,GAAC,OAAIA,EAAEE,cAxKpC,+BA6KI,OAAIhB,KAAK6E,WACA7E,KAAK6E,YAEd7E,KAAK6E,WAAa7E,KAAKwH,iBAAiB/B,QACtC,SAACgC,EAAOzG,GAAR,OAAmByG,EAAQzG,IAC3B,GAEKhB,KAAK6E,cApLhB,8BAuLkBe,GACd,MAAM,KAAN,OAAYA,KAxLhB,8BA2LkBA,GACd,MAAM,KAAN,OAAYA,KA5LhB,8BA+LkB8B,EAAWlC,GACzB,MAAM,KAAN,OAAYkC,EAAZ,YAAkBlC,KAhMtB,oCAmMwBzF,EAAUD,EAAU6H,GACxC,IAAMC,EAAM,IAAI5D,EAAQjE,EAAGD,GAAG+H,QAtMR,GAuMhBC,EAAM,IAAI9D,EAAQlE,EAAG6H,GAAGxD,UAvMR,GAwMtB,MAAO,CAACnE,KAAKqF,QAAQuC,GAAM5H,KAAK+H,QAAQjI,EAAGgI,MAtM/C,+BAyMmBE,EAAcC,GAC7B,IAAMC,EAAMF,EAAIhH,OAASiH,EAAO,EAChC,GAAIC,EAAM,EACR,MAAO,GAGT,IADA,IAAMC,EAAY,IAAIrB,MAAMoB,GACnBE,EAAI,EAAGA,EAAIF,IAAOE,EACzBD,EAAUC,GAAKA,EAEjB,OAAOD,EAAUvH,KAAI,SAAAwH,GAAC,MAAI,CAACJ,EAAII,GAAIJ,EAAII,EAAI,GAAIJ,EAAII,EAAI,WAlN3D,K,SCgBaC,EAAwB,CACnCC,KAAMlI,OAAOmI,iBACbC,KAAMpI,OAAOmI,iBACbE,KAAMrI,OAAOsI,iBACbC,KAAMvI,OAAOsI,kBA4IFE,EAAb,YACE,WAAYC,GAAkB,IAAD,8BAC3B,4CAAMA,KACDvH,KAAO,EAAKwH,YAAYxH,KAC7B,EAAKyH,MAAQ,IAAIC,MAAMH,GAASE,MAHL,EAD/B,uCAAqCC,QASxBC,EAAb,sIAAiCL,GAGpBM,EAAb,sIAAgCN,GAGnBO,EAAb,YAGE,WAAYN,EAAiBO,GAAiB,IAAD,8BAC3C,4CAAMP,KAHDO,WAEsC,EAE3C,EAAKA,MAAQA,EAF8B,EAH/C,2BAAuCR,GCtLhC,IAAMS,EAAb,WAIE,WAAYlK,EAAaD,GAAiB,yBAHnCC,SAGkC,OAFlCD,WAEkC,EACvCc,KAAKb,IAAMA,EACXa,KAAKd,MAAQA,EANjB,uDAUI,MAAM,YAAN,OAAmBc,KAAKb,IAAxB,eAAkCa,KAAKd,MAAvC,UAVJ,KCqCaoK,EAAb,WAqFE,WAAYC,EAAeC,GAAmB,yBAnFvCC,QAmFsC,OAlFtCnI,UAkFsC,OAjFtCoI,mBAiFsC,OA/EtCC,UA+EsC,OA9EtCnI,WA8EsC,OA3EtCoI,cA2EsC,OAxEtCC,aAwEsC,OAtEtCC,WAA0B,GAsEY,KAnEtCC,YAmEsC,OA/DtC9G,YA+DsC,OA1DtC+G,MAAqB,GA0DiB,KAzDtCC,YAAwB,GAyDc,KAtDtCC,aAsDsC,OAnDtCC,eAmDsC,OAjDtCX,aAiDsC,OA1CtCY,gBA0CsC,OAnCtCC,eAmCsC,OA7BtCC,WA6BsC,OAzBtCzH,OAyBsC,OArBtCC,OAqBsC,OAjBtCyH,QAiBsC,OAbtCC,QAasC,OATtCC,QASsC,OALtCC,QAKsC,OAHrCnB,WAGqC,OAFrCoB,YAEqC,EAC3C3K,KAAKuJ,MAAQA,EACbvJ,KAAKyJ,GAAKzJ,KAAKuJ,MAAMqB,eACrB5K,KAAKwJ,QAAUA,EACfxJ,KAAK2J,KAAO,WACZ3J,KAAKiD,OAASc,IA1FlB,uDA8FI,MAAM,YAAN,OAAmB/D,KAAKsB,MAAQ,GAAhC,aAAuCtB,KAAKkK,QAAUlK,KAAKkK,QAAU,GAArE,OA9FJ,uCAkGI,OAAIlK,KAAK2K,OACA3K,KAAK2K,OAEV3K,KAAK4J,UACP5J,KAAK2K,OAAS3K,KAAKuJ,MAAMsB,OAAO7K,KAAK4J,UAC9B5J,KAAK2K,SAEd3K,KAAK2K,OAAS3K,KAAKuJ,MAAMsB,OAAO7K,KAAKkK,SAC9BlK,KAAK2K,UA1GhB,yCA+GI,OAAO,IAAItH,EACTrD,KAAK6C,GAAK7C,KAAKiD,OAAOQ,KACtBzD,KAAK8C,GAAK9C,KAAKiD,OAAOO,IACtBxD,KAAKiD,OAAOK,MACZtD,KAAKiD,OAAOM,UAnHlB,gCAwHI,MAAO,CACL+E,MAAOtI,KAAK6C,GAAK7C,KAAKiD,OAAOQ,MAAQzD,KAAKiD,OAAOK,MACjDkF,MAAOxI,KAAK8C,GAAK9C,KAAKiD,OAAOO,KAAOxD,KAAKiD,OAAOM,OAChDkF,KAAMzI,KAAK6C,GAAK7C,KAAKiD,OAAOQ,KAC5BkF,KAAM3I,KAAK8C,GAAK9C,KAAKiD,OAAOO,OA5HlC,6BAgIgBT,GACZ,QAAIA,aAAiB+H,IAGd9K,KAAKiD,OAAO8H,OAAQhI,EAAmBE,UApIlD,+BA0JI,OAAOjD,KAAKiD,OAAQ+H,aA1JxB,KCVaF,EAAb,WAkBE,WAAYvB,EAAeI,EAAcsB,EAAgBC,GAAiB,yBAjBnEzB,QAiBkE,OAhBlEnI,UAgBkE,OAflEoI,mBAekE,OAdlEC,UAckE,OAblEwB,sBAakE,OAZlEnG,WAAsB,GAY4C,KAXlEoG,sBAWkE,OAVlEH,YAUkE,OATlEC,YASkE,OARlEG,kBAQkE,OAPlE7J,WAOkE,OANlEsI,WAA0B,GAMwC,KAJjEP,WAIiE,OAHjE+B,kBAGiE,OAFjEC,kBAEiE,EACvEvL,KAAKuJ,MAAQA,EACbvJ,KAAKyJ,GAAKF,EAAMqB,eAChB5K,KAAK2J,KAAOA,EACZ3J,KAAKiL,OAASA,EACdjL,KAAKkL,OAASA,EAvBlB,uDA2BI,MAAM,cAAN,OAAqBlL,KAAKsB,MAAQ,GAAlC,OA3BJ,uCA+BI,OAAOtB,KAAKuJ,MAAMsB,OAAO7K,KAAKqL,gBA/BlC,iCAmCI,MAAM,GAAN,OAAUrL,KAAKwL,SAAf,YAA2BxL,KAAKiL,QAAU,UAA1C,eAA0DjL,KAAKkL,QAC7D,aApCN,sCAwCI,OAAOlL,KAAKmL,kBAAoBnL,KAAK0E,eAAesG,WAxCxD,oCA4CI,OAAOhL,KAAKoL,kBAAoBpL,KAAK2E,eAAeqG,WA5CxD,uCAgDI,OAAIhL,KAAKsL,aACAtL,KAAKsL,cAEdtL,KAAKsL,aAAetL,KAAKyL,gBAAgBzL,KAAKiL,QACvCjL,KAAKsL,gBApDhB,uCAwDI,OAAItL,KAAKuL,aACAvL,KAAKuL,cAEdvL,KAAKuL,aAAevL,KAAKyL,gBAAgBzL,KAAKkL,QACvClL,KAAKuL,gBA5DhB,qCAgEI,OAAOvL,KAAK0L,iBAAiBC,qBAhEjC,qCAoEI,OAAO3L,KAAK4L,iBAAiBD,qBApEjC,6BAuEgB5I,GACZ,OAAO,IAxEX,8BA6EI,MAAO,KA7EX,yCAiFI,IAAMyC,EAAK,IAAInM,EAAK2G,MAAM6L,WAC1B,OAAO,IAAIxI,EAAOmC,EAAG3C,EAAG2C,EAAG1C,EAAG,EAAG,KAlFrC,gCAuFI,OADa,IAAIzJ,EAAK2G,MACVwE,OAAOiB,QAAO,SAACqG,EAAmBlG,GAC5C,MAAO,CACL0C,KAAMnH,KAAKD,IAAI0E,EAAM/C,EAAGiJ,EAAQxD,MAChCE,KAAMrH,KAAKD,IAAI0E,EAAM9C,EAAGgJ,EAAQtD,MAChCC,KAAMtH,KAAKuB,IAAIkD,EAAM/C,EAAGiJ,EAAQrD,MAChCE,KAAMxH,KAAKuB,IAAIkD,EAAM9C,EAAGgJ,EAAQnD,SAEjCN,KA9FP,sCAiG0BoB,GACtB,IAIIsC,EAJEpB,EAAS3K,KAAKuJ,MAAMsB,OAAOpB,GACjC,QAAe/J,IAAXiL,EACF,MAAM,IAAIzB,EAAW,qCAGvB,GAAIyB,aAAkBrB,EACpByC,EAAcpB,MACT,MAAIA,aAAkBG,GAG3B,MAAM,IAAI5B,EAAW,mCAFrB6C,EAAcpB,EAIhB,OAAOoB,MA9GX,KCXaC,EAAb,WAWE,WAAYzC,EAAeI,EAAmBF,EAAanI,GAAgB,yBAVpEmI,QAUmE,OATnEE,UASmE,OARnErI,UAQmE,OAPnEoI,mBAOmE,OANnEI,gBAMmE,OALnEmC,UAKmE,OAJlE1C,WAIkE,OAHlE2C,kBAGkE,OAFlEC,uBAEkE,EACxEnM,KAAKuJ,MAAQA,EACbvJ,KAAK2J,KAAOA,EACZ3J,KAAKyJ,GAAKA,GAAMF,EAAMqB,eACtB5K,KAAKsB,KAAOA,GAAQ,GACpBtB,KAAK8J,WAAa,GAhBtB,uDAoBI,MAAM,GAAN,OAAU9J,KAAK2J,KAAf,YAAuB3J,KAAKyJ,GAA5B,aAAmCzJ,KAAKsB,KAAxC,OApBJ,sCA+B2C,IAAD,OACtC,OAAItB,KAAKmM,kBACAnM,KAAKmM,mBAEdnM,KAAKmM,kBAAoBnM,KAAKuJ,MAAM6C,cAAc1L,QAChD,SAAA2L,GAAG,OAAIA,EAAIpB,SAAW,EAAKxB,IAAM4C,EAAInB,SAAW,EAAKzB,MAEhDzJ,KAAKmM,qBAtChB,4CAyCiD,IAAD,OAC5C,OAAOnM,KAAKuJ,MAAM6C,cAAc1L,QAAO,SAAA2L,GAAG,OAAIA,EAAIpB,SAAW,EAAKxB,QA1CtE,4CA6CiD,IAAD,OAC5C,OAAOzJ,KAAKuJ,MAAM6C,cAAc1L,QAAO,SAAA2L,GAAG,OAAIA,EAAInB,SAAW,EAAKzB,QA9CtE,iCAkDqB,IAAD,OAChB,OAAIzJ,KAAKkM,aACAlM,KAAKkM,cAEdlM,KAAKkM,aAAelM,KAAKuJ,MAAM+C,SAAS5L,QAAO,SAAA6L,GAAG,OAChDA,EAAIC,WAAWC,MAAK,SAAAC,GAAE,OAAIA,EAAGjD,KAAO,EAAKA,SAEpCzJ,KAAKkM,kBAzDhB,KCbanP,GAAb,WAWE,WAAYwM,GAAgB,yBAVrBE,QAUoB,OATpBnI,UASoB,OARpB2K,UAQoB,OAPpBvC,mBAOoB,OANpBI,gBAMoB,OALpBH,UAKoB,OAJpBgD,mBAIoB,OAHpBC,WAGoB,OAFnBrD,WAEmB,EACzBvJ,KAAKuJ,MAAQA,EACbvJ,KAAKyJ,GAAKzJ,KAAKuJ,MAAMqB,eACrB5K,KAAK2J,KAAO,GACZ3J,KAAK2M,cAAgB,GACrB3M,KAAK4M,MAAQ,GACb5M,KAAK8J,WAAa,GAjBtB,iDAoBcL,GACV,OAAOzJ,KAAKuJ,MAAMsB,OAAOpB,KArB7B,qCAwBoC,IAAD,OAC/B,OAAOzJ,KAAK4M,MACThM,KAAI,SAAAiM,GAAM,OAAI,EAAKC,KAAKD,MACxBnM,QAAO,SAAAqM,GAAS,YAAkBrN,IAAdqN,KACpBnM,KAAI,SAAAkM,GAAI,OAAIA,SA5BnB,KCQaE,GAAb,WAaE,WACEzD,EACAI,EACAsB,EACAC,GACC,yBAjBIzB,QAiBL,OAhBKE,UAgBL,OAfKrI,UAeL,OAdKoI,mBAcL,OAbKI,gBAaL,OAZKmB,YAYL,OAXKC,YAWL,OAVK+B,gBAUL,OATKC,SAAmB,EASxB,KARKC,cAQL,OAPK5D,WAOL,EACAvJ,KAAKuJ,MAAQA,EACbvJ,KAAK2J,KAAOA,EACZ3J,KAAKyJ,GAAKF,EAAMqB,eAChB5K,KAAKiL,OAASA,EACdjL,KAAKkL,OAASA,EACdlL,KAAK8J,WAAa,GAxBtB,4DA4BI,OAAO9J,KAAKuJ,MAAMsB,OAAO7K,KAAKiL,UA5BlC,sCAgCI,OAAOjL,KAAKuJ,MAAMsB,OAAO7K,KAAKkL,UAhClC,iCA+CI,MAAM,IAAN,OAAWlL,KAAKyJ,GAAhB,aAAuBzJ,KAAKsB,MAAQ,GAApC,aAA2CtB,KAAKiL,OAAhD,eAA6DjL,KAAKkL,UA/CtE,iCA0DqB,IAAD,OAChB,OAAOlL,KAAKuJ,MAAM+C,SAAS5L,QAAO,SAAA6L,GAAG,OACnCA,EAAIH,gBAAgBK,MAAK,SAAAJ,GAAG,OAAIA,EAAI5C,KAAO,EAAKA,aA5DtD,KCKa2D,GAAb,WAiBE,WAAY7D,EAAeI,GAAoB,yBAhBxCF,QAgBuC,OAfvCnI,UAeuC,OAdvCoI,mBAcuC,OAbvCC,UAauC,OAZvCG,gBAYuC,OAXvC9K,eAWuC,OAVvCgL,WAUuC,OATvCqD,0BASuC,OARvCC,gBAQuC,OAPvCrD,iBAOuC,OANvCsD,UAMuC,OALtChE,WAKsC,OAJtCiE,mBAIsC,OAHtCC,wBAGsC,OAFtCC,mBAEsC,EAC5C1N,KAAKuJ,MAAQA,EACbvJ,KAAKyJ,GAAKzJ,KAAKuJ,MAAMqB,eACrB5K,KAAK2J,KAAOA,EACZ3J,KAAK8J,WAAa,GAClB9J,KAAKgK,MAAQ,GACbhK,KAAKiK,YAAc,GACnBjK,KAAKuN,KAAL,cAAmBvN,KAAKyJ,GAAxB,QAxBJ,4DAsCI,OANAzJ,KAAKyN,mBAAqB,IAAIpO,IAC5BW,KAAKiK,YACFrJ,KAAI,SAAA+M,GAAI,OAAIA,EAAKC,oBACjBlN,QAAO,SAAAgM,GAAE,YAAWhN,IAAPgN,KACb9L,KAAI,SAAAyL,GAAG,OAAIA,MAETvF,MAAMQ,KAAKtH,KAAKyN,sBAtC3B,iCAoDI,OANAzN,KAAKwN,cAAgB,IAAInO,IACvBW,KAAKgK,MACFpJ,KAAI,SAAAiN,GAAQ,OAAIA,EAASD,oBACzBlN,QAAO,SAAAiK,GAAM,OAAIA,aAAkBqB,KACnCpL,KAAI,SAAA8L,GAAE,OAAIA,MAER5F,MAAMQ,KAAKtH,KAAKwN,cAAcjG,YApDzC,iCAyDI,OAAIvH,KAAK0N,cACA1N,KAAK0N,eAEd1N,KAAK0N,cAAgB1N,KAAKgK,MACvBpJ,KAAI,SAAAiN,GAAQ,OAAIA,EAASD,oBACzBlN,QAAO,SAAAiK,GAAM,OAAIA,aAAkByC,KACnCxM,KAAI,SAAA8L,GAAE,OAAIA,KACN1M,KAAK0N,iBAhEhB,iCAoEI,MAAM,WAAN,OAAkB1N,KAAKyJ,GAAvB,aAA8BzJ,KAAKsB,KAAnC,OApEJ,uCAwEI,YAA0B5B,IAAnBM,KAAKhB,YAxEhB,6CA4EI,QAAuBU,IAAnBM,KAAKhB,UACP,OAAQgB,KAAK2J,MACX,IAAK,qBACH,MAAO,SACT,IAAK,wBACH,MAAO,SACT,QACE,MAAO,QAGb,OAAO3J,KAAKhB,UAAU6B,aAtF1B,4CA0FI,IAAMiN,EAAoC9N,KACvCgK,MAA6BtO,OAAOsE,KAAKiK,aAE5C,GAAI6D,EAAa9M,OAAS,EACxB,MAAO,CACLsH,KAAM,EACNE,KAAM,EACNC,KAAM,EACNE,KAAM,GAIV,IAAMmD,EAAoBgC,EACvBlN,KAAI,SAAAmN,GAAE,OAAIA,EAAGjC,aACbrG,QAAO,SAACuI,EAAsBC,GAC7B,MAAO,CACL3F,KAAMnH,KAAKD,IAAI+M,EAAU3F,KAAM0F,EAAW1F,MAC1CE,KAAMrH,KAAKD,IAAI+M,EAAUzF,KAAMwF,EAAWxF,MAC1CC,KAAMtH,KAAKuB,IAAIuL,EAAUxF,KAAMuF,EAAWvF,MAC1CE,KAAMxH,KAAKuB,IAAIuL,EAAUtF,KAAMqF,EAAWrF,SAE3CN,GAEL,MAAO,CACLC,KAAMwD,EAAQxD,KAAO4F,GACrB1F,KAAMsD,EAAQtD,KAAO0F,GACrBzF,KAAMqD,EAAQrD,KAtHG,GAuHjBE,KAAMmD,EAAQnD,KAvHG,QAEvB,KCCawF,GAAb,WA8BE,aAAe,yBA5BR1E,GAAa,GA4BN,KA1BPnI,KAAe,GA0BR,KAxBPoI,mBAwBO,OAtBPI,gBAsBO,OApBPsE,cAoBO,OAlBP5B,SAAsB,GAkBf,KAhBPJ,cAAgC,GAgBzB,KAdPO,cAAgC,GAczB,KAZP0B,aAA2C,IAAIxP,IAYxC,KARPyP,aAQO,OAPPhC,SAAsB,GAOf,KANPiC,WAA8B,GAMvB,KALPtC,UAKO,OAJPtC,UAIO,OAFN6E,eAEM,EACZxO,KAAKwO,UAAYC,KACjBzO,KAAK8J,WAAa,GAClB9J,KAAK0O,eACL1O,KAAK2J,KAAO,QAlChB,mDAqCgBF,GACZ,QAAW/J,IAAP+J,GAA2B,KAAPA,EAMxB,YAH+B/J,IAA3BM,KAAKwO,UAAU/O,IAAIgK,IACrBzJ,KAAK0O,aAAajF,GAEbzJ,KAAKwO,UAAU/O,IAAIgK,KA5C9B,oCA+CuBA,GACnB,IAAMD,EAAUxJ,KAAK6K,OAAOpB,GAC5B,YAAgB/J,IAAZ8J,OACF,EAEOA,IApDb,yCAyDI,IAAMmF,EAAU3O,KAAK2M,cAAcF,MACjC,SAAAmC,GAAC,SAAKA,GAAgB,aAAXA,EAAEjF,SAEf,GAAIgF,EACF,OAAOA,EAET,GAAkC,IAA9B3O,KAAK2M,cAAc3L,OAAc,CACnC,IAAM6N,EAAM,IAAI9R,GAAaiD,MAC7B6O,EAAIvN,KAAO,WACXuN,EAAIlF,KAAO,WACX3J,KAAK2M,cAAcpM,KAAKsO,GAE1B,OAAO7O,KAAK2M,cAAc3M,KAAK2M,cAAc3L,OAAS,KArE1D,iCAyEI,OAAO8F,MAAMQ,KAAKtH,KAAKwO,UAAUjH,YAzErC,iCA6EI,MAAM,SAAN,OAAgBvH,KAAKyJ,GAArB,aAA4BzJ,KAAKsB,KAAjC,OA7EJ,qCAkFI,OAAwB,WAAhBH,KAAK2N,UAAuBjO,SAAS,MAlFjD,+BA2FkBkO,GACd/O,KAAKwO,UAAUnH,IAAI0H,EAAKtF,GAAIsF,KA5FhC,iCA+FoBA,GAChB/O,KAAKwO,UAAUQ,OAAOD,EAAKtF,MAhG/B,sCAoGI,IAAMwF,EAAO,IAAIpQ,IACjB,OAAOmB,KAAKwM,SAAS/G,OAAOyJ,GAAsBD,KArGtD,mCAwGuBE,GACnB,YAAkBzP,IAAdyP,EACKnP,MAETA,KAAKwO,UAAYxO,KAAKoP,aACfpP,QA7GX,mCAgHwB,IAAD,OAcnB,OAbAA,KAAKwO,UAAYC,KACjBzO,KAAKwO,UAAUnH,IAAIrH,KAAKyJ,GAAIzJ,MAC5BA,KAAKwM,SAASvN,SAAQ,SAACoQ,GACrB,EAAKb,UAAUnH,IAAIgI,EAAI5F,GAAI4F,MAE7BrP,KAAKoM,cAAcnN,SAAQ,SAAAoQ,GACzB,EAAKb,UAAUnH,IAAIgI,EAAI5F,GAAI4F,MAE7BrP,KAAKsM,SAASrN,SAAQ,SAAAsN,GACpB,EAAKiC,UAAUnH,IAAIkF,EAAI9C,GAAI,EAAK6F,eAAe/C,OAGjDvM,KAAKuP,mBAAmBvP,MACjBA,KAAKwO,YA9HhB,qCAiIyBa,GAAwB,IAAD,OAG5C,OAFAA,EAAIrF,MAAM/K,SAAQ,SAAA8P,GAAI,OAAI,EAAKP,UAAUnH,IAAI0H,EAAKtF,GAAIsF,MACtDM,EAAIpF,YAAYhL,SAAQ,SAAAuQ,GAAG,OAAI,EAAKhB,UAAUnH,IAAImI,EAAI/F,GAAI+F,MACnDH,IApIX,yCAuI6BA,GAAyB,IAAD,OAKjD,OAJAA,EAAI1C,cAAc1N,SAAQ,SAAA4P,GACxB,EAAKU,mBAAmBV,GACxB,EAAKL,UAAUnH,IAAIwH,EAAIpF,GAAIoF,MAEtBQ,MA5IX,KAgJA,SAASZ,KACP,OAAO,IAAI5P,IAGb,SAASqQ,GACPO,EACAC,GAEA,OAAOD,EAAMpI,IAAIqI,EAAIA,EAAGtD,iBC5JnB,IAAMuD,GAAb,WAGE,WAAYC,GAAe,yBAFpBA,WAEmB,EACxB5P,KAAK4P,MAAQA,EAJjB,kDAkBI,IARA,IAAMC,EAAUxQ,cAAaW,KAAK4P,MAAMpD,UAClCsD,EAA4BhJ,MAAMQ,KACtCtH,KAAK4P,MAAMpD,SAASuD,QACpBnP,KAAI,SAAA8L,GAAE,MAAK,CAAExC,QAASwC,EAAIsD,MAAO,MAE7BC,EAA4B,GAC5BC,EAAsC,GAErCJ,EAAM9O,OAAS,GAAG,CACvB,IAAM8L,EAAOgD,EAAMK,MACnB,IAAKrD,EACH,MAAM,IAAI5D,EAAW,gCAEvB+G,EAAe1P,KAAKuM,EAAK5C,SACzB4C,EAAK5C,QACFkC,gBACA1L,QAAO,SAAA2L,GAAG,OAAIA,EAAIpB,QAAUoB,EAAInB,UAChCxK,OAAO0P,GAAwBpQ,KAAK4P,MAAMS,oBAC1C3P,OAAO4P,GAA+BtQ,KAAK4P,MAAM7Q,eACjD0G,OAAO8K,GAAqB,CAC3BC,aAAcxQ,KAAK4P,MAAMa,UACzBX,QACA1D,cAAe8D,EACfQ,gBAAiB5D,EACjB+C,YAGN,MAAO,CAACI,EAAgBC,OArC5B,KAiDO,SAASK,GACd7K,EACA2F,GAEA,IAAMsF,EACJtF,EAAauF,kBAAoBlL,EAAIgL,gBAAgBxG,QACjDmB,EAAawF,gBACbxF,EAAauF,gBAgBnB,OAbED,GACAA,aAAwB3E,IACvBtG,EAAImK,QAAQiB,SAASH,KAEtBjL,EAAI0G,cAAc7L,KAAK8K,GACvB3F,EAAImK,QAAUnK,EAAImK,QAAQkB,IAAIJ,GAC1BjL,EAAIgL,gBAAgBV,MAAQtK,EAAI8K,cAClC9K,EAAIoK,MAAMvP,KAAK,CACbyP,MAAOtK,EAAIgL,gBAAgBV,MAAQ,EACnC9F,QAASyG,KAIRjL,EAGF,SAAS0K,GACdC,GAEA,OAAO,SAAChF,GAAD,OACLgF,EAAkBS,SAASzF,EAAa1B,OAKrC,SAAS2G,GACdvR,GAEA,OAAO,SAACsM,GACN,MAAO,CAACA,EAAauF,gBAAiBvF,EAAawF,iBAAiBG,MAMjE,SACLjS,GAEA,OAAO,SAACkS,GACN,OACGA,GAAKA,aAAajF,GAAWjN,EAAa+R,SAASG,EAAEtH,QAAU,GAVhEuH,CAAkBnS,KCvEWM,gBAA5B,IAEM8R,GAAb,WAaE,WAAY5H,GAAe,yBAZpBiD,cAYmB,OAXnBzN,kBAWmB,OAVnB0K,QAUmB,OATnB2H,6BASmB,OARnBC,iBAQmB,OAPnB9H,WAOmB,OANnBjI,UAMmB,OALnBmP,eAKmB,OAJnBrE,mBAImB,OAHnBiE,uBAGmB,OAFnB9Q,mBAEmB,EACxBS,KAAKwM,SAAWnN,gBAChBW,KAAKjB,aAAeM,cAAiB9D,GACrCyE,KAAKyJ,GAAKF,EAAMqB,eAChB5K,KAAKoR,yBAA0B,EAC/BpR,KAAKqR,YAAchS,cAAWjJ,GAC9B4J,KAAKuJ,MAAQA,EACbvJ,KAAKsB,KAAO,YACZtB,KAAKyQ,UAAY,EACjBzQ,KAAKoM,cAAgB/M,gBACrBW,KAAKqQ,kBAAoBhR,cAAsBxD,GAC/CmE,KAAKT,cAAgB3D,EAAciB,MAxBvC,wDA2BqByU,GACjB,OAAOC,OAAOC,OAAO,IAAIL,EAAMnR,KAAKuJ,OAAQvJ,KAAMsR,KA5BtD,8CAoCI,OAAOjS,cACLT,EAA0Ba,IACxBO,KAAKT,eAAiB3D,EAAciB,QACjCtB,KAvCX,+CA2CqD,IAAD,OAChD,OAAO8D,cACLW,KAAKyR,wBAAwB/Q,QAC3B,SAAAgR,GAAE,YAAkDhS,IAA9C,EAAKX,aAAa0N,MAAK,SAAAkF,GAAG,OAAIA,IAAQD,WA9CpD,4BAsEI,IAAME,EAAc,IAAIjC,GAAY3P,MAC9BwJ,EAAUxJ,KAAK6R,sBACfC,EAAa9R,KAAK+R,2BACtBvI,EACAoI,EAAYI,OAOd,OALAxI,EAAQlI,KAAOtB,KAAKsB,KAEpBkI,EAAQxK,UAAYgB,KAAKT,cACzBiK,EAAQQ,MAAQ8H,EAAW,GAC3BtI,EAAQS,YAAc6H,EAAW,GAC1BtI,IAjFX,4CAuFI,IAAIA,EAAUxJ,KAAKuJ,MAAM0I,cAAcjS,KAAKyJ,IAC5C,OAAID,KAGJA,EAAU,IAAI4D,GAAQpN,KAAKuJ,MAAOtT,EAAYic,aACtCzI,GAAKzJ,KAAKyJ,GAClBD,EAAQlI,KAAOtB,KAAKsB,KACpBtB,KAAKuJ,MAAM+C,SAAS/L,KAAKiJ,GACzBxJ,KAAKuJ,MAAM4I,mBAAmBvF,MAAMrM,KAAKiJ,EAAQC,IAC1CD,KAhGX,iDAoGIA,EACA4I,GAC6B,IAAD,OACtB5F,EAAW4F,EAAsB,GACjChG,EAAgBgG,EAAsB,GACtCC,EAAuBjG,EAAc3G,QACzC,SAACC,EAAgB2G,GACf,IAAMpB,EAASoB,EAAIuE,gBACb1F,EAASmB,EAAIwE,gBACnB,QAAenR,IAAXuL,EACF,MAAM,IAAI/B,EAAJ,uBACYmD,EAAI5C,GADhB,mBAC6B4C,EAAIpB,OADjC,uBAIR,QAAevL,IAAXwL,EACF,MAAM,IAAIhC,EAAJ,uBACYmD,EAAI5C,GADhB,mBAC6B4C,EAAInB,OADjC,uBAIR,OAAOxF,EAAIhK,OAAO,CAACuP,EAAmBC,MAExC,IAGIoH,EAA4C9F,EAC/C9Q,OAAO2W,GACP5M,QACC,SAACC,EAA4BgH,GAA7B,OACEhH,EAAI2B,IAAIqF,EAAGjD,GAAI,EAAK8I,YAAY7F,EAAIlD,MACtC,IAAI3K,KAGFoL,EAA4BmC,EAAcxL,KAAI,SAAAyL,GAAG,OACrD,EAAKmG,cAAcnG,EAAKiG,EAAoB9I,MAG9C,MAAO,CAAC1C,MAAMQ,KAAKgL,EAAmB/K,UAAW0C,KAxIrD,kCA6IsByC,EAAalD,GAC/B,IAAMiJ,EAAK,IAAInJ,EAAStJ,KAAKuJ,MAAOC,GAKpC,OAJAiJ,EAAG9I,KAAO,0BACV8I,EAAGxP,OAAS,IAAII,EAAO,IAAK,IRpKD,IACC,IQoK5BoP,EAAGvI,QAAUwC,EAAGjD,GAChBgJ,EAAGjJ,QAAUA,EACNiJ,IAnJX,oCAuJIpH,EACAiH,EACA9I,GAEA,IAAMkC,EAAiB4G,EAAmB7S,IAAI4L,EAAaJ,QACrDW,EAAiB0G,EAAmB7S,IAAI4L,EAAaH,QAC3D,QAAuBxL,IAAnBgM,EACF,MAAM,IAAIxC,EAAJ,8BACmBmC,EAAaJ,OADhC,eAIR,QAAuBvL,IAAnBkM,EACF,MAAM,IAAI1C,EAAJ,8BACmBmC,EAAaH,OADhC,eAIR,IAAMyC,EAAO,IAAI7C,EACf9K,KAAKuJ,MACL,uBACAmC,EAAejC,GACfmC,EAAenC,IAGjB,OADAkE,EAAKtC,aAAeA,EAAa5B,GAC1BkE,MA9KX,KCjCO,SAAS+E,GAAmB3D,EAAezN,GAChD,IAAMqR,EAAO5D,EAAK6D,WAAWC,aAAavR,GAC1C,GAAa,OAATqR,EAGJ,OAAQA,EAAczT,MAGjB,SAAS4T,GAAqB/D,EAAezN,EAAcyR,GAChE,IAAMJ,EAAO5D,EAAK6D,WAAWI,eAAeD,GAAM,KAAMzR,GACxD,GAAa,OAATqR,EAGJ,OAAQA,EAAczT,MAGjB,SAAS+T,GACdlE,EACAzN,GAEA,IAAM4R,EAASR,GAAmB3D,EAAMzN,GACxC,QAAe5B,IAAXwT,EAIJ,OAAO9S,OAAOC,SAAS6S,EAAkB,ICtBpC,IAAMC,GAAb,4DAWUC,YAAc,SAACC,GACrB,OAAO,IAAIzQ,EACT,EAAK0Q,aAAaD,EAAO,UACzB,EAAKC,aAAaD,EAAO,YAd/B,uDACoBtJ,GAChB,IAAMwJ,EAAWzM,MAAMQ,KAAKyC,EAAOwJ,UAAU7S,QAC3C,SAAAqO,GAAI,MAAsB,cAAlBA,EAAKyE,YAEf,YAAiB9T,IAAb6T,EACK,GAEFA,EAAS3S,IAAIZ,KAAKoT,eAR7B,mCAkBuBC,EAAgBI,GACnC,IAAMxT,EAAMyS,GAAmBW,EAAOI,IAAa,IAC7CrL,EAAIhI,OAAOC,SAASJ,EAAK,IAC/B,OAAIG,OAAOsT,MAAMtL,GACR,EAEFA,MAxBX,KCHauL,GAAb,8FACeC,EAAwBC,GACnC,IAAMC,EAAQF,EAAcG,cAC1BF,GAAkB,iBAEpB,GAAc,OAAVC,EAGJ,OAAQA,EAAkBE,kBAAetU,MAR7C,KCIauU,GAAb,WAGE,WAAY1K,GAAgB,IAAD,gCAFpBA,WAEoB,OAcnB2K,mBAAqB,SAACb,GAC5B,IAAMc,EAAe,IAAIpX,GAAa,EAAKwM,OAQ3C,OAPA4K,EAAa1K,GAAKiJ,GAAmBW,EAAO,OAAS,OACrDc,EAAa7S,KAAOoR,GAAmBW,EAAO,QAC9Cc,EAAaxK,KAAO+I,GAAmBW,EAAO,SAAW,GACzDc,EAAavH,MAAQ9F,MAAMQ,KAAK+L,EAAME,UACnC7S,QAAO,SAAAqO,GAAI,MAAsB,YAAlBA,EAAKyE,YACpB5S,KAAI,SAAA8L,GAAE,OAAIA,EAAGkG,WAAWC,aAAa,MAAO3T,SAC/CiV,EAAaxH,cAAgB,EAAKA,cAAc0G,GACzCc,GAtBPnU,KAAKuJ,MAAQA,EAJjB,0DAOuBQ,GACnB,IAAMwJ,EAAsBzM,MAAMQ,KAAKyC,EAAOwJ,UAAU7S,QACtD,SAAAqO,GAAI,MAAsB,WAAlBA,EAAKyE,YAEf,YAAiB9T,IAAb6T,EACK,GAEFA,EAAS3S,IAAIZ,KAAKkU,mBAAoBlU,UAdjD,KCAaoU,GAAb,WAGE,WAAY7K,GAAgB,yBAFrBA,WAEoB,OAcnB8K,cAAgB,SAAC3H,GACvB,IAAMvN,EAAMuT,GAAmBhG,EAAI,OAC7BxN,EAAQwT,GAAmBhG,EAAI,SACrC,QAAYhN,IAARP,EACF,MAAM,IAAI8J,EAAY,2BAExB,OAAO,IAAII,EAASlK,EAAeD,IAnBnCc,KAAKuJ,MAAQA,EAJjB,uDAOoBQ,GAChB,IAAMuK,EAAMxN,MAAMQ,KAAKyC,EAAOwJ,UAAU7S,QACtC,SAAAqO,GAAI,MAAsB,aAAlBA,EAAKyE,YAEf,OAAY,OAARc,EACK,GAEFA,EAAI1T,IAAIZ,KAAKqU,mBAdxB,KCJaE,GAAb,gGACiBX,GACb,IAAMY,EAAY1N,MAAMQ,KAAKsM,EAAcL,UAAU9G,MACnD,SAAAsC,GAAI,MAAsB,YAAlBA,EAAKyE,YAEf,QAAkB9T,IAAd8U,EAGJ,OAAQA,EAAsBR,kBAAetU,MARjD,KCMa+U,GAAb,8FACevK,GACX,IAAMpJ,EAAI,IAAIe,EACRC,EAAgB4Q,GAAmBxI,EAAS,iBAC5CnI,EAAYpC,EAAM+U,KAAKhC,GAAmBxI,EAAS,cACnDlI,EAAYrC,EAAM+U,KAAKhC,GAAmBxI,EAAS,cACnDjI,EAAYtC,EAAM+U,KAAKhC,GAAmBxI,EAAS,cACnD/H,EAAOd,EAAKsT,gBAAgBjC,GAAmBxI,EAAS,SACxDhI,EAAY+Q,GAAgB/I,EAAS,aACrC9H,EAAe6Q,GAAgB/I,EAAS,gBAsB9C,OArBIpI,IACFhB,EAAEgB,cAAgBA,GAEhBC,IACFjB,EAAEiB,UAAYA,GAEZC,IACFlB,EAAEkB,UAAYA,GAEZC,IACFnB,EAAEmB,UAAYA,GAEZE,IACFrB,EAAEqB,KAAOA,GAEPD,IACFpB,EAAEoB,UAAYA,GAEZE,IACFtB,EAAEsB,aAAeA,GAEZtB,MA/BX,KCHM8T,GAAoB,IAAI/V,IAAuC,CACnE,CAAC,SAAKa,GACN,CAAC,IAAK9D,EAAc0C,sBACpB,CAAC,0BAA2B1C,EAAc0B,yBAC1C,CAAC,IAAK1B,EAAc0B,yBACpB,CAAC,IAAK1B,EAAc2C,uBACpB,CAAC,oBAAqB3C,EAAcuB,mBACpC,CAAC,IAAKvB,EAAcuB,mBACpB,CAAC,IAAKvB,EAAcwC,mBACpB,CAAC,+BAAgCxC,EAAcyB,8BAC/C,CAAC,SAAKqC,GACN,CAAC,IAAK9D,EAAcyC,kBACpB,CAAC,UAAWzC,EAAc3D,SAC1B,CAAC,IAAK2D,EAAc3D,SACpB,CAAC,4BAA6B2D,EAAc4B,+BAC5C,CAAC,KAAM5B,EAAc4B,+BACrB,CAAC,wBAAyB5B,EAAcqB,uBACxC,CAAC,KAAMrB,EAAcqB,uBACrB,CAAC,KAAMrB,EAAc6C,sBACrB,CAAC,KAAM7C,EAAc4C,gBACrB,CAAC,UAAW5C,EAAcsB,SAC1B,CAAC,KAAMtB,EAAcsB,SACrB,CAAC,eAAgBtB,EAAcmB,cAC/B,CAAC,KAAMnB,EAAcmB,cACrB,CAAC,sBAAuBnB,EAAc2B,qBACtC,CAAC,KAAM3B,EAAc2B,qBACrB,CAAC,cAAe3B,EAAcjB,aAC9B,CAAC,KAAMiB,EAAcjB,aACrB,CAAC,mBAAoBiB,EAAc6B,kBACnC,CAAC,KAAM7B,EAAc6B,kBACrB,CAAC,KAAM7B,EAAc8B,mBACrB,CAAC,KAAM9B,EAAc+B,YACrB,CAAC,2BAA4B/B,EAAcgC,0BAC3C,CAAC,KAAMhC,EAAcgC,0BACrB,CAAC,aAAchC,EAAclF,YAC7B,CAAC,KAAMkF,EAAclF,YACrB,CAAC,UAAWkF,EAAcoC,SAC1B,CAAC,KAAMpC,EAAcoC,SACrB,CAAC,YAAapC,EAAcqC,WAC5B,CAAC,KAAMrC,EAAcqC,WACrB,CAAC,2BAA4BrC,EAAcsC,8BAC3C,CAAC,KAAMtC,EAAcsC,8BACrB,CAAC,kBAAcwB,GACf,CAAC,sBAAuB9D,EAAckC,qBACtC,CAAC,WAAYlC,EAAcnF,UAC3B,CAAC,gBAAYiJ,GACb,CAAC,WAAY9D,EAAcvF,UAC3B,CAAC,aAAcuF,EAAcpF,YAC7B,CAAC,mBAAoBoF,EAAcwB,oBAGxByX,GAAb,kGACmBC,GACf,IAAMC,EAAerC,GAAmBoC,EAAO,aAC/C,QAAqBpV,IAAjBqV,EAGJ,OAAOH,GAAkBnV,IAAIsV,OANjC,KC7CaC,GAAb,WAQE,WAAYzL,EAAeC,EAAkByL,GAAiB,IAAD,gCAPtD1L,WAOsD,OANtDC,aAMsD,OALtDyL,YAKsD,OAJrDC,yBAIqD,OAHrDC,qBAGqD,OAFrDC,iBAEqD,OAmBrDC,iBAAmB,SAAChC,GAC1B,IAAM1J,EACJmJ,GACEO,EACA,OACA,8CACG,aACDpI,EAASyH,GAAmBW,EAAO,UACnCnI,EAASwH,GAAmBW,EAAO,UACnC5J,EAAKiJ,GAAmBW,EAAO,MACrC,GAAI,CAACpI,EAAQC,GAAQoK,MAAK,SAAAxU,GAAC,YAAUpB,IAANoB,KAC7B,MAAM,IAAImI,EAAJ,qBACUQ,EADV,iBACqBE,EADrB,oBACqCsB,EADrC,sBACyDC,EADzD,6BAIR,IAAM5G,EAAa,IAAIwG,EACrB,EAAKvB,MACLI,EACAsB,EACAC,GAaF,OAXA5G,EAAWmF,GACTiJ,GAAmBW,EAAO,OAAS,EAAK9J,MAAMqB,eAChDtG,EAAWhD,KAAOoR,GAAmBW,EAAO,QAC5C/O,EAAWoF,cAAgB,EAAKwL,oBAAoBhW,MAAMmU,GAC1D/O,EAAWU,WAAa,EAAKmQ,gBAAgBnQ,WAAWqO,GACxD/O,EAAW+G,aAAeqH,GACxBW,EACA,yBAEF/O,EAAW9C,MAAQ,EAAK4T,YAAY5T,MAAM6R,GAC1C,EAAK7J,QAAQS,YAAY1J,KAAK+D,GACvBA,GAlDPtE,KAAKuJ,MAAQA,EACbvJ,KAAKwJ,QAAUA,EACfxJ,KAAKiV,OAASA,EACdjV,KAAKkV,oBAAsB,IAAIvB,GAC/B3T,KAAKmV,gBAAkB,IAAIhC,GAC3BnT,KAAKoV,YAAc,IAAIX,GAd3B,wDAiBqB1K,GACjB,IAAMwJ,EAAWzM,MAAMQ,KAAKyC,EAAOwJ,UAAU7S,QAC3C,SAAAqO,GAAI,MAAsB,qBAAlBA,EAAKyE,YAEf,YAAiB9T,IAAb6T,EACK,GAEFA,EAAS3S,IAAIZ,KAAKqV,sBAxB7B,KCLaE,GAAb,+FACgB3B,GACZ,IAAMlH,EAAK5F,MAAMQ,KAAKsM,EAAcL,UAAU9G,MAC5C,SAAAsC,GAAI,MAAsB,WAAlBA,EAAKyE,YAEf,GAAW,OAAP9G,EAAJ,CAGA,IAAM8I,EAAW9I,EACX7J,EAAIoQ,GAAgBuC,EAAU,KAC9B1S,EAAImQ,GAAgBuC,EAAU,KAC9BlS,EAAQ2P,GAAgBuC,EAAU,SAClCjS,EAAS0P,GAAgBuC,EAAU,UAEzC,QAAc9V,IAAV4D,QAAkC5D,IAAX6D,EACzB,MAAM,IAAI0F,EAAY,qCAExB,OAAO,IAAI5F,EAAOR,EAAGC,EAAGQ,EAAiBC,QAjB7C,KCOakS,GAAb,WAUE,WAAYlM,EAAeC,EAAkByL,GAAiB,IAAD,gCATtD1L,WASsD,OARtDC,aAQsD,OAPtDyL,YAOsD,OALrDC,yBAKqD,OAJrDQ,mBAIqD,OAHrDC,kBAGqD,OAFrDP,iBAEqD,OAsBrDQ,eAAiB,SAACvC,GACxB,IAAMxF,EAAW,IAAIvE,EAAS,EAAKC,MAAO,EAAKC,SAe/C,GAdAqE,EAASpE,GAAKiJ,GAAmBW,EAAO,OAAS,EAAK9J,MAAMqB,eAC5DiD,EAASvM,KAAOoR,GAAmBW,EAAO,QAC1CxF,EAASnE,cAAgB,EAAKwL,oBAAoBhW,MAAMmU,GACxDxF,EAASlE,MACPmJ,GACEO,EACA,OACA,8CACG,IACLwC,QAAQ,aAAc,IAExBhI,EAASrM,MAAQ,EAAK4T,YAAY5T,MAAM6R,GACxCxF,EAASjE,SAAW8I,GAAmBW,EAAO,SAC9CxF,EAAShE,QAAU,EAAK6L,cAAc7L,QAAQwJ,GACR,UAAlCA,EAAMO,cAAeJ,SAAsB,CAC7C,IAAMsC,EAAWzC,EAAMO,cACvB/F,EAAS9D,OAAS2I,GAAmBoD,EAAU,MAEjDjI,EAAS5K,OAAS,EAAK0S,aAAa1S,OAAOoQ,GAAQ4B,OAAO,EAAKA,QAC/DpH,EAAS3D,QAAUwI,GAAmBW,EAAO,oBAC7CxF,EAAS1D,UAAYuI,GAAmBW,EAAO,QAC/C,EAAK7J,QAAQQ,MAAMzJ,KAAKsN,GACxB,EAAKtE,MAAMwM,SAASlI,GACK,IAAImH,GAC3B,EAAKzL,MACL,EAAKC,QACLqE,EAAS5K,QAEMgH,YAAYoJ,GAC7B,IAAM2C,EAAiB,IAAIP,EACzB,EAAKlM,MACL,EAAKC,QACLqE,EAAS5K,QAEX,MAAO,CAAC4K,GAAUnS,OAAOsa,EAAeC,UAAU5C,KAzDlDrT,KAAKuJ,MAAQA,EACbvJ,KAAKwJ,QAAUA,EACfxJ,KAAKiV,OAASA,EACdjV,KAAKkV,oBAAsB,IAAIvB,GAC/B3T,KAAK0V,cAAgB,IAAInB,GACzBvU,KAAK2V,aAAe,IAAIJ,GACxBvV,KAAKoV,YAAc,IAAIX,GAjB3B,sDAoBmB1K,GACf,IAAMwJ,EAAWzM,MAAMQ,KAAKyC,EAAOwJ,UAAU7S,QAC3C,SAAAqO,GAAI,MAAsB,UAAlBA,EAAKyE,YAEf,OAAwB,IAApBD,EAASvS,OACJ,GAEFuS,EACJ3S,IAAIZ,KAAK4V,gBACTnQ,QAAO,SAACC,EAAiBwQ,GAAlB,OAAuCxQ,EAAIhK,OAAOwa,UA7BhE,KCDaC,GAAb,WAME,WAAY5M,GAAgB,yBALrBA,WAKoB,OAJnB2L,yBAImB,OAHnBkB,sBAGmB,OAFnBC,qBAEmB,EACzBrW,KAAKuJ,MAAQA,EACbvJ,KAAKkV,oBAAsB,IAAIvB,GAC/B3T,KAAKoW,iBAAmB,IAAIhC,GAAiB7K,GAC7CvJ,KAAKqW,gBAAkB,IAAIxB,GAV/B,oDAaiBC,EAAgBnL,GAC7B,IAAM4C,EAAM,IAAIa,GAAQpN,KAAKuJ,MAAOI,GACpC4C,EAAI9C,GAAKiJ,GAAmBoC,EAAO,OAAS9U,KAAKuJ,MAAMqB,eACvD2B,EAAIjL,KAAOoR,GAAmBoC,EAAO,QACrCvI,EAAI7C,cAAgB1J,KAAKkV,oBAAoBhW,MAAM4V,GACnDvI,EAAIzC,WAAa9J,KAAKoW,iBAAiBtM,WAAWgL,GAClDvI,EAAIvN,UAAYgB,KAAKqW,gBAAgBrX,UAAU8V,GAC/C,IAAMkB,EAAiB,IAAIP,GAAezV,KAAKuJ,MAAOgD,EAAKxI,KAE3D,OADAwI,EAAIvC,MAAQgM,EAAeC,UAAUnB,GAC9BvI,MAtBX,KCEa+J,GAAb,WAOE,WAAY/M,EAAegN,GAAmB,IAAD,gCANtChN,WAMsC,OALtCgN,SAKsC,OAJrCC,mBAIqC,OAHrCtB,yBAGqC,OAFrCkB,sBAEqC,OAqErC/B,cAAgB,SAAC3H,GACvB,IAAM+J,EAAI/J,EAAGkG,WAAWI,eACtB,4CACA,QAEF,GAAU,OAANyD,EACF,MAAM,IAAIzN,MAAM,8BAElB,IAAM0N,EAAWD,EAAWvX,MAAM2W,QAAQ,aAAc,IACxD,OAAQa,GACN,KAAKvgB,EAAYmB,cACf,EAAKqf,sBAAsBjK,EAAIvW,EAAYmB,eAC3C,MACF,KAAKnB,EAAYoB,sBACf,EAAKof,sBAAsBjK,EAAIvW,EAAYoB,uBAC3C,MACF,KAAKpB,EAAYqB,cACf,EAAKmf,sBAAsBjK,EAAIvW,EAAYqB,eAC3C,MACF,KAAKrB,EAAYsB,iBACf,EAAKkf,sBAAsBjK,EAAIvW,EAAYsB,kBAC3C,MACF,KAAKtB,EAAYuB,oBACf,EAAKif,sBAAsBjK,EAAIvW,EAAYuB,qBAC3C,MACF,KAAKvB,EAAYwB,kBACf,EAAKgf,sBAAsBjK,EAAIvW,EAAYwB,mBAC3C,MACF,KAAKxB,EAAYyB,eACf,EAAK+e,sBAAsBjK,EAAIvW,EAAYyB,gBAC3C,MACF,KAAKzB,EAAY0B,gBACf,EAAK8e,sBAAsBjK,EAAIvW,EAAY0B,iBAC3C,MACF,KAAK1B,EAAY2B,aACf,EAAK6e,sBAAsBjK,EAAIvW,EAAY2B,cAC3C,MACF,KAAK3B,EAAY4B,gBACf,EAAK4e,sBAAsBjK,EAAIvW,EAAY4B,iBAC3C,MACF,KAAK5B,EAAY6B,SACf,EAAK2e,sBAAsBjK,EAAIvW,EAAY6B,UAC3C,MACF,KAAK7B,EAAYkF,SACf,EAAKsb,sBAAsBjK,EAAIvW,EAAYkF,UAC3C,MACF,KAAKlF,EAAY8B,QACf,EAAK0e,sBAAsBjK,EAAIvW,EAAY8B,SAC3C,MACF,KAAK9B,EAAY+B,eACf,EAAKye,sBAAsBjK,EAAIvW,EAAY+B,gBAC3C,MACF,KAAK/B,EAAYgC,yBACf,EAAKwe,sBAAsBjK,EAAIvW,EAAYgC,0BAC3C,MACF,KAAKhC,EAAYiC,qBACf,EAAKue,sBAAsBjK,EAAIvW,EAAYiC,sBAC3C,MACF,KAAKjC,EAAYkC,iBACf,EAAKse,sBAAsBjK,EAAIvW,EAAYkC,kBAC3C,MACF,KAAKlC,EAAYmC,oBACf,EAAKqe,sBAAsBjK,EAAIvW,EAAYmC,qBAC3C,MACF,KAAKnC,EAAYoC,uBACf,EAAKoe,sBAAsBjK,EAAIvW,EAAYoC,wBAC3C,MACF,KAAKpC,EAAYqC,qBACf,EAAKme,sBAAsBjK,EAAIvW,EAAYqC,sBAC3C,MACF,KAAKrC,EAAYsC,mBACf,EAAKke,sBAAsBjK,EAAIvW,EAAYsC,oBAC3C,MACF,KAAKtC,EAAYuC,mBACf,EAAKie,sBAAsBjK,EAAIvW,EAAYuC,oBAC3C,MACF,KAAKvC,EAAYwC,WACf,EAAKge,sBAAsBjK,EAAIvW,EAAYwC,YAC3C,MACF,KAAKxC,EAAYyC,SACf,EAAK+d,sBAAsBjK,EAAIvW,EAAYyC,UAC3C,MACF,KAAKzC,EAAY0C,qBACf,EAAK8d,sBAAsBjK,EAAIvW,EAAY0C,sBAC3C,MACF,KAAK1C,EAAY2C,kBACf,EAAK6d,sBAAsBjK,EAAIvW,EAAY2C,mBAC3C,MACF,KAAK3C,EAAY4C,OACf,EAAK4d,sBAAsBjK,EAAIvW,EAAY4C,QAC3C,MACF,KAAK5C,EAAY6C,uBACf,EAAK2d,sBAAsBjK,EAAIvW,EAAY6C,wBAC3C,MACF,KAAK7C,EAAY8C,wBACf,EAAK0d,sBAAsBjK,EAAIvW,EAAY8C,yBAC3C,MACF,KAAK9C,EAAY+C,sBACf,EAAKyd,sBAAsBjK,EAAIvW,EAAY+C,uBAC3C,MACF,KAAK/C,EAAYgD,QACf,EAAKwd,sBAAsBjK,EAAIvW,EAAYgD,SAC3C,MACF,KAAKhD,EAAYiD,KACf,EAAKud,sBAAsBjK,EAAIvW,EAAYiD,MAC3C,MACF,KAAKjD,EAAYkD,KACf,EAAKsd,sBAAsBjK,EAAIvW,EAAYkD,MAC3C,MACF,KAAKlD,EAAYmD,eACf,EAAKqd,sBAAsBjK,EAAIvW,EAAYmD,gBAC3C,MACF,KAAKnD,EAAYoD,wBACf,EAAKod,sBAAsBjK,EAAIvW,EAAYoD,yBAC3C,MACF,KAAKpD,EAAYqD,gBACf,EAAKmd,sBAAsBjK,EAAIvW,EAAYqD,iBAC3C,MACF,KAAKrD,EAAYsD,mBACf,EAAKkd,sBAAsBjK,EAAIvW,EAAYsD,oBAC3C,MACF,KAAKtD,EAAYuD,sBACf,EAAKid,sBAAsBjK,EAAIvW,EAAYuD,uBAC3C,MACF,KAAKvD,EAAYwD,oBACf,EAAKgd,sBAAsBjK,EAAIvW,EAAYwD,qBAC3C,MACF,KAAKxD,EAAYyD,iBACf,EAAK+c,sBAAsBjK,EAAIvW,EAAYyD,kBAC3C,MACF,KAAKzD,EAAY0D,kBACf,EAAK8c,sBAAsBjK,EAAIvW,EAAY0D,mBAC3C,MACF,KAAK1D,EAAY2D,kBACf,EAAK6c,sBAAsBjK,EAAIvW,EAAY2D,mBAC3C,MACF,KAAK3D,EAAY4D,oBACf,EAAK4c,sBAAsBjK,EAAIvW,EAAY4D,qBAC3C,MACF,KAAK5D,EAAY6D,UACf,EAAK2c,sBAAsBjK,EAAIvW,EAAY6D,WAC3C,MACF,KAAK7D,EAAY8D,SACf,EAAK0c,sBAAsBjK,EAAIvW,EAAY8D,UAC3C,MACF,KAAK9D,EAAY+D,SACf,EAAKyc,sBAAsBjK,EAAIvW,EAAY+D,UAC3C,MACF,KAAK/D,EAAYgE,WACf,EAAKwc,sBAAsBjK,EAAIvW,EAAYgE,YAC3C,MACF,KAAKhE,EAAYiE,WACf,EAAKuc,sBAAsBjK,EAAIvW,EAAYiE,YAC3C,MACF,KAAKjE,EAAYkE,OACf,EAAKsc,sBAAsBjK,EAAIvW,EAAYkE,QAC3C,MACF,KAAKlE,EAAYmE,KACf,EAAKqc,sBAAsBjK,EAAIvW,EAAYmE,MAC3C,MACF,KAAKnE,EAAYoE,QACf,EAAKoc,sBAAsBjK,EAAIvW,EAAYoE,SAC3C,MACF,KAAKpE,EAAYqE,QACf,EAAKmc,sBAAsBjK,EAAIvW,EAAYqE,SAC3C,MACF,KAAKrE,EAAYsE,UACf,EAAKkc,sBAAsBjK,EAAIvW,EAAYsE,WAC3C,MACF,KAAKtE,EAAYuE,YACf,EAAKic,sBAAsBjK,EAAIvW,EAAYuE,aAC3C,MACF,KAAKvE,EAAYwE,YACf,EAAKgc,sBAAsBjK,EAAIvW,EAAYwE,aAC3C,MACF,KAAKxE,EAAYyE,MACf,EAAK+b,sBAAsBjK,EAAIvW,EAAYyE,OAC3C,MACF,KAAKzE,EAAY0E,YACf,EAAK8b,sBAAsBjK,EAAIvW,EAAY0E,aAC3C,MACF,KAAK1E,EAAY2E,IACf,EAAK6b,sBAAsBjK,EAAIvW,EAAY2E,KAC3C,MACF,KAAK3E,EAAY4E,oBACf,EAAK4b,sBAAsBjK,EAAIvW,EAAY4E,qBAC3C,MACF,KAAK5E,EAAY6E,QACf,EAAK2b,sBAAsBjK,EAAIvW,EAAY6E,SAC3C,MACF,KAAK7E,EAAY8E,YACf,EAAK0b,sBAAsBjK,EAAIvW,EAAY8E,aAC3C,MACF,KAAK9E,EAAY+E,YACjB,KAAK/E,EAAYgF,SACjB,KAAKhF,EAAYiF,WACf,IAAMwb,EAAYlK,EAAGkG,WAAWC,aAAa,QACzC+D,GAAiC,OAApBA,EAAU1X,MACzB,EAAKyX,sBAAsBjK,EAAIvW,EAAYiF,YAE3C,EAAKub,sBAAsBjK,EAAIvW,EAAYgF,UAE7C,MACF,KAAKhF,EAAYgB,WACf,EAAKwf,sBAAsBjK,EAAIvW,EAAYgB,YAC3C,MACF,KAAKhB,EAAYiB,eACf,EAAKuf,sBAAsBjK,EAAIvW,EAAYiB,gBAC3C,MACF,KAAKjB,EAAYkB,SACf,EAAKsf,sBAAsBjK,EAAIvW,EAAYkB,UAC3C,MACF,KAAKlB,EAAYmF,SACf,EAAKqb,sBAAsBjK,EAAIvW,EAAYmF,UAC3C,MACF,KAAKE,EAAiBM,YACpB,EAAK+a,2BAA2BnK,EAAIlR,EAAiBM,aACrD,MACF,KAAKN,EAAiBO,YACpB,EAAK8a,2BAA2BnK,EAAIlR,EAAiBO,aACrD,MACF,KAAKP,EAAiBQ,WACpB,EAAK6a,2BAA2BnK,EAAIlR,EAAiBQ,YACrD,MACF,KAAKR,EAAiBS,YACtB,KAAKT,EAAiBU,YACpB,EAAK2a,2BAA2BnK,EAAIlR,EAAiBS,aACrD,MACF,KAAKT,EAAiBW,QACtB,KAAKX,EAAiBY,OACpB,EAAKya,2BAA2BnK,EAAIlR,EAAiBW,SACrD,MACF,KAAKX,EAAiBa,OACpB,EAAKwa,2BAA2BnK,EAAIlR,EAAiBa,QACrD,MACF,KAAKb,EAAiBc,UACpB,EAAKua,2BAA2BnK,EAAIlR,EAAiBc,WACrD,MACF,KAAKd,EAAiBe,WACpB,EAAKsa,2BAA2BnK,EAAIlR,EAAiBe,YACrD,MACF,KAAKf,EAAiBgB,KACpB,EAAKqa,2BAA2BnK,EAAIlR,EAAiBgB,MACrD,MACF,KAAKhB,EAAiBiB,eACtB,KAAKjB,EAAiBkB,eACpB,EAAKma,2BAA2BnK,EAAIlR,EAAiBiB,gBACrD,MACF,KAAKjB,EAAiBmB,YACpB,EAAKka,2BAA2BnK,EAAIlR,EAAiBmB,aACrD,MACF,KAAKnB,EAAiBL,SACpB,EAAK0b,2BAA2BnK,EAAIlR,EAAiBL,UACrD,MACF,KAAKK,EAAiBN,YACpB,EAAK2b,2BAA2BnK,EAAIlR,EAAiBN,aACrD,MACF,KAAKM,EAAiBJ,WACpB,EAAKyb,2BAA2BnK,EAAIlR,EAAiBJ,YACrD,MACF,KAAKnF,EAAY6gB,sBACf,EAAKC,sBAAsBrK,EAAIzW,EAAY6gB,uBAC3C,MACF,KAAK7gB,EAAY+gB,YACf,EAAKD,sBAAsBrK,EAAIzW,EAAY+gB,aAC3C,MACF,QACE,MAAM,IAAIhO,MAAJ,kCAAqC0N,MA/U/C1W,KAAKuJ,MAAQA,EACbvJ,KAAKuW,IAAMA,EACXvW,KAAKwW,cAAgB,IAAIL,GAAc5M,GACvCvJ,KAAKkV,oBAAsB,IAAIvB,GAC/B3T,KAAKoW,iBAAmB,IAAIhC,GAAiB7K,GAZjD,uDAgBI,IAAM+K,EAAMtU,KAAKuW,IAAIU,iBAAiB,WAC1B,OAAR3C,GAGJA,EAAIrV,QAAQe,KAAKqU,iBApBrB,4CAuBgC3H,EAAa/C,GACzC,IAAMuN,EAAU,IAAIC,EAAanX,KAAKuJ,MAAOI,GAC7CuN,EAAQzN,GAAKiJ,GAAmBhG,EAAI,OAAS,GAC7CwK,EAAQ5V,KAAOoR,GAAmBhG,EAAI,SAAW,GACjDwK,EAAQxN,cAAgB1J,KAAKkV,oBAAoBhW,MAAMwN,GACvDwK,EAAQpN,WAAa9J,KAAKoW,iBAAiBtM,WAAW4C,GACtD1M,KAAKuJ,MAAMiD,SAASjM,KAAK2W,KA7B7B,iDAgCqCxK,EAAa/C,GAC9C,IAAMsB,EAASyH,GAAmBhG,EAAI,UAChCxB,EAASwH,GAAmBhG,EAAI,UACtC,QAAehN,IAAXuL,EACF,MAAM,IAAIhC,EAAY,iCAExB,QAAevJ,IAAXwL,EACF,MAAM,IAAIjC,EAAY,iCAExB,IAAMoC,EAAe,IAAI2B,GAAahN,KAAKuJ,MAAOI,EAAMsB,EAAQC,GAChEG,EAAa5B,GAAKiJ,GAAmBhG,EAAI,OAAS,GAClDrB,EAAa/J,KAAOoR,GAAmBhG,EAAI,SAAW,GACtDrB,EAAa3B,cAAgB1J,KAAKkV,oBAAoBhW,MAAMwN,GAC5DrB,EAAavB,WAAa9J,KAAKoW,iBAAiBtM,WAAW4C,GAC3DrB,EAAa8B,SAAWuF,GAAmBhG,EAAI,YAC/CrB,EAAa4B,WAAajN,KAAKoX,gBAAgB1K,GAC/C1M,KAAKuJ,MAAM6C,cAAc7L,KAAK8K,KAhDlC,yCAmD6BpL,GACzB,OAAQA,GACN,IAAK,IACH,OAAOjK,EAAWqhB,KACpB,IAAK,IACH,OAAOrhB,EAAWshB,MACpB,IAAK,IACH,OAAOthB,EAAWuhB,UACpB,QACE,OAAOvhB,EAAWqG,UA5D1B,sCA+D0BqQ,GACtB,IAAM8K,EAAgB9E,GAAmBhG,EAAI,cAC7C,YAAsBhN,IAAlB8X,EACKxhB,EAAWqG,OAGb2D,KAAKyX,mBAAmBD,KArEnC,4CAwEgC9K,EAAa/C,GACzC3J,KAAKuJ,MAAM+C,SAAS/L,KAAKP,KAAKwW,cAAchN,QAAQkD,EAAI/C,QAzE5D,KCJa+N,GAAb,8FACenB,GACX,IAAMhN,EAAQvJ,KAAK2X,WAAWpB,GAC9B,OAAOvW,KAAK4X,cAAcrO,KAH9B,iCAMqBgN,GACjB,IAAMhN,EAAQ,IAAI4E,GACZ0J,EAAatB,EAAIuB,uBACrB,yCACA,SAEF,GAA0B,IAAtBD,EAAW7W,OACb,MAAM,IAAIiI,EAAY,4CAExB,IAAM8O,EAAYF,EAAW,GAQ7B,OAPAtO,EAAME,GAAKiJ,GAAmBqF,EAAW,OAASxO,EAAMqB,eACxDrB,EAAMjI,KAAOoR,GAAmBqF,EAAW,SAAW,kBACtDxO,EAAMG,eACJ,IAAIiK,IAAsBzU,MAAM6Y,EAAW,YAAc,GAC3DxO,EAAMoD,cAAgB,IAAIsH,GAAa1K,GAAOoD,cAAcoL,GACnC,IAAIzB,GAAiB/M,EAAOgN,GACpC/J,WACVjD,IAvBX,oCA0BwBA,GAAe,IAAD,EAC5ByO,EAASzO,EAAM+C,SAAS1L,KAAI,SAAAqX,GAAC,OAAIA,EAAEhO,eAQzC,OAPkC,MAAInD,OAAoBpL,OAAxB,oBAAkCsc,IACxD/Y,SAAQ,SAAAqF,GAClBA,EAAWU,WAAW/F,SAAQ,SAAAyH,GAC5BA,EAAU7D,GAAKyB,EAAW4T,gBAAgBrV,EAC1C6D,EAAU5D,GAAKwB,EAAW4T,gBAAgBpV,QAGvCyG,MAnCX,K,oBCcqB4O,I,kBAInB,WAAY7G,GAAgB,IAAD,8BACzB,4CAAMA,KACD8G,MAAQ,CACX7K,KAAM,IAAIlU,EAAK,EAAKiY,MAAMhN,WAAY,EAAKgN,MAAM/M,YACjD+G,aAAc,EAAKgG,MAAMhN,WAAWoH,iBACpCH,aAAc,EAAK+F,MAAMhN,WAAWsH,kBALb,E,sEAYzB,YAC8BlM,IAA5BM,KAAKoY,MAAM9M,mBACiB5L,IAA5BM,KAAKoY,MAAM7M,cACXvL,KAAKoY,MAAM7M,aAAaR,OAAO/K,KAAKoY,MAAM9M,cAEnC,KAGP,oBAAOtL,KAAKqY,aACV,uBAAUrY,KAAKsY,YACb,6BAAQtY,KAAKsR,MAAMhN,WAAWoF,gBAE/B1J,KAAKuY,oBACLvY,KAAKwY,c,yCAKcC,GAEtBzY,KAAKsR,MAAMoH,QAAUD,EAAUC,OAC/B1Y,KAAKsR,MAAMqH,QAAUF,EAAUE,OAC/B3Y,KAAKsR,MAAMsH,MAAQH,EAAUG,KAC7B5Y,KAAKsR,MAAMuH,MAAQJ,EAAUI,KAC7B7Y,KAAKsR,MAAM/M,aAAekU,EAAUlU,YAEpCvE,KAAK8Y,SAAS,CACZvL,KAAM,IAAIlU,EAAK2G,KAAKsR,MAAMhN,WAAYtE,KAAKsR,MAAM/M,gB,0CAMrD,GAAKvE,KAAKsR,MAAMyH,SAAhB,CAGA,IAAMC,EAAQhZ,KAAKsY,YAEnB,OADAU,EAAMC,UAAY,uCACX,uBAAUD,M,mCAIjB,IAAMA,EAAqC,CAAEvP,GAAIzJ,KAAKsR,MAAMhN,WAAWmF,IAOvE,OANIzJ,KAAKsR,MAAM4H,YACbF,EAAMG,QAAUnZ,KAAKsR,MAAM4H,UAAUE,KACnCpZ,KACAA,KAAKsR,MAAMhN,WAAWsJ,mBAGnBoL,I,iCAIP,IAAM3N,EAAerL,KAAKsR,MAAMhN,WAAWsJ,iBACrCtM,EAAO+J,EAAeA,EAAa/J,UAAO5B,EAChD,QAAaA,IAAT4B,GAAsC,IAAhBA,EAAKN,OAA/B,CAGA,IAAMwE,EAAKxF,KAAKoY,MAAM7K,KAAK3H,MAAM5F,KAAKqZ,iBACtC,OACE,wBACEJ,UAAU,8BACVpW,EAAG2C,EAAG3C,EACNC,EAAG0C,EAAG1C,EACNwW,WAAW,SACX9X,MAAOxB,KAAKuZ,aAEXjY,M,kCAML,IAAME,EAAQxB,KAAKsR,MAAMhN,WAAW9C,MACpC,QAAc9B,IAAV8B,EACF,MAAO,GAET,IAAMgY,EAAgC,GAOtC,OANIhY,EAAMQ,YACRwX,EAASC,OAASjY,EAAMQ,UAAU0X,UAEhClY,EAAMU,YACRsX,EAASG,YAAcnY,EAAMU,WAExBsX,I,kCAIP,IAAMhY,EAAQxB,KAAKsR,MAAMhN,WAAW9C,MACpC,QAAc9B,IAAV8B,EACF,MAAO,GAET,IAAMgY,EAAgC,GAgBtC,OAfIhY,EAAMS,YACRuX,EAASI,KAAOpY,EAAMS,UAAUyX,SAChCF,EAASK,MAAQrY,EAAMS,UAAUyX,UAE/BlY,EAAMW,OACJX,EAAMW,KAAKb,OACbkY,EAASM,WAAatY,EAAMW,KAAKb,MAE/BE,EAAMW,KAAKZ,OACbiY,EAASO,SAAWvY,EAAMW,KAAKZ,OAG/BC,EAAMM,gBACR0X,EAASQ,UAAYxY,EAAMM,eAEtB0X,I,sCAML,MAAO,K,kCAcT,MAAO,CACLP,UAAWjZ,KAAKia,YAChBhC,EAAGjY,KAAKoY,MAAM7K,KAAK0K,IACnBxO,GAAIzJ,KAAKyJ,KACTjI,MAAOxB,KAAKka,e,2BAKd,IAAM7N,EAAMrM,KAAKsR,MAAMhN,WAAWsJ,iBAClC,OAAIvB,EACKA,EAAI5C,GAENzJ,KAAKsR,MAAMhN,WAAWmF,K,kCAK7B,IAAM4C,EAAMrM,KAAKsR,MAAMhN,WAAWsJ,iBAC5BjE,EAAO0C,EAAMA,EAAI1C,KAAO,UAC9B,MACE,CAAC,YAAa3J,KAAKma,YAAYxQ,IAAO1I,KAAK,KAC3C,4B,kCAIgBhB,GAClB,OAAOA,EACJ4V,QAAQ,KAAM,KACdA,QAAQ,eAAgB,IACxBA,QAAQ,uBAAwB,SAChCA,QAAQ,mBAAoB,SAC5BuE,kB,GAhL0CC,kBCd5BC,G,iLAEjB,IAAMC,EAA8B,CAClCX,KAAM,OACNH,OAAQ,UACRe,cAAe,OACfC,eAAgB,QAChBd,YAAa,GAETe,EAA8B,CAClCd,KAAM,OACNH,OAAQ,UACRe,cAAe,QACfC,eAAgB,QAChBd,YAAa,GAETgB,EAA8B,CAClCf,KAAM,OACNH,OAAQ,WACRE,YAAa,IAGf,OACE,uBACEV,UAAU,gBACV3K,QAAQ,MAGRsM,oBAAoB,OACpBC,WAAW,WAEX,6BAAQ7a,KAAKsR,MAAMwJ,aACnB,4BACE,kCACErR,GAAG,4BACHsR,cAAc,iBACdC,aAAa,UACbC,GAAG,IACHC,GAAG,IACHC,GAAG,IACHC,GAAG,KAEH,wBAAMnG,OAAO,KAAKoG,UAAU,UAC5B,wBAAMpG,OAAO,OAAOoG,UAAU,WAEhC,0BACE5R,GAAG,2BACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACE9Z,MAAO,CACLoY,KAAM,OACNH,OAAQ,UACRgB,eAAgB,QAChBd,YAAa,GAEf1B,EAAE,kIACFsD,UAAU,6EAEZ,wBACE/Z,MAAO+Y,EACPtC,EAAE,8CAEJ,wBAAMzW,MAAO+Y,EAAQtC,EAAE,4CACvB,wBAAMzW,MAAO+Y,EAAQtC,EAAE,6CAEzB,0BACExO,GAAG,uCACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACE9Z,MAAOkZ,EACPzC,EAAE,kEAEJ,wBAAMzW,MAAO+Y,EAAQtC,EAAE,uCACvB,wBAAMA,EAAE,qCAAqCzW,MAAO+Y,IACpD,wBACEtC,EAAE,+DACFzW,MAAOkZ,KAGX,0BACEjR,GAAG,2BACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACE9Z,MAAO,CACLoY,KAAM,OACNH,OAAQ,UACRgB,eAAgB,QAChBd,YAAa,GAEf1B,EAAE,kKAGN,0BACExO,GAAG,4BACHwP,UAAU,kBACVqC,QAAQ,aAER,qBAAGC,UAAU,mBACX,0BAAQC,GAAG,IAAIC,GAAG,OAAO7b,EAAE,WAAW4B,MAAOmZ,IAC7C,0BAAQa,GAAG,OAAOC,GAAG,OAAO7b,EAAE,YAAY4B,MAAOmZ,IACjD,wBACE1C,EAAE,mmBACFzW,MAAO,CACLoY,KAAM,OACNH,OAAQ,UACRgB,eAAgB,QAChBd,YAAa,MAGjB,wBACEnY,MAAO,CACLoY,KAAM,OACNH,OAAQ,UACRgB,eAAgB,QAChBd,YAAa,IAEf1B,EAAE,onBAIR,0BACExO,GAAG,2BACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACE9Z,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,UAAWE,YAAa,IACvDrW,MAAM,MACNC,OAAO,MACPV,EAAE,KACFC,EAAE,IACF4Y,GAAG,MACHC,GAAG,QAEL,wBACEna,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,UAAWE,YAAa,IACvDrW,MAAM,KACNC,OAAO,IACPV,EAAE,IACFC,EAAE,IACF4Y,GAAG,QAEL,wBACEla,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,UAAWE,YAAa,GACvD1B,EAAE,+CAGN,0BACExO,GAAG,0BACHwP,UAAU,kBACVqC,QAAQ,aAER,0BACE9Z,MAAO,CACLoY,KAAM,OACNH,OAAQ,UACRe,cAAe,QACfC,eAAgB,QAChBd,YAAa,IAEf6B,GAAG,YACHC,GAAG,YACH7b,EAAE,aAEJ,0BACE4B,MAAO,CACLoY,KAAM,OACNH,OAAQ,UACRe,cAAe,QACfC,eAAgB,QAChBd,YAAa,IAEf6B,GAAG,YACHC,GAAG,YACH7b,EAAE,cAEJ,0BACE4B,MAAO,CACLoY,KAAM,OACNH,OAAQ,UACRe,cAAe,QACfC,eAAgB,QAChBd,YAAa,IAEf6B,GAAG,YACHC,GAAG,YACH7b,EAAE,cAEJ,wBACE4B,MAAO,CACLoY,KAAM,UACNH,OAAQ,UACRe,cAAe,OACfC,eAAgB,QAChBd,YAAa,IAEf1B,EAAE,oEAEJ,wBACEzW,MAAO,CACLoY,KAAM,OACNH,OAAQ,UACRe,cAAe,QACfC,eAAgB,QAChBd,YAAa,KAEf1B,EAAE,8CAEJ,wBACEzW,MAAO,CACLoY,KAAM,OACNH,OAAQ,UACRe,cAAe,QACfC,eAAgB,QAChBd,YAAa,IAEf1B,EAAE,8CAEJ,wBACEzW,MAAO,CACLoY,KAAM,OACNH,OAAQ,UACRe,cAAe,QACfC,eAAgB,QAChBd,YAAa,IAEf1B,EAAE,+CAGN,0BACExO,GAAG,mCACHwP,UAAU,kBACVqC,QAAQ,aAER,0BACE9Z,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,UAAWE,YAAa,GAC1D6B,GAAG,OACHC,GAAG,IACH7b,EAAE,MAEJ,0BACE4B,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,UAAWE,YAAa,GACvD6B,GAAG,OACHC,GAAG,IACH7b,EAAE,QAEJ,0BACE4B,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,UAAWE,YAAa,GACvD6B,GAAG,OACHC,GAAG,IACH7b,EAAE,QAEJ,wBACE4B,MAAO,CACLoY,KAAM,UACNH,OAAQ,UACRe,cAAe,OACfC,eAAgB,QAChBd,YAAa,GAEf1B,EAAE,ySAGN,0BACExO,GAAG,6BACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACEzY,EAAE,IACFC,EAAE,OACFQ,MAAM,IACNC,OAAO,IACP/B,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,aAEjC,wBACE5W,EAAE,IACFC,EAAE,OACFQ,MAAM,IACNC,OAAO,IACP/B,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,aAEjC,wBACE5W,EAAE,KACFC,EAAE,OACFQ,MAAM,IACNC,OAAO,IACP/B,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,aAEjC,wBACE5W,EAAE,IACFC,EAAE,MACFQ,MAAM,IACNC,OAAO,IACP/B,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,aAEjC,wBACE5W,EAAE,KACFC,EAAE,MACFQ,MAAM,IACNC,OAAO,IACP/B,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,aAEjC,wBACE5W,EAAE,KACFC,EAAE,MACFQ,MAAM,IACNC,OAAO,IACP/B,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,cAGnC,0BACEhQ,GAAG,0CACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACEzY,EAAE,IACFC,EAAE,MACFQ,MAAM,IACNC,OAAO,IACP/B,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,aAEjC,wBACE5W,EAAE,IACFC,EAAE,MACFQ,MAAM,MACNC,OAAO,MACP/B,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,aAEpC,wBAAMxB,EAAE,WAAWzW,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,aAClD,wBAAMxB,EAAE,WAAWzW,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,aAClD,wBACE5W,EAAE,KACFC,EAAE,MACFQ,MAAM,IACNC,OAAO,IACP/B,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,aAEjC,wBAAMxB,EAAE,aAAazW,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,aACpD,wBACE5W,EAAE,IACFC,EAAE,OACFQ,MAAM,IACNC,OAAO,IACP/B,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,aAEjC,wBACE5W,EAAE,IACFC,EAAE,OACFQ,MAAM,MACNC,OAAO,MACP/B,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,aAEpC,wBAAMxB,EAAE,cAAczW,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,aACrD,wBAAMxB,EAAE,cAAczW,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,cAEvD,0BACEhQ,GAAG,wBACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACErD,EAAE,wFACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,6BACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACErD,EAAE,mDACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,gCACHwP,UAAU,kBACVqC,QAAQ,YACRV,oBAAoB,iBAEpB,wBACE3C,EAAE,sGACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,qCACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACErD,EAAE,kGACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,6BACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACErD,EAAE,2CACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,yBACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACEzY,EAAE,IACFC,EAAE,IACFQ,MAAM,KACNC,OAAO,KACPoY,GAAG,IACHD,GAAG,IACHla,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,aAEpC,wBACExB,EAAE,gCACFwB,OAAO,QACPjY,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,yBACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACErD,EAAE,0IACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,wBACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACErD,EAAE,qDACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,2BACHwP,UAAU,kBACVqC,QAAQ,YACRV,oBAAoB,iBAEpB,wBACE3C,EAAE,4CACFzW,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,cAGnC,0BACEhQ,GAAG,sBACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACErD,EAAE,gFACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,uBACHwP,UAAU,kBACVqC,QAAQ,aAER,0BACEE,GAAG,KACHC,GAAG,IACH7b,EAAE,IACF4B,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,aAEpC,0BACE+B,GAAG,KACHC,GAAG,IACH7b,EAAE,MACF4B,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,aAEpC,0BACE+B,GAAG,KACHC,GAAG,IACH7b,EAAE,IACF4B,MAAO,CAAEoY,KAAM,QAASH,OAAQ,cAGpC,0BACEhQ,GAAG,8BACHwP,UAAU,kBACVqC,QAAQ,YACRV,oBAAoB,iBAEpB,wBACE3C,EAAE,6BACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,aAEpC,wBACExB,EAAE,6BACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,4BACHwP,UAAU,kBACVqC,QAAQ,YACRV,oBAAoB,iBAEpB,wBACE3C,EAAE,kDACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,2BACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACErD,EAAE,uCACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,0BACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACErD,EAAE,6PACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,gCACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACErD,EAAE,6CACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,aAEpC,wBACE5W,EAAE,IACFC,EAAE,IACFQ,MAAM,IACNC,OAAO,IACP/B,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,aAEpC,wBACE5W,EAAE,IACFC,EAAE,KACFQ,MAAM,IACNC,OAAO,IACP/B,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,uBACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACErD,EAAE,0EACFzW,MAAO,CACLoY,KAAM,OACNH,OAAQ,UACRgB,eAAgB,YAItB,0BACEhR,GAAG,0BACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACErD,EAAE,6EACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,4BACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACErD,EAAE,yIACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,0BACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACErD,EAAE,2CACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,8BACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACErD,EAAE,6BACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,uBACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACErD,EAAE,oFACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,0BACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACEzY,EAAE,IACFC,EAAE,IACFQ,MAAM,KACNC,OAAO,KACPoY,GAAG,IACHD,GAAG,IACHla,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,kCACHwP,UAAU,kBACVqC,QAAQ,aAER,wBACErD,EAAE,6FACFzW,MAAO,CAAEoY,KAAM,UAAWH,OAAQ,cAGtC,0BACEhQ,GAAG,uBACH6R,QAAQ,YACRM,KAAK,IACLC,KAAK,IACLC,YAAY,cACZC,YAAY,KACZC,aAAa,MAEb,0BAAQR,GAAG,IAAIC,GAAG,IAAI7b,EAAE,IAAIga,KAAK,QAAQH,OAAO,WAElD,0BACEhQ,GAAG,0BACH6R,QAAQ,YACRM,KAAK,IACLC,KAAK,IACLC,YAAY,cACZC,YAAY,IACZC,aAAa,IACbC,OAAO,QAEP,wBACEhE,EAAE,oBACF2B,KAAK,OACLH,OAAO,QACPjY,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,YAGnC,0BACEhQ,GAAG,uBACH6R,QAAQ,YACRM,KAAK,IACLC,KAAK,IACLC,YAAY,cACZC,YAAY,IACZC,aAAa,IACbC,OAAO,OACPxC,OAAO,QACPG,KAAK,QAEL,wBAAM3B,EAAE,oBAAoB2B,KAAK,OAAOH,OAAO,WAEjD,0BACEhQ,GAAG,yBACH6R,QAAQ,YACRM,KAAK,IACLC,KAAK,IACLC,YAAY,cACZC,YAAY,KACZC,aAAa,KACbC,OAAO,QAEP,2BAASzX,OAAO,cAAcoV,KAAK,QAAQH,OAAO,WAEpD,0BACEhQ,GAAG,yBACH6R,QAAQ,YACRM,KAAK,IACLC,KAAK,IACLC,YAAY,cACZC,YAAY,KACZC,aAAa,KACbC,OAAO,QAEP,2BAASzX,OAAO,cAAcoV,KAAK,QAAQH,OAAO,WAEpD,0BACEhQ,GAAG,2BACH6R,QAAQ,YACRM,KAAK,IACLC,KAAK,IACLC,YAAY,cACZC,YAAY,KACZC,aAAa,KACbC,OAAO,QAEP,2BAASzX,OAAO,sBAAsBoV,KAAK,QAAQH,OAAO,WAE5D,0BACEhQ,GAAG,2BACH6R,QAAQ,YACRM,KAAK,IACLC,KAAK,KACLC,YAAY,cACZC,YAAY,KACZC,aAAa,KACbC,OAAO,QAEP,2BACEzX,OAAO,0CACPoV,KAAK,QACLH,OAAO,YAIZzZ,KAAKsR,MAAMiC,c,GAjvBsB8G,iB,iBCarB6B,G,YACnB,WAAY5K,GAAgB,IAAD,8BACzB,4CAAMA,KACD8G,MAAQ,CACX+D,MAAO,EAAKA,SAHW,E,sEAQzB,OAAO,gCAAGnc,KAAKoc,Y,8BAIf,IAAM9Y,EAAQtD,KAAKqc,UAAUrc,KAAKsR,MAAMgL,MAClCC,EAAevc,KAAKuc,eAC1B,GAAIjZ,GAASiZ,EACX,MAAO,CACL,CAAED,KAAMtc,KAAKsR,MAAMgL,KAAME,SAAUD,EAAcE,UAAWnZ,IAGhE,IAAMoZ,EAAQ1c,KAAKsR,MAAMgL,KAAK3a,MAAM,KACpC,GAAqB,IAAjB+a,EAAM1b,OAER,MAAO,CAAC,CAAEsb,KAAMI,EAAM,GAAIF,SAAUD,EAAcE,UAAWnZ,IAG7D,IADA,IAAM6Y,EAAiB,GAChBO,EAAM1b,OAAS,GAAG,CAGvB,IAFA,IAAI2b,EAAOD,EAAMxV,QACb0V,EAAgB,EAElBF,EAAM1b,OAAS,GACfhB,KAAKqc,UAAL,UAAkBM,EAAlB,YAA0BD,EAAM,KAAQH,GAExCI,EAAI,UAAMA,EAAN,YAAcD,EAAMxV,SACxB0V,EAAgB5c,KAAKqc,UAAUM,GAEjCR,EAAM5b,KAAK,CACTkc,UAAWG,EACXJ,SAAUD,EACVD,KAAMK,IAERA,EAAO,GAET,OAAOR,I,gCAIOlc,GAChB,IAAM4c,EAAMC,SAASC,gBAAgB,6BAA8B,OAC7DC,EAASH,EAAII,cACnB,IAAKD,EACH,OAAO,EAET,IAAMV,EAAuBU,EAAOD,gBAClC,6BACA,QAEFT,EAAKY,aAAa,IAAK,KACvBZ,EAAKY,aAAa,IAAK,KACvBZ,EAAKa,mBAAmB,aAAcld,GACtC4c,EAAIO,sBAAsB,aAAcd,GACxC,IAAMe,EAAOP,SAAS/I,cAAc,QACpC,GAAIsJ,EAAM,CACRA,EAAKD,sBAAsB,YAAaP,GACxC,IAAMS,EAAOhB,EAAKiB,UAElB,OADAF,EAAKG,YAAYX,GACVS,EAAKha,MAGd,OAAO,I,qCAG6B,wDACpC,OAAItD,KAAKsR,MAAMmM,aAAezd,KAAKsR,MAAMmM,YAAYna,MAAQ,EACpDtD,KAAKsR,MAAMrO,OAAOK,OAAStD,KAAKsR,MAAMmM,YAAYna,MAAQ,GAE1DtD,KAAKsR,MAAMrO,OAAOK,Q,8BAIG,IAAlByD,EAAiB,uDAAX,EAClB,QAA0BrH,IAAtBM,KAAKsR,MAAMrO,OACb,OAAO,EAET,IAAMya,EAAa1d,KAAKsR,MAAMrO,OAC9B,OAAQjD,KAAKsR,MAAM9P,MAAM8X,YACvB,IAAK,QACH,OAAOoE,EAAWja,KACpB,IAAK,MACH,OAAIsD,EAAM,EACD2W,EAAWha,MAEXga,EAAWha,MAAQ1D,KAAKsR,MAAMmM,YAAYna,MAErD,QACE,OAAIyD,EAAM,EACD2W,EAAW1S,SAASnI,EAEpB6a,EAAW1S,SAASnI,EAAI7C,KAAKsR,MAAMmM,YAAYna,MAAQ,K,+BAKpD,IAAD,OACXyD,EAAM,EACV,OAAO/G,KAAKoY,MAAM+D,MAAMvb,KAAI,SAAA+b,GAAI,OAC9B,yBACE9Z,EAAG,EAAK8a,MAAM5W,GACd6W,GAAG,QACH3E,UAAU,cACVzX,MAAO,EAAK8P,MAAM9P,MAClBrC,MAAO4H,GAEN4V,EAAKL,a,GAjHwBjC,iBCkBjBwD,G,YACnB,WAAYvM,GAAgB,IAAD,sBAEzB,IAAIgI,EAAiC,SACrC,QAFA,4CAAMhI,KAEOA,MAAM0I,WACjB,IAAK,OACHV,EAAa,QACb,MACF,IAAK,QACHA,EAAa,MARQ,OAWzB,EAAKlB,MAAQ,CACX0F,WAAY,GACZxE,cAbuB,E,sEAkBzB,GAAKtZ,KAAKsR,MAAMyM,OAAqC,IAA5B/d,KAAKsR,MAAMyM,MAAM/c,OAA1C,CAGA,IAAMgd,EAAKhe,KAAKsR,MAAMoM,WAChBO,EAAU,UAAMje,KAAKsR,MAAM+B,MAAM5J,GAAvB,cAChB,OACE,gCACE,4BAAUA,GAAIwU,GACZ,wBAAMhG,EAAGjY,KAAKke,eAEhB,wBACEC,SAAQ,eAAUF,EAAV,KACRpb,EAAG7C,KAAK2d,QACR7a,EAAGkb,EAAGlb,EACNtB,MAAOxB,KAAKuZ,aAEZ,gBAAC,GAAD,CACE+C,KAAMtc,KAAKsR,MAAMyM,MACjB9a,OAAQjD,KAAKsR,MAAMoM,WACnBD,YAAazd,KAAKsR,MAAMmM,YACxBjc,MAAOxB,KAAKuZ,UAAUvZ,KAAKoY,MAAMkB,mB,kCAQzC,IAAM0E,EAAKhe,KAAKsR,MAAMoM,WACtB,GACE1d,KAAKsR,MAAMmM,aACXzd,KAAKsR,MAAMmM,YAAYla,OAAS,EAAIya,EAAGza,OACvC,CACA,IAAM6a,EAAKpe,KAAKsR,MAAMmM,YAChBY,EAAmBD,EAAG7a,OAAS,EACrC,MAAO,CACL,IACAya,EAAGva,KACHua,EAAGxa,IACH,IACAwa,EAAG1a,MAAQ8a,EAAG9a,MAAQ,EACtB,IACA+a,EACA,IACAD,EAAG9a,MAAQ,EACX,IACA0a,EAAGza,OAAS8a,EACZ,KACCL,EAAG1a,MACJ,KAEC1C,KAAI,SAAAwH,GAAC,OAAIA,EAAEvH,cACXI,KAAK,KAER,MAAO,CACL,IACA+c,EAAGva,KACHua,EAAGxa,IACH,IACAwa,EAAG1a,MACH,IACA0a,EAAGza,OACH,KACCya,EAAG1a,MACJ,KAEC1C,KAAI,SAAAwH,GAAC,OAAIA,EAAEvH,cACXI,KAAK,O,8BAGY,IAAV8F,EAAS,uDAAH,EAClB,QAA8BrH,IAA1BM,KAAKsR,MAAMoM,WACb,OAAO,EAET,IAAMA,EAAa1d,KAAKsR,MAAMoM,WAC9B,OAAQ1d,KAAKoY,MAAMkB,YACjB,IAAK,QACH,OAAOoE,EAAWja,KACpB,IAAK,MACH,OAAIsD,EAAM,EACD2W,EAAWha,MAEXga,EAAWha,MAAQ1D,KAAKsR,MAAMmM,YAAYna,MAErD,QACE,OAAIyD,EAAM,EACD2W,EAAW1S,SAASnI,EAEpB6a,EAAW1S,SAASnI,EAAI7C,KAAKsR,MAAMmM,YAAYna,MAAQ,K,gCAKpDgW,GAChB,IAAM9X,EAAQxB,KAAKsR,MAAM+B,MAAM7R,MAC/B,QAAc9B,IAAV8B,EACF,MAAO,CACLwY,UAAW,SACXV,WAAY,UAGhB,IAAME,EAAgC,GAkBtC,OAjBIhY,EAAMS,YACRuX,EAASI,KAAOpY,EAAMS,UAAUyX,UAE9BlY,EAAMW,MAAQX,EAAMW,KAAKb,OAC3BkY,EAASM,WAAatY,EAAMW,KAAKb,MAE/BE,EAAMW,MAAQX,EAAMW,KAAKZ,OAC3BiY,EAASO,SAAWvY,EAAMW,KAAKZ,MAE7BvB,KAAKsR,MAAM0I,YACbR,EAASQ,UAAYha,KAAKsR,MAAM0I,WAE9BxY,EAAMM,gBACR0X,EAASQ,UAAYxY,EAAMM,eAE7B0X,EAASF,WACPA,IAAetZ,KAAKoY,MAAQpY,KAAKoY,MAAMkB,WAAa,UAC/CE,M,GA1I8Ba,iBChCpBiE,G,iLAEjB,IAAMxe,EAAIE,KAAKsR,MAAMrO,OACrB,OACE,wBACEgW,UAAU,uCACVzX,MAAO,CAAE+c,QAAS,WAClB1b,EAAG/C,EAAE+C,EACLC,EAAGhD,EAAEgD,EACLQ,MAAOxD,EAAEwD,MACTC,OAAQzD,EAAEyD,a,GAV4B8W,iBC0BzBmE,G,YAInB,WAAYlN,GAAwB,IAAD,sBACjC,4CAAMA,IACN,IAAMrO,EAAS,IAAII,EACjB,EAAKiO,MAAMzO,GAAK,EAAKyO,MAAMzD,SAAS5K,OAAOQ,KAC3C,EAAK6N,MAAMxO,GAAK,EAAKwO,MAAMzD,SAAS5K,OAAOO,IAC3C,EAAK8N,MAAMzD,SAAS5K,OAAOK,MAC3B,EAAKgO,MAAMzD,SAAS5K,OAAOM,QANI,OAQjC,EAAK6U,MAAQ,CACXqG,gBAAiB,EAAKC,yBACtBC,WAAOjf,EACP+d,iBAAa/d,EACbuD,SACA0H,OAAQ,EAAK2G,MAAMzD,SAASD,iBAC5BgR,OAAQ,EACR5E,UAAW,SACX0D,WAAYza,EAAO4b,UAAU,IAhBE,E,gFAoBTpG,GACpBzY,KAAKsR,MAAMzO,IAAM4V,EAAU5V,GAAK7C,KAAKsR,MAAMxO,IAAM2V,EAAU3V,GAC7D9C,KAAK8Y,SAAS,CACZ2E,YAAazd,KAAKyd,cAClBC,WAAY1d,KAAK0d,iB,+BAMrB,OACE,oBAAO1d,KAAKqY,aACTrY,KAAK8e,QACL9e,KAAK+e,OACL/e,KAAKgf,cACLhf,KAAKif,cACLjf,KAAKkf,cACLlf,KAAKuY,uB,mCAMV,OAAO,IAAIlV,EACTrD,KAAKsR,MAAMzO,EACX7C,KAAKsR,MAAMxO,EACX9C,KAAKsR,MAAMzD,SAAS5K,OAAOK,MAC3BtD,KAAKsR,MAAMzD,SAAS5K,OAAOM,QAC3Bsb,UAAU,K,0EAOZ,IAAM7F,EAAqC,CAAEvP,GAAIzJ,KAAKsR,MAAMzD,SAASpE,IAUrE,OATIzJ,KAAKsR,MAAMzD,SAASlE,MAAQ3J,KAAKsR,MAAMzD,SAASlE,KAAK3I,OAAS,IAChEgY,EAAMC,UAAN,oBAA+BjZ,KAAKmf,gBAElCnf,KAAKsR,MAAM4H,YACbF,EAAMG,QAAUnZ,KAAKsR,MAAM4H,UAAUE,KACnCpZ,KACAA,KAAKsR,MAAMzD,SAASD,mBAGjBoL,I,8BAIP,OAAIhZ,KAAKsR,MAAMzD,SAASvM,MAAQtB,KAAKsR,MAAMzD,SAASvM,KAAKN,OAAS,EACzD,6BAAQhB,KAAKsR,MAAMzD,SAASvM,WAEnC,I,6BAKF,OAAItB,KAAKsR,MAAMzD,SAASnE,cACf,4BAAO1J,KAAKsR,MAAMzD,SAASnE,oBAElC,I,oCAKF,IAAMzG,EAASjD,KAAKsR,MAAMzD,SAASlC,mBACnC,OACE,wBACE9I,EAAGI,EAAOJ,EACVC,EAAGG,EAAOH,EACVQ,MAAOL,EAAOK,MACdC,OAAQN,EAAOM,OACf0V,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,iB,mCAMhB,IAAM5d,EAAQxB,KAAKsR,MAAMzD,SAASrM,MAClC,QAAc9B,IAAV8B,EACF,MAAO,GAET,IAAMgY,EAAgC,GAUtC,OATIhY,EAAMO,YACRyX,EAASI,KAAOpY,EAAMO,UAAU2X,UAE9BlY,EAAMQ,YACRwX,EAASC,OAASjY,EAAMQ,UAAU0X,UAEhClY,EAAMU,YACRsX,EAASG,YAAcnY,EAAMU,WAExBsX,I,oCAIP,QAAyB9Z,IAArBM,KAAKoY,MAAMuG,MAGf,OAAO,qCAAK1S,KAAMjM,KAAKoY,MAAMuG,OAAW3e,KAAKyd,kB,oCAI7C,IAAM4B,EAAWrf,KAAK+d,QACtB,QAAiBre,IAAb2f,EAAJ,CAGA,IAAMtB,EAAQsB,EACd,OACE,gBAAC,GAAD,CACEhM,MAAOrT,KAAKsR,MAAMzD,SAClBkQ,MAAOA,EACPL,WACE1d,KAAKoY,MAAMsF,YACX1d,KAAKsR,MAAMzD,SAASlC,mBAAmBkT,UAAU,GAEnD7E,UAAWha,KAAKoY,MAAM4B,UACtByD,YAAazd,KAAKoY,MAAMqF,aAAe1Z,S,0CAM3C,OAAI/D,KAAKsR,MAAMyH,SAEX,gBAAC,GAAD,CAAkB9V,OAAQjD,KAAKsR,MAAMzD,SAASlC,0BAGhD,I,8BAKF,GAAI3L,KAAKsR,MAAMzD,SAAShE,SAAW7J,KAAKsR,MAAMzD,SAAShE,QAAQ7I,OAAS,EACtE,OAAOhB,KAAKsR,MAAMzD,SAAShE,QAE7B,GAAI7J,KAAKsR,MAAMzD,SAASvM,MAAQtB,KAAKsR,MAAMzD,SAASvM,KAAKN,OAAS,EAChE,OAAOhB,KAAKsR,MAAMzD,SAASvM,KAE7B,IAAMoL,EAAK1M,KAAKsR,MAAMzD,SAASD,iBAC/B,YAAWlO,IAAPgN,EAGGA,EAAGpL,UAHV,I,+CAOA,OAAQtB,KAAKmf,eACX,IAAK,gBACL,IAAK,wBACL,IAAK,gBACL,IAAK,mBACL,IAAK,sBACL,IAAK,oBACL,IAAK,iBACL,IAAK,kBACL,IAAK,eACL,IAAK,kBACL,IAAK,WACL,IAAK,WACL,IAAK,UACL,IAAK,iBACH,OAAOnoB,EAAed,EAAMI,UAC9B,IAAK,2BACL,IAAK,uBACL,IAAK,mBACL,IAAK,sBACL,IAAK,yBACL,IAAK,uBACL,IAAK,qBACL,IAAK,qBACL,IAAK,aACH,OAAOU,EAAed,EAAMK,aAC9B,IAAK,WACL,IAAK,uBACL,IAAK,oBACL,IAAK,SACL,IAAK,yBACL,IAAK,0BACL,IAAK,wBACL,IAAK,UACL,IAAK,OACL,IAAK,OACL,IAAK,iBACL,IAAK,0BACL,IAAK,kBACL,IAAK,qBACL,IAAK,wBACL,IAAK,sBACL,IAAK,mBACL,IAAK,oBACL,IAAK,oBACH,OAAOS,EAAed,EAAMM,YAC9B,IAAK,sBACL,IAAK,YACL,IAAK,WACL,IAAK,WACH,OAAOQ,EAAed,EAAMO,UAC9B,IAAK,aACL,IAAK,aACL,IAAK,SACL,IAAK,OACL,IAAK,UACL,IAAK,UACL,IAAK,YACL,IAAK,cACL,IAAK,cACL,IAAK,QACH,OAAOO,EAAed,EAAMQ,YAC9B,IAAK,cACL,IAAK,MACL,IAAK,sBACL,IAAK,UACL,IAAK,cACH,OAAOM,EAAed,EAAMS,4BAC9B,IAAK,cACL,IAAK,WACL,IAAK,aACH,OAAOK,EAAed,EAAMU,YAC9B,IAAK,aACL,IAAK,iBACL,IAAK,WACH,OAAOI,EAAed,EAAMG,UAC9B,IAAK,WACL,IAAK,QACL,QACE,OAAOW,EAAed,EAAMW,U,oCAKhC,IAAMyoB,EAAStf,KAAKsR,MAAMzD,SAASD,iBACnC,OAAI0R,EACKA,EAAO3V,KAEP3J,KAAKsR,MAAMzD,SAASlE,S,GApQY0Q,iB,mOC7BxBkF,G,YAkBnB,WAAYjO,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEqF,YAAa,EAAKA,gBAJa,E,uEAhBjCxa,EACAwb,EACAjd,GAEA,OACE,wBACEqB,EAAGI,EAAOJ,EACVC,EAAGG,EAAOH,EACVQ,MAAOL,EAAOK,MACdC,OAAQN,EAAOM,OACf0V,UAAWwF,EACXjd,MAAOA,Q,mDAcX,OAAO,IAAI6B,EACTrD,KAAKsR,MAAMzD,SAASlC,mBAAmBjI,MAAQ,GAC/C1D,KAAKsR,MAAMzD,SAASlC,mBAAmBnI,IAAM,EAC7C,GACA,M,oCAKF,IAAMP,EAASjD,KAAKsR,MAAMzD,SAASlC,mBACnC,OACE,wBACE9I,EAAGI,EAAOJ,EACVC,EAAGG,EAAOH,EACVQ,MAAOL,EAAOK,MACdC,OAAQN,EAAOM,OACf0V,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,mB,GA5C4BZ,I,mOCC3BgB,G,YACnB,WAAYlO,GAAwB,IAAD,sBAGjC,IAAMqN,EAC8B,OAHpC,4CAAMrN,KAGCA,MAAMzD,SAAS1D,UAChB,sCACAzK,EAN2B,OAOjC,EAAK0Y,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,QACAlB,iBAAa/d,EACbge,WAAY,EAAKA,eAXc,E,2EAgBjC,MAAsC,MAAlC1d,KAAKsR,MAAMzD,SAAS1D,UACf,0EAEP,I,mCAKF,GAAsC,MAAlCnK,KAAKsR,MAAMzD,SAAS1D,UACtB,OAAO,oEAEP,IAAMlH,EAASjD,KAAKsR,MAAMzD,SAASlC,mBAC7B8T,EAAWxc,EAAOQ,KAAO,KAC/B,OAAO,IAAIJ,EACToc,EAAW,KACXxc,EAAOO,IAAM,EACbP,EAAOK,MAAQ,GACfL,EAAOM,OAAS,K,oCAMpB,GAAsC,MAAlCvD,KAAKsR,MAAMzD,SAAS1D,UACtB,OAAO,qEAEP,IAAMlH,EAASjD,KAAKsR,MAAMzD,SAASlC,mBAC7B8T,EAAWxc,EAAOQ,KAAO,KACzBic,EAAezc,EAAOK,MAAQ,KACpC,OACE,gCACE,wBACET,EAAG4c,EACH3c,EAAGG,EAAOO,IACVF,MAAOoc,EACPnc,OAAQN,EAAOM,OACf0V,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,eAEbpf,KAAK2f,oBAAoB1c,EAAOQ,KAAMR,EAAOO,IAAM,IACnDxD,KAAK2f,oBAAoB1c,EAAOQ,KAAMR,EAAOO,IAAM,O,0CAMhCC,EAAcD,GACxC,OACE,gCACE,wBACEX,EAAGY,EACHX,EAAGU,EACHF,MAAM,KACNC,OAAO,KACP0V,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,eAEd,wBACEvc,EAAGY,EACHX,EAAGU,EACHF,MAAM,KACNC,OAAO,KACP0V,UAAU,8B,GA/EsCsG,I,mOCDrCK,G,YACnB,WAAYtO,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,6BAJwB,E,2EASjC,IAAM1b,EAASjD,KAAKsR,MAAMzD,SAASlC,mBAC7BiT,EAAS,GACf,OACE,qBAAG3F,UAAWjZ,KAAKoY,MAAMqG,gBAAiBjd,MAAOxB,KAAKof,cACpD,wBACEnH,EAAG,CACD,IACAhV,EAAOQ,KACPR,EAAOO,IACP,IACAP,EAAOK,MAAQsb,EACf,IACAA,EACAA,EACA,IACA3b,EAAOM,OAASqb,EAChB,KACC3b,EAAOK,MACR,KACArC,KAAK,OAET,wBACEgX,EAAG,CACD,IACAhV,EAAOS,MAAQkb,EACf3b,EAAOO,IACP,IACAob,EACA,IACAA,EACA,KACA3d,KAAK,KACPgY,UAAU,8B,GA1C0BsG,I,mOCAzBM,G,YACnB,WAAYvO,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEqF,YAAa,EAAKA,gBAJa,E,2EASjC,IAAMxa,EAASjD,KAAKsR,MAAMzD,SAASlC,mBAC7BiT,EAAS,GACTtb,EAAQL,EAAOK,MAAiB,EAATsb,EACvBrb,EAASN,EAAOM,OAAkB,EAATqb,EAC/B,OACE,wBACE3G,EAAG,CACD,IACAhV,EAAOQ,KAAOmb,EACd3b,EAAOO,IACP,IACAF,EACA,IACAsb,EACAA,EACA,IACArb,EACA,KACCqb,EACDA,EACA,KACCtb,EACD,KACCsb,GACAA,EACD,KACCrb,EACD,KACAtC,KAAK,KACPgY,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,iB,oCAMhB,IAAMnc,EAASjD,KAAKsR,MAAMzD,SAASlC,mBACnC,OAAO,IAAItI,EAAOJ,EAAOS,MAAQ,GAAIT,EAAOO,IAAM,EAAG,GAAI,Q,GA/Cbgb,I,mOCD3BsB,G,YACnB,WAAYxO,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,gCAJwB,E,2BADWkB,I,mOCA3BE,G,YACnB,WAAYzO,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,2BAJwB,E,2BADcY,I,mOCA9BS,G,YACnB,WAAY1O,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,0BAJwB,E,2BADaY,I,mOCA7BU,G,YACnB,WAAY3O,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,mCAJwB,E,2BADcY,I,mOCA9BW,G,YACnB,WAAY5O,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,gCAJwB,E,2BADWkB,I,mOCC3BM,G,YACnB,WAAY7O,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEwG,OAAQ,EACRlB,WAAY,EAAKA,eALc,E,2EAUjC,IAAMza,EAASjD,KAAKsR,MAAMzD,SAASlC,mBAC7BnK,EAAQxB,KAAKof,aACbgB,EAAkC,CACtC3G,OAAQjY,EAAMiY,OACdE,YAAanY,EAAMmY,aAErB,OACE,qBAAGV,UAAWjZ,KAAKoY,MAAMqG,iBACvB,wBACEtf,IAAI,kBACJ0D,EAAGI,EAAOQ,KACVX,EAAGG,EAAOO,IACVF,MAAOL,EAAOK,MACdC,OAAQN,EAAOM,OACf0V,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOA,IAET,wBACErC,IAAI,kBACJ0D,EAAGI,EAAOQ,KACVX,EAAGG,EAAOO,IACVF,MAAOL,EAAOK,MACdC,OAAQvD,KAAKoY,MAAMwG,OACnB3F,UAAU,uBACVzX,MAAO4e,O,mCAOb,IAAM1C,EAAU,oEAEhB,OAAO,IAAIra,EACTqa,EAAWja,KACXia,EAAWla,IAHU,EAIrBka,EAAWpa,MACXoa,EAAWna,OALU,O,GA3CqBib,I,mOCA3B6B,G,YACnB,WAAY/O,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEwG,OAAQ,IAJuB,E,2EASjC,IAAM3b,EAASjD,KAAKsR,MAAMzD,SAASlC,mBAC7BiT,EAAS5e,KAAKoY,MAAMwG,QAAU,EACpC,OACE,qBAAG3F,UAAWjZ,KAAKoY,MAAMqG,iBACvB,wBACE5b,EAAGI,EAAOQ,KACVX,EAAGG,EAAOO,IACVF,MAAOL,EAAOK,MACdC,OAAQN,EAAOM,OACf0V,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,eAEd,wBACEvc,EAAGI,EAAOQ,KACVX,EAAGG,EAAOO,IACVF,MAAOL,EAAOK,MACdC,OAAQqb,EACR3F,UAAU,yBAEZ,wBACEpW,EAAGI,EAAOQ,KACVX,EAAGG,EAAOO,IAAMP,EAAOM,OAASqb,EAChCtb,MAAOL,EAAOK,MACdC,OAAQqb,EACR3F,UAAU,8B,GAlC0BkH,I,mOCDzBG,G,YACnB,WAAYhP,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,6BAJwB,E,2EASjC,IAAM1b,EAASjD,KAAKsR,MAAMzD,SAASlC,mBACnC,OACE,gCACE,wBACEsM,EAAG,CACD,IACAhV,EAAOQ,KACPR,EAAOO,IACP,IACAP,EAAOM,OAAS,EAChB,IACA,KAAQN,EAAOK,MACf,KAAQL,EAAOM,OACf,KAAQN,EAAOK,MACf,KAAQL,EAAOM,OACA,KAAfN,EAAOK,MACP,EACA,IACA,MAASL,EAAOK,OACf,MAASL,EAAOM,OACjB,KAAQN,EAAOK,OACd,MAASL,EAAOM,OACF,KAAfN,EAAOK,MACP,EACA,MACEL,EAAOM,OAAS,GAClB,KACAtC,KAAK,KACPgY,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,oB,GAvC2BZ,I,mOCC5B+B,G,YACnB,WAAYjP,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEqF,YAAa,EAAKA,cAClBmB,OAAQ,GACRlB,WAAY,EAAKA,eANc,E,2EAWjC,IAAMza,EAASjD,KAAKsR,MAAMzD,SAASlC,mBAC7BiT,EAAS5e,KAAKoY,MAAMwG,QAAU,GAC9B4B,EAAgBvd,EAAOM,OAASqb,EAChC6B,EAAexd,EAAOK,MAAQsb,EACpC,OACE,qBAAG3F,UAAWjZ,KAAKoY,MAAMqG,gBAAiBjd,MAAOxB,KAAKof,cACpD,wBACEnH,EAAG,CACD,IACAhV,EAAOQ,KACPR,EAAOU,OACP,KACC6c,EACD,IACA5B,GACCA,EACD,IACA6B,EACA,IACAD,EACA,KACC5B,EACDA,EACA,KACA3d,KAAK,OAET,wBACEgX,EAAG,CACD,IACAhV,EAAOQ,KACPR,EAAOO,IAAMob,EACb,IACAA,GACCA,EACD,IACA6B,EACA,IACAD,EACA,KACC5B,EACDA,EACA,KACC4B,EACD,IACA,IACAvd,EAAOS,MACPT,EAAOO,IACP,KACCob,EACDA,GACA3d,KAAK,KACPgY,UAAU,yBAEZ,wBACEhB,EAAG,CACD,IACAhV,EAAOQ,KACPR,EAAOO,IAAMob,EACb,IACA6B,EACA,IACA7B,GACCA,EACD,IACA3b,EAAOQ,KAAOgd,EACdxd,EAAOU,OACP,KACC6c,GACDvf,KAAK,KACPO,MAAO,CAAEoY,KAAM,OAAQH,OAAQ,gB,oCAOrC,IAAMxW,EAASjD,KAAKsR,MAAMzD,SAASlC,mBAEnC,OAAO,IAAItI,EACTJ,EAAOS,MAFM,GAEW,GACxBT,EAAOO,IAHM,GAGS,EACtB,GACA,M,mCAKF,IAAMP,EAASjD,KAAKsR,MAAMzD,SAASlC,mBAE7B6U,EAAgBvd,EAAOM,OADd,GAETkd,EAAexd,EAAOK,MAFb,GAGf,OAAO,IAAID,EACTJ,EAAOQ,KAAO,EACdR,EAAOO,IALM,GAKS,EACtBid,EAAe,EACfD,EAAgB,O,GA3G0BhC,I,kkBCC3BkC,G,YA6CnB,WAAYpP,GAAwB,IAAD,6BAEK,OADtC,4CAAMA,KACGA,MAAMzD,SAAS1D,UACtB,EAAKiO,MAAL,MACK,EAAKA,MADV,CAEEuG,MAAO,4BAGT,EAAKvG,MAAL,MACK,EAAKA,MADV,CAEEuG,WAAOjf,EACP+d,iBAAa/d,EACbge,WAAY,EAAKpM,MAAMzD,SAASlC,mBAAmBkT,UAAU,KAZhC,E,uEA3CjC8B,EACAlC,EACAjd,GAEA,IAAMyB,EAAS0d,EACT/B,EAAS,GACTgC,EAAiB,CACrB,IACA3d,EAAOQ,KAAOmb,EACd3b,EAAOU,OAASib,EAChB,KACCA,EACDA,EACA,IACA3b,EAAOK,MACP,KACCsb,GACAA,EACD,KACA3d,KAAK,KAEP,OACE,gCACE,wBACE4B,EAAGI,EAAOQ,KACVX,EAAGG,EAAOO,IACVF,MAAOL,EAAOK,MACdC,OAAQN,EAAOM,OAASqb,EACxBjD,GAAI,IACJD,GAAI,IACJzC,UAAWwF,EACXjd,MAAOA,IAET,wBAAMyW,EAAG2I,EAAgB3H,UAAWwF,EAAiBjd,MAAOA,IAC5D,wBACEyW,EAAG2I,EACH3H,UAAU,uBACVzX,MAAOA,S,mDAwBb,MAAsC,MAAlCxB,KAAKsR,MAAMzD,SAAS1D,UACf,qEAEAuW,EAAenT,KACpBvN,KAAKsR,MAAMzD,SAASlC,mBACpB3L,KAAKoY,MAAMqG,gBACXze,KAAKof,kB,GArE+BmB,I,mOCFvBM,G,YACnB,WAAYvP,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEqG,gBAAiB,+CACjBE,MAAO,6CALwB,E,2BADWY,I,mOCA3BuB,G,YACnB,WAAYxP,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,0CAJwB,E,2BADoBY,I,mOCApCwB,G,YACnB,WAAYzP,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,4BAJwB,E,2BADOkB,I,mOCCvBmB,G,YACnB,WAAY1P,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEqF,YAAa,EAAKA,gBAJa,E,2EASjC,IAAMxa,EAASjD,KAAKsR,MAAMzD,SAASlC,mBACnC,OACE,wBACE9I,EAAGI,EAAOQ,KACVX,EAAGG,EAAOO,IACVF,MAAOL,EAAOK,MACdC,OAAQN,EAAOM,OACfoY,GAAI,IACJD,GAAI,IACJzC,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,iB,oCAMhB,IAAMnc,EAASjD,KAAKsR,MAAMzD,SAASlC,mBACnC,OAAO,IAAItI,EAAOJ,EAAOS,MAAQ,GAAIT,EAAOO,IAAM,EAAG,GAAI,Q,GA3BNgb,I,mOCClCyC,G,YACnB,WAAY3P,GAAwB,IAAD,sBAEjC,IAAMqN,EAC8B,OAFpC,4CAAMrN,KAECA,MAAMzD,SAAS1D,eAChBzK,EACA,yBAL2B,OAMjC,EAAK0Y,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,QACAlB,YAAa,EAAKA,cAClBC,WAAY,EAAKA,eAVc,E,2EAejC,MAAsC,MAAlC1d,KAAKsR,MAAMzD,SAAS1D,UACfnK,KAAKkhB,YAEL,uE,oCAKT,MAAsC,MAAlClhB,KAAKsR,MAAMzD,SAAS1D,eACtB,EAEO,uE,mCAKT,GAAsC,MAAlCnK,KAAKsR,MAAMzD,SAAS1D,UAAmB,CACzC,IAAMuT,EAAU,oEAEhB,OAAO,IAAIra,EACTqa,EAAWja,KAAO0d,KAClBzD,EAAWla,IACXka,EAAWpa,MAJE,GAKboa,EAAWna,QAGb,OAAO,sE,kCAKT,IAAMN,EAASjD,KAAKsR,MAAMzD,SAASlC,mBAC7BwV,EAAS,GACTC,EAAcne,EAAOM,OAAS,EAC9B8d,EAA4B,IAAfpe,EAAOK,MAEpB2U,EAAI,CACR,IACAhV,EAAOQ,KACPR,EAAOO,IACP,IACA2d,EACAC,EACA,KACCD,EACDC,EACA,IACAC,EACA,IAbS,GAeTD,EACA,EACA,EACA,EACA,GACCne,EAAOM,OACR,KACAtC,KAAK,KACP,OACE,wBACEgX,EAAGA,EACHgB,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,mB,GA9EuB4B,I,mOCFtBM,G,YACnB,WAAYhQ,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,8BAJwB,E,2BADSqC,I,mOCCzBO,G,YACnB,WAAYjQ,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEqG,gBAAiB,uCACjBE,MAAO,uBACPlB,YAAa,EAAKA,gBANa,E,2EAWjC,OAAO,IAAIpa,EACTrD,KAAKsR,MAAMzD,SAASlC,mBAAmBjI,MAAQ,GAC/C1D,KAAKsR,MAAMzD,SAASlC,mBAAmBnI,IAAM,EAC7C,GACA,Q,GAhBmC8c,I,mOCDpBkB,G,YACnB,WAAYlQ,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,0BAJwB,E,2BADKkB,I,mOCCrB4B,G,YAGnB,WAAYnQ,GAAwB,IAAD,8BACjC,4CAAMA,KAHAoQ,kBAAoB,GAI1B,EAAKtJ,M,4VAAL,IACK,EAAKA,MADV,CAEEqG,gBAAiB,6BACjBzE,UAAW,OACX0D,WAAY,EAAKA,eANc,E,2EAWjC,IAAMza,EAASjD,KAAKsR,MAAMzD,SAASlC,mBACnC,OACE,gCACE,wBACE9I,EAAGI,EAAOQ,KACVX,EAAGG,EAAOO,IAAMxD,KAAK0hB,kBACrBpe,MAAOL,EAAOK,MACdC,OAAQN,EAAOM,OAASvD,KAAK0hB,kBAC7BzI,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,eAEd,wBACEvc,EAAGI,EAAOQ,KACVX,EAAGG,EAAOO,IACVF,MAAOL,EAAOK,MAAQ,EACtBC,OAAQvD,KAAK0hB,kBACbzI,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,eAEd,wBACEvc,EAAGI,EAAOQ,KACVX,EAAGG,EAAOO,IACVF,MAAOL,EAAOK,MAAQ,EACtBC,OAAQvD,KAAK0hB,kBACbzI,UAAW,yBAtBf,O,mCA8BF,IAAMhW,EAASjD,KAAKsR,MAAMzD,SAASlC,mBACnC,OAAO,IAAItI,EACTJ,EAAOQ,KAAO,EACdR,EAAOO,IACPP,EAAOK,MAAQ,EAAM,EACrBtD,KAAK0hB,uB,GAnDgClD,I,mOCAtBmD,G,YACnB,WAAYrQ,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEqG,gBAAiB,gCACjBzE,UAAW,SALoB,E,2EAUjC,IAAM/W,EAASjD,KAAKsR,MAAMzD,SAASlC,mBAEnC,OACE,gCACE,wBACE9I,EAAGI,EAAOQ,KACVX,EAAGG,EAAOO,IALU,GAMpBF,MAAOL,EAAOK,MACdC,OAAQN,EAAOM,OAPK,GAQpB0V,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,eAEd,wBACEnH,EAAG,CACD,IACAhV,EAAOQ,KACPR,EAAOO,IAfW,GAee,EACjC,KACC,GACD,IACAP,EAAOK,MAAQ,EACf,IACAoe,IACAzgB,KAAK,KACPgY,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,oB,GApCwBqC,I,mOCDzBG,G,YACnB,WAAYtQ,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,iCAJwB,E,2BADYqC,I,kkBCC5Ba,G,YACnB,WAAYvQ,GAAwB,IAAD,6BAEK,OADtC,4CAAMA,KACGA,MAAMzD,SAAS1D,UACtB,EAAKiO,MAAL,MACK,EAAKA,MADV,CAEEuG,WAAOjf,EACP+d,iBAAa/d,IAGf,EAAK0Y,MAAL,MACK,EAAKA,MADV,CAEEuG,MAAO,+BAXsB,E,2EAiBjC,MAAsC,MAAlC3e,KAAKsR,MAAMzD,SAAS1D,UACfnK,KAAK8hB,aAEL,uE,mCAKT,IAAM7e,EAASjD,KAAKsR,MAAMzD,SAASlC,mBACnC,OACE,2BACE6P,GAAIvY,EAAOQ,KAAOR,EAAOK,MAAQ,EACjCmY,GAAIxY,EAAOO,IAAMP,EAAOM,OAAS,EACjCoY,GAAI1Y,EAAOK,MAAQ,EACnBoY,GAAIzY,EAAOM,OAAS,EACpB0V,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,mB,GAlC2BG,I,mOCD1BwC,G,YACnB,WAAYzQ,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEqG,gBAAiB,kCAJc,E,kHAajC,IAAMxb,EAASjD,KAAKsR,MAAMzD,SAASlC,mBAC7BX,EAAS/H,EAAO+H,SAChBpL,EAAIuB,KAAKuB,IAAIO,EAAOK,MAAOL,EAAOM,QAAU,EAClD,OACE,0BACEiY,GAAIxQ,EAAOnI,EACX4Y,GAAIzQ,EAAOlI,EACXlD,EAAGA,EACHqZ,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,mB,GAvB0BZ,I,mOCAzBwD,G,YACnB,WAAY1Q,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEqG,gBAAiB,gCACjBE,MAAO,8BALwB,E,2BADSY,I,mOCCzB0C,G,YACnB,WAAY3Q,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,OAHuB,E,2EAQjC,IAAMnV,EAASjD,KAAKsR,MAAMzD,SAASlC,mBAC7BzG,EAAM,CACV,IAAItC,EACFK,EAAOQ,KAAsB,IAAfR,EAAOK,MACrBL,EAAOO,IAAsB,GAAhBP,EAAOM,QAEtB,IAAIX,EACFK,EAAOQ,KAAsB,GAAfR,EAAOK,MACrBL,EAAOO,IAAsB,IAAhBP,EAAOM,QAEtB,IAAIX,EACFK,EAAOQ,KAAsB,IAAfR,EAAOK,MACrBL,EAAOO,IAAsB,IAAhBP,EAAOM,QAEtB,IAAIX,EACFK,EAAOQ,KAAsB,IAAfR,EAAOK,MACrBL,EAAOO,IAAsB,IAAhBP,EAAOM,SAGxB,OACE,wBACE0U,EAAG,CACD,IACA/S,EAAI,GAAGrC,EACPqC,EAAI,GAAGpC,EACP,IACAoC,EAAI,GAAGrC,EAAmB,IAAfI,EAAOK,MAClB4B,EAAI,GAAGpC,EAAoB,IAAhBG,EAAOM,OAClB2B,EAAI,GAAGrC,EAAmB,GAAfI,EAAOK,MAClB4B,EAAI,GAAGpC,EAAoB,IAAhBG,EAAOM,OAClB2B,EAAI,GAAGrC,EACPqC,EAAI,GAAGpC,EACP,IACAoC,EAAI,GAAGrC,EAAmB,IAAfI,EAAOK,MAClB4B,EAAI,GAAGpC,EAAoB,KAAhBG,EAAOM,OAClB2B,EAAI,GAAGrC,EAAmB,KAAfI,EAAOK,MAClB4B,EAAI,GAAGpC,EAAoB,KAAhBG,EAAOM,OAClB2B,EAAI,GAAGrC,EACPqC,EAAI,GAAGpC,EACP,IACAoC,EAAI,GAAGrC,EAAmB,KAAfI,EAAOK,MAClB4B,EAAI,GAAGpC,EAAoB,KAAhBG,EAAOM,OAClB2B,EAAI,GAAGrC,EAAmB,KAAfI,EAAOK,MAClB4B,EAAI,GAAGpC,EAAoB,KAAhBG,EAAOM,OAClB2B,EAAI,GAAGrC,EACPqC,EAAI,GAAGpC,EACP,IACAoC,EAAI,GAAGrC,EAAmB,KAAfI,EAAOK,MAClB4B,EAAI,GAAGpC,EAAoB,KAAhBG,EAAOM,OAClB2B,EAAI,GAAGrC,EAAmB,KAAfI,EAAOK,MAClB4B,EAAI,GAAGpC,EAAoB,KAAhBG,EAAOM,OAClB2B,EAAI,GAAGrC,EACPqC,EAAI,GAAGpC,GACP7B,KAAK,KACPgY,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,mB,GAhEyBZ,I,mOCDxB0D,G,YACnB,WAAY5Q,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,6BAJwB,E,2BADQY,I,kkBCCxB4C,G,YACnB,WAAY7Q,GAAwB,IAAD,6BAEK,OADtC,4CAAMA,KACGA,MAAMzD,SAAS1D,UACtB,EAAKiO,MAAL,MACK,EAAKA,MADV,CAEEuG,MAAO,0BAGT,EAAKvG,MAAL,MACK,EAAKA,MADV,CAEEuG,WAAOjf,EACP+d,iBAAa/d,IAXgB,E,2EAiBjC,MAAsC,MAAlCM,KAAKsR,MAAMzD,SAAS1D,UACfoV,GAAmBhS,KACxBvN,KAAKsR,MAAMzD,SAASlC,mBACpB3L,KAAKoY,MAAMqG,gBACXze,KAAKof,cAGA,yE,GAzB6BmB,I,mOCDrB6B,G,YACnB,WAAY9Q,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEqG,gBAAiB,4BACjBzE,UAAW,OACX0D,WAAY,EAAKpM,MAAMzD,SAASlC,mBAAmBkT,UAAU,KAN9B,E,2EAWjC,IAAM5b,EAASjD,KAAKsR,MAAMzD,SAASlC,mBACnC,OACE,wBACEsM,EAAG,CACD,IACAhV,EAAOQ,KACPR,EAAOO,IACP,IACAP,EAAOK,MACP,IACAL,EAAOM,OAAS,EAChB,KACC,EACD,EACA,MACEN,EAAOK,MAAQ,GACjB,KACArC,KAAK,KACPgY,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,mB,GA/BsBZ,I,mOCArB6D,G,YACnB,WAAY/Q,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEqG,gBAAiB,qCAJc,E,2BADWsD,I,mOCA3BO,G,YACnB,WAAYhR,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,6BAJwB,E,2BADQkB,I,mOCAxB0C,G,YACnB,WAAYjR,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,wCAJwB,E,2BADKY,I,mOCArBiD,G,YACnB,WAAYlR,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEqG,gBAAiB,uCACjBE,MAAO,6BALwB,E,2BADQ4B,I,mOCAxBkC,G,YACnB,WAAYnR,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,+BAJwB,E,2BADUkB,I,kkBCE1B6C,G,YACnB,WAAYpR,GAAwB,IAAD,6BAEK,OADtC,4CAAMA,KACGA,MAAMzD,SAAS1D,UACtB,EAAKiO,MAAL,MACK,EAAKA,MADV,CAEEqF,YAAa1Z,IACb2Z,WAAY,EAAKA,eAGnB,EAAKtF,MAAL,MACK,EAAKA,MADV,CAEEuG,MAAO,6BAXsB,E,2EAiBjC,MAAsC,MAAlC3e,KAAKsR,MAAMzD,SAAS1D,UACfnK,KAAK2iB,cAEL,uE,mCAKT,IAAM1f,EAASjD,KAAKsR,MAAMzD,SAASlC,mBAC7BiX,EAAW3f,EAAOO,IAAsB,IAAhBP,EAAOM,OAC/Bsf,EAAc5f,EAAOU,OAAyB,IAAhBV,EAAOM,OACrCE,EAAOR,EAAOQ,KACdia,EAAa,IAAIra,EACrBI,EACAmf,EACA3f,EAAOK,MAAwB,IAAhBL,EAAOM,OACtBsf,EAAcD,GAEhB,OAAOlF,EAAWmB,UAAU,K,oCAI5B,IAAM5b,EAASjD,KAAKsR,MAAMzD,SAASlC,mBAC7BnI,EAAMP,EAAOO,IACbof,EAAW3f,EAAOO,IAAsB,IAAhBP,EAAOM,OAC/Buf,EAAS7f,EAAOO,IAAsB,GAAhBP,EAAOM,OAC7Bsf,EAAc5f,EAAOU,OAAyB,IAAhBV,EAAOM,OACrCI,EAASV,EAAOU,OAEhBF,EAAOR,EAAOQ,KACdsf,EAAY9f,EAAOS,MAAwB,GAAhBT,EAAOM,OAClCG,EAAQT,EAAOS,MACrB,OACE,wBACEuU,EAAG,CACD,IACAxU,EACAmf,EACA,IACAG,EACAH,EACA,IACAG,EACAvf,EACA,IACAE,EACAof,EACA,IACAC,EACApf,EACA,IACAof,EACAF,EACA,IACApf,EACAof,EACA,KACA5hB,KAAK,KACPgY,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,mB,GA7EyB4B,I,mOCDxBgC,G,YACnB,WAAY1R,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,OAHuB,E,2EAQjC,IAAMnV,EAASjD,KAAKsR,MAAMzD,SAASlC,mBACnC,OACE,qBAAGsN,UAAWjZ,KAAKoY,MAAMqG,iBACvB,wBACE5b,EAAGI,EAAOQ,KACVX,EAAGG,EAAOO,IACVF,MAAOL,EAAOK,MACdC,OAAQN,EAAOM,OACf0V,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,eAEd,wBACEvc,EAAGI,EAAOQ,KACVX,EAAGG,EAAOO,IACVF,MAAOL,EAAOK,MAAQ,EACtBC,OAAO,IACP0V,UAAU,8B,GAzByBkH,I,mOCAxB8C,G,YACnB,WAAY3R,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,OAHuB,E,2EAQjC,IAAMnV,EAASjD,KAAKsR,MAAMzD,SAASlC,mBACnC,OACE,gCACE,wBACEsM,EAAG,CACD,IACAhV,EAAOQ,KACPR,EAAOO,IACP,IACAP,EAAOM,OAAS,EAChB,IACA,KAAQN,EAAOK,MACf,KAAQL,EAAOM,OACf,KAAQN,EAAOK,MACf,KAAQL,EAAOM,OACA,KAAfN,EAAOK,MACP,EACA,IACA,MAASL,EAAOK,OACf,MAASL,EAAOM,OACjB,KAAQN,EAAOK,OACd,MAASL,EAAOM,OACF,KAAfN,EAAOK,MACP,EACA,MACEL,EAAOM,OAAS,GAClB,KACAtC,KAAK,KACPgY,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,eAEd,wBACEjgB,IAAI,kBACJ0D,EAAGI,EAAOQ,KACVX,EAAGG,EAAOO,IACVF,MAAOL,EAAOK,MACdC,OAAQvD,KAAKoY,MAAMwG,OACnB3F,UAAU,8B,GA9CgCkH,I,mOCD/B+C,G,YACnB,WAAY5R,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,iCAJwB,E,2BADYkB,I,mOCA5BsD,G,YACnB,WAAY7R,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,8BAJwB,E,2BADSY,I,kkBCEzB6D,G,YACnB,WAAY9R,GAAwB,IAAD,6BAEK,OADtC,4CAAMA,KACGA,MAAMzD,SAAS1D,UACtB,EAAKiO,MAAL,MACK,EAAKA,MADV,CAEEqF,YAAa1Z,IACb2Z,WAAY,EAAKA,eAGnB,EAAKtF,MAAL,MACK,EAAKA,MADV,CAEEuG,MAAO,6BAXsB,E,2EAiBjC,MAAsC,MAAlC3e,KAAKsR,MAAMzD,SAAS1D,UACfnK,KAAKqjB,cAEL,uE,mCAKT,IAAMpgB,EAASjD,KAAKsR,MAAMzD,SAASlC,mBACnC,OAAO,IAAItI,EACTJ,EAAOQ,KAAO,EACdR,EAAOO,IAAM,EACbP,EAAOK,MAAQ,GACfL,EAAOM,OAAS,M,oCAKlB,IAAMN,EAASjD,KAAKsR,MAAMzD,SAASlC,mBACnC,OACE,wBACE9I,EAAGI,EAAOQ,KACVX,EAAGG,EAAOO,IACVF,MAAOL,EAAOK,MACdC,OAAQN,EAAOM,OACfoY,GAAI1Y,EAAOM,OAAS,EACpBmY,GAAIzY,EAAOM,OAAS,EACpB0V,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,mB,GA9CyB4B,I,mOCFxBsC,G,YACnB,WAAYhS,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,0BAJwB,E,2BADYkB,I,mOCD5B0D,G,YACnB,WAAYjS,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEqG,gBAAiB,gCAJc,E,2BADOD,I,mOCCvBgF,G,YACnB,WAAYlS,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,MAAO,qCAJwB,E,2BADeY,I,mOCC/BkE,G,YACnB,WAAYnS,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEsF,WAAY,EAAKA,eAJc,E,2EASjC,IAAMza,EAASjD,KAAKsR,MAAMzD,SAASlC,mBAC7B6P,EAAKvY,EAAOQ,KAAOR,EAAOK,MAAQ,EAClCqY,EAAK1Y,EAAOK,MAAQ,EAAM,EAC1BmY,EAAKxY,EAAOO,IAAMP,EAAOM,OAAS,EAClCmY,EAAKzY,EAAOM,OAAS,EAAM,EACjC,OACE,2BACEiY,GAAIA,EACJC,GAAIA,EACJE,GAAIA,EACJD,GAAIA,EACJzC,UAAWjZ,KAAKoY,MAAMqG,gBACtBjd,MAAOxB,KAAKof,iB,mCAMhB,IAAM1B,EAAU,oEAChB,OAAO,IAAIra,EACTqa,EAAWja,KAAO,GAClBia,EAAWla,IAAM,GACjBka,EAAWpa,MAAQ,GACnBoa,EAAWna,OAAS,Q,GAjCiBib,I,mOCDtBkF,G,YACnB,WAAYpS,GAAwB,IAAD,8BACjC,4CAAMA,KACD8G,M,4VAAL,IACK,EAAKA,MADV,CAEEuG,WAAOjf,EACP+d,iBAAa/d,IALkB,E,2BADYshB,I,ICY5C2C,G,SCDCC,GAAmB,GAEJC,G,YAMnB,WAAYvS,GAAgB,IAAD,8BACzB,4CAAMA,KANAwS,eAKmB,IAJnBC,gBAImB,IAHnBC,eAGmB,IAFnBC,qBAEmB,IA4EnBC,mBAAqB,SAACjM,GAC5B,IAAM5L,EAAM4L,EAAErK,iBAER1J,EAAO,SAACrB,GAAD,OAAgB+gB,GAAmB/gB,EAAK,KACrD,OAFgBwJ,EAAMA,EAAI1C,KAAO,IAG/B,IAAK,YACH,OAAOzF,EAAK,KACd,IAAK,SACH,OAAOA,EAAK,KACd,IAAK,UACH,OAAOA,EAAK,KACd,IAAK,cACH,OAAOA,EAAK,KACd,IAAK,aACH,OAAOA,EAAK,IACd,IAAK,cACH,OAAOA,EAAK,IACd,IAAK,cACH,OAAOA,EAAK,IACd,QACE,OAAOA,EAAK,OAhGS,EAwGnBigB,OAAS,WACX,EAAKJ,aACP,EAAKA,WAAWK,MACd,SACAC,KAAoB,EAAK/S,MAAMgT,QAAS,EAAKhT,MAAMiT,UAEjD,EAAKjT,MAAMkT,mBACb,EAAKlT,MAAMkT,sBA7Gf,EAAKR,UAAY3kB,gBACjB,EAAK4kB,gBAAkB5kB,gBAHE,E,sEAOzB,OAAOW,KAAKsR,MAAMiC,W,0CAIbvT,KAAKsR,MAAM/M,aAIhBvE,KAAK8jB,UAAYO,KACkBrkB,KAAKsR,MAAMrH,aAC3CR,IAAG,SAACsF,EAAgB3G,EAAWqc,GAA5B,OAAsD1V,EAAKtF,MAC9Dib,SAAS1kB,KAAKkkB,oBACjBlkB,KAAK+jB,WAAaM,KACCrkB,KAAKsR,MAAMtH,OAC3Boa,MACC,SACAC,KAAoBrkB,KAAKsR,MAAMgT,QAAStkB,KAAKsR,MAAMiT,UAEpDH,MAAM,UAAWC,K9ElCO,M8EmCxBD,MAAM,OAAQpkB,KAAK8jB,WACnBM,MAAM,SAAUC,QAChBM,GAAG,OAAQ3kB,KAAKmkB,W,yCAGK1L,GACxB,GAAKzY,KAAKsR,MAAM/M,WAAhB,CAQA,IAAMqgB,EAAkBvlB,MAAIwlB,GAAJ,MAAAxlB,MAAG,YACtBW,KAAKsR,MAAMrH,YAAYrJ,KAAI,SAAA+G,GAAC,OAAIA,EAAE8B,QAEjCqb,EAAYzlB,MAAIwlB,GAAJ,MAAAxlB,MAAG,YAAeW,KAAKsR,MAAMtH,MAAMpJ,KAAI,SAAA+B,GAAC,OAAIA,EAAE8G,QAE9DrK,aAAGY,KAAKikB,gBAAiBW,IACzBxlB,aAAGY,KAAKgkB,UAAWc,KAIrB9kB,KAAKgkB,UAAYc,EACjB9kB,KAAKikB,gBAAkBW,EAEnB5kB,KAAK+jB,aACP/jB,KAAK+jB,WAAW/Z,MAAMhK,KAAKsR,MAAMtH,OAC7BhK,KAAK8jB,WACP9jB,KAAK8jB,UAAUiB,MAAM/kB,KAAKsR,MAAMrH,aAElCjK,KAAK+jB,WAAWiB,MAAM,GACtBhlB,KAAK+jB,WAAWkB,iBA1BZjlB,KAAK+jB,YACP/jB,KAAK+jB,WAAWmB,S,6CA8BhBllB,KAAK+jB,YACP/jB,KAAK+jB,WAAWmB,W,GAvEmB7K,iB,mBDDpCsJ,O,uBAAAA,I,6BAAAA,I,uCAAAA,I,wBAAAA,Q,KAeL,IEHKA,GFGCzV,GAAiB,GAEjBiX,GAAoB,KAILC,G,YAOnB,WAAY9T,GAAgB,IAAD,8BACzB,4CAAMA,KAPA+T,QAAkB,EAMC,EALnBC,QAAkBllB,OAAOmlB,kBAKN,EAJnBC,qBAImB,IAHnBC,OAAiB,EAGE,EAFnBC,OAAiB,EAEE,EA4DnBC,mBAAqB,WAC3B,IAAMriB,EAAQ,EAAKgO,MAAMhJ,KAAO,EAAKgJ,MAAM7I,KACrClF,EAAS,EAAK+N,MAAM9I,KAAO,EAAK8I,MAAM3I,KACtCid,EAAS,EAAKxN,MAAMyN,aAAeviB,EAAQ4K,IAC3C4X,EAAS,EAAK1N,MAAM2N,cAAgBxiB,EAAS2K,IAC/C8X,EAAQ,EAAK5N,MAAM4N,MACnBC,EAAK,EAAK7N,MAAM6N,GAChBC,EAAK,EAAK9N,MAAM8N,GAKpB,OAAQ,EAAK5U,MAAM6U,UACjB,KAAKxC,GAASyC,YACZJ,EAAQ7kB,KAAKuB,IAAIkjB,EAAQE,GACzBG,GAAM,EAAK7N,MAAMyN,YAAcG,EAAQ1iB,GAAS,EAAI,EAAKgO,MAAM7I,KAC/Dyd,GAAM,EAAK9N,MAAM2N,aAAeC,EAAQziB,GAAU,EAAI,EAAK+N,MAAM3I,KACjE,MACF,KAAKgb,GAAS0C,iBACZL,EAAQJ,EACRK,GAAM,EAAK7N,MAAMyN,YAAcG,EAAQ1iB,GAAS,EAAI,EAAKgO,MAAM7I,KAE7Dyd,EADE3iB,EAASyiB,EAAQ9X,GAAiB,EAAKkK,MAAM2N,aAC1C7X,GAAiB,EAAI,EAAKoD,MAAM3I,MAE/B,EAAKyP,MAAM2N,aAAeC,EAAQziB,GAAU,EAAI,EAAK+N,MAAM3I,KAEnE,MACF,KAAKgb,GAAS2C,SACZN,EAAQ,EAENC,EADE3iB,EAAQ4K,GAAiB,EAAKkK,MAAMyN,YACjC3X,GAAiB,EAAI,EAAKoD,MAAM7I,MAE/B,EAAK2P,MAAMyN,YAAcG,EAAQ1iB,GAAS,EAAI,EAAKgO,MAAM7I,KAG/Dyd,EADE3iB,EAASyiB,EAAQ9X,GAAiB,EAAKkK,MAAM2N,aAC1C7X,GAAiB,EAAI,EAAKoD,MAAM3I,MAE/B,EAAKyP,MAAM2N,aAAeC,EAAQziB,GAAU,EAAI,EAAK+N,MAAM3I,KAEnE,MACF,KAAKgb,GAAS4C,UAGZC,GAAc,EAAKpO,MAAM4N,MAAOA,KAClC,EAAKlN,SAAS,CAAEkN,UAChB,EAAK1U,MAAMmV,OAAOT,IAEhBQ,GAAc,EAAKpO,MAAM6N,GAAIA,IAC/B,EAAKnN,SAAS,CAAEmN,OAEdO,GAAc,EAAKpO,MAAM8N,GAAIA,IAC/B,EAAKpN,SAAS,CAAEoN,QA/GO,EAmHnBQ,YAAc,SAACzV,GAKrB,GADgB,IAAbA,EAAE0V,QAAiC,OAAjBC,OAAOC,OAAgC,IAAb5V,EAAE0V,OACjD,CAIA,IAAM1R,EAAS,EAAK6R,YAAY7V,GAC1BrL,EAAQ,EAAKmhB,kBAAkB9R,EAAOpS,EAAGoS,EAAOnS,GAQtD,OAPA,EAAK2iB,OAAS7f,EAAM/C,EACpB,EAAK6iB,OAAS9f,EAAM9C,EAIpBga,SAASkK,iBAAiB,YAAa,EAAKC,aAC5CnK,SAASkK,iBAAiB,UAAW,EAAKE,YACnC,IArIkB,EAwInBD,YAAc,SAAChW,GACrB,IAAMgE,EAAS,EAAK6R,YAAY7V,GAC1BrL,EAAQ,EAAKmhB,kBAAkB9R,EAAOpS,EAAGoS,EAAOnS,GAChDqkB,EAAKvhB,EAAM/C,EAAI,EAAK4iB,OACpB7H,EAAKhY,EAAM9C,EAAI,EAAK4iB,OAE1B,EAAKD,OAAS7f,EAAM/C,EACpB,EAAK6iB,OAAS9f,EAAM9C,EAEpB,EAAKskB,eAAeD,EAAIvJ,IAjJC,EAoJnBsJ,UAAY,WAClB,EAAKG,wBArJoB,EAwJnBA,qBAAuB,WAC7BvK,SAASwK,oBAAoB,YAAa,EAAKL,aAC/CnK,SAASwK,oBAAoB,UAAW,EAAKJ,YA1JpB,EA6JnBK,QAAU,SAACtW,GAGjB,IAAMuW,EAAkBC,GAAmBxW,EAAEyW,QAE7C,GAAwB,IAApBF,EAAuB,CACzB,IAAMvS,EAAS,EAAK6R,YAAY7V,GAChC,EAAK0W,aAAa1S,EAAOpS,EAAGoS,EAAOnS,EAAG0kB,GACtCvW,EAAE2W,mBArKqB,EAyKnBC,UAAY,SAAC5W,GACnB,IAAIpO,EAAI,EACJC,EAAI,EACJglB,EAAI,EAiBR,GAhBkB,KAAd7W,EAAE8W,QACJjlB,EAAI,EACmB,KAAdmO,EAAE8W,QACXjlB,GAAK,EACkB,KAAdmO,EAAE8W,QACXllB,EAAI,EACmB,KAAdoO,EAAE8W,QACXllB,GAAK,EACkB,MAAdoO,EAAE8W,SAAiC,MAAd9W,EAAE8W,QAEhCD,EAAI,EACmB,MAAd7W,EAAE8W,SAAiC,MAAd9W,EAAE8W,UAEhCD,GAAK,GAGHjlB,GAAKC,EAAG,CACVmO,EAAE2W,iBACF3W,EAAE+W,kBAEF,IAAMC,EAAa,EAAKC,QAAQC,wBAE1BlT,EAAS9T,KAAKuB,IAAIulB,EAAW3kB,MAAO2kB,EAAW1kB,QAE/C4jB,EADiB,IACZlS,EAA0BpS,EAC/B+a,EAFiB,IAEZ3I,EAA0BnS,EAErC,EAAKskB,eAAeD,EAAIvJ,GAG1B,GAAIkK,EAAG,CACL,IAAMN,EAAkBC,GAAmBK,GACrCM,EAAY,EAAKF,QAAQC,wBAC/B,EAAKR,aACHS,EAAU9kB,MAAQ,EAClB8kB,EAAU7kB,OAAS,EACnBikB,KAjNqB,EAkYnBa,YAAc,WACpB,EAAKC,WAnYoB,EAsYnBA,QAAU,WAChB,GACE,EAAKhX,MAAMiX,eACX,EAAKjX,MAAMiX,cAAcC,SACzB,EAAKlX,MAAMiX,cAAcC,QAAQC,gBACjC,CACA,IAEMC,EAFqB,EAAKpX,MAAMiX,cAAcC,QACjDC,gBACcE,iBAAiB,GAC5B5C,EAAe2C,EAAKnlB,OACpBsiB,EAAc6C,EAAKplB,OAEvBkjB,GAAcT,EAAc,EAAK3N,MAAM2N,eACvCS,GAAcX,EAAa,EAAKzN,MAAMyN,eAEtC,EAAK/M,SAAS,CAAEiN,eAAcF,kBAnZlC,EAAKzN,MAAQ,CACX2N,aAAc,EACdF,YAAa,EACbG,MAAO1U,EAAM0U,MACbC,GAAI,EACJC,GAAI,GAPmB,E,sEAYzB,OACE,qBACE2B,UAAW7nB,KAAK6nB,UAChBxY,IAAKrP,KAAKsR,MAAMiX,cAChBhN,UAAS,iBAAYvb,KAAKoY,MAAM4N,MAAvB,mBAAuChmB,KAAKoY,MAAM4N,MAAlD,aACPhmB,KAAKoY,MAAM6N,GADJ,aAEJjmB,KAAKoY,MAAM8N,GAFP,MAIRlmB,KAAKsR,MAAMiC,Y,0CAQhB,GAFAqT,OAAOI,iBAAiB,SAAUhnB,KAAKqoB,aACvCroB,KAAKsoB,UAEHtoB,KAAKsR,MAAMiX,cAAcC,SACzBxoB,KAAKsR,MAAMiX,cAAcC,QAAQC,gBACjC,CACA,IAAM5L,EAAM7c,KAAKsR,MAAMiX,cAAcC,QAAQC,gBAC7C5L,EAAImK,iBAAiB,YAAahnB,KAAK0mB,aACvCkC,oBAAuB/L,EAAK7c,KAAKunB,SAAS,M,yCAIpB9O,GAEtBA,EAAUuN,QAAUhmB,KAAKsR,MAAM0U,OAC/BQ,GAAcxmB,KAAKsR,MAAM0U,MAAOhmB,KAAKoY,MAAM4N,QAE3ChmB,KAAK8Y,SAAS,CAAEkN,MAAOhmB,KAAKsR,MAAM0U,QAEpChmB,KAAK2lB,uB,6CAKL,GADAiB,OAAOU,oBAAoB,SAAUtnB,KAAKqoB,aAExCroB,KAAKsR,MAAMiX,cAAcC,SACzBxoB,KAAKsR,MAAMiX,cAAcC,QAAQC,gBACjC,CACA,IAAM5L,EAAM7c,KAAKsR,MAAMiX,cAAcC,QAAQC,gBAC7C5L,EAAIyK,oBAAoB,YAAatnB,KAAK0mB,aAC1CkC,uBAA0B/L,EAAK7c,KAAKunB,Y,6BA8JzB1kB,EAAWC,GACxB9C,KAAK8Y,SAAS,CACZmN,GAAIpjB,EACJqjB,GAAIpjB,IAGN9C,KAAK6oB,8B,6BAGQ1B,EAAYvJ,GACzB5d,KAAK8oB,OAAO9oB,KAAKoY,MAAM6N,GAAKkB,EAAInnB,KAAKoY,MAAM8N,GAAKtI,K,qCAG3BuJ,EAAYvJ,EAAYmL,GAC7C,OAAO/oB,KAAKgpB,OAAO7B,EAAIvJ,K,mCAGJ/a,EAAWC,EAAW0kB,GACzC,OAAOxnB,KAAKipB,YAAYpmB,EAAGC,EAAG0kB,K,kCAGZ0B,EAAiBC,EAAiBC,GACpD,GAAI1V,MAAMwV,IAAYxV,MAAMyV,IAAYzV,MAAM0V,GAC5C,MAAM,IAAIpgB,MAAM,+BAGlB,IAAMqgB,EAAWrpB,KAAKoY,MAAM4N,MAAQoD,EAEpC,GAAIC,EAAWrpB,KAAKqlB,QAAS,CAC3B,GAAIrlB,KAAKoY,MAAM4N,QAAUhmB,KAAKqlB,QAC5B,OAGF+D,EAAQppB,KAAKqlB,QAAUrlB,KAAKoY,MAAM4N,MAEpC,GAAIqD,EAAWrpB,KAAKslB,QAAS,CAC3B,GAAItlB,KAAKoY,MAAM4N,QAAUhmB,KAAKslB,QAC5B,OAGF8D,EAAQppB,KAAKslB,QAAUtlB,KAAKoY,MAAM4N,MAGpC,IAAMzkB,EAAOvB,KAAK+mB,kBAAkBmC,EAASC,GAE7CnpB,KAAK8Y,SAAS,CACZmN,GAAI1kB,EAAKsB,EAAIumB,GAAS7nB,EAAKsB,EAAI7C,KAAKoY,MAAM6N,IAC1CC,GAAI3kB,EAAKuB,EAAIsmB,GAAS7nB,EAAKuB,EAAI9C,KAAKoY,MAAM8N,MAG5ClmB,KAAK6oB,4BACL,IAAM7C,EAAQhmB,KAAKoY,MAAM4N,MAAQoD,EAC7B5C,GAAcxmB,KAAKoY,MAAM4N,MAAOA,IAClChmB,KAAK8Y,SAAS,CAAEkN,UAElBhmB,KAAKsR,MAAMmV,OAAOT,K,kDAIlB,IAAMsD,EAActpB,KAAKupB,iBAErBC,GAAW,EACTvB,EAAajoB,KAAKypB,gBAEpBC,EAAOJ,EAAY7lB,KAAOwkB,EAAWvkB,MA6BzC,OA5BIgmB,EAAO,IACT1pB,KAAK8Y,SAAS,CAAEmN,GAAIjmB,KAAKoY,MAAM6N,GAAKyD,IACpCF,GAAW,IAGbE,EAAOJ,EAAY5lB,MAAQukB,EAAWxkB,MAC3B,IACTzD,KAAK8Y,SAAS,CAAEmN,GAAIjmB,KAAKoY,MAAM6N,GAAKyD,IACpCF,GAAW,IAIbE,EAAOJ,EAAY9lB,IAAMykB,EAAWtkB,QACzB,IAKT3D,KAAK8Y,SAAS,CAAEoN,GAAIlmB,KAAKoY,MAAM8N,GAAKwD,IACpCF,GAAW,IAGbE,EAAOJ,EAAY3lB,OAASskB,EAAWzkB,KAC5B,IACTxD,KAAK8Y,SAAS,CAAEoN,GAAIlmB,KAAKoY,MAAM8N,GAAKwD,IACpCF,GAAW,GAGNA,I,sCAIP,IAAMlM,EAAgBtd,KAAKkoB,QAAQ3K,UAC7BoM,EAAU3pB,KAAK4pB,OAAOtM,EAAKza,EAAGya,EAAKxa,GAEzC,MAAO,CACLa,OAAQ2Z,EAAK/Z,OAASvD,KAAKoY,MAAM4N,MAAQ2D,EAAQ7mB,EACjDW,KAAMkmB,EAAQ9mB,EACda,MAAO4Z,EAAKha,MAAQtD,KAAKoY,MAAM4N,MAAQ2D,EAAQ9mB,EAC/CW,IAAKmmB,EAAQ7mB,K,6BAIFD,EAAWC,GACxB,MAAO,CACLD,EAAGA,EAAI7C,KAAKoY,MAAM4N,MAAQhmB,KAAKoY,MAAM6N,GACrCnjB,EAAGA,EAAI9C,KAAKoY,MAAM4N,MAAQhmB,KAAKoY,MAAM8N,M,uCAQvC,IAAMkC,EAAYpoB,KAAKkoB,QAAQC,wBACzB0B,EAAazB,EAAU9kB,MACvBwmB,EAAc1B,EAAU7kB,OAE9B,MAAO,CACLI,OAAmB,IAAXmmB,EACRrmB,KA5ViB,IA4VXomB,EACNnmB,MAAiB,IAAVmmB,EACPrmB,IA9ViB,IA8VZsmB,K,wCAIiBjnB,EAAWC,GACnC,IAAMinB,EAAY/pB,KAAKkoB,QAAQ8B,eAC/B,GAAID,EAAW,CACb,IAAME,EAAeF,EAAUhqB,EACzBmqB,EAAeH,EAAU9R,EACzBkS,EAAgBJ,EAAU9Y,EAC1BmZ,EAAgBL,EAAUM,EAChCrqB,KAAKwlB,gBAAkB,IAAI5iB,EACzBC,EAAIonB,EAAeE,EACnBrnB,EAAIonB,EAAeE,QAGrBpqB,KAAKwlB,gBAAkB,IAAI5iB,EAAMC,EAAGC,GAEtC,OAAO9C,KAAKwlB,kB,kCAGMvU,GAClB,IAAIqZ,EACAC,EAEEnC,EAAYpoB,KAAKkoB,QAAQC,wBAI/B,OAHAmC,EAAUrZ,EAAEiY,QAAUd,EAAU3kB,KAChC8mB,EAAUtZ,EAAEkY,QAAUf,EAAU5kB,IAEzB,IAAIZ,EAAM0nB,EAASC,K,8BAI1B,GACEvqB,KAAKsR,MAAMiX,cAAcC,SACzBxoB,KAAKsR,MAAMiX,cAAcC,QAAQC,gBAEjC,OAAOzoB,KAAKsR,MAAMiX,cAAcC,QAAQC,gBAExC,MAAM,IAAIvf,EACR,mE,GApYgCmR,iBAkalCmQ,GAAwB,KAEvB,SAAShE,GAAczmB,EAAWD,GACvC,OAAOqB,KAAKspB,IAAI1qB,EAAID,GAAK0qB,GAG3B,SAAS/C,GAAmBiD,GAC1B,IAAIlD,EAAkB,EAStB,OARIkD,EAAQ,EAEVlD,EAAkB,EAAIrC,GACbuF,EAAQ,IAEjBlD,EAAkB,EAAIrC,IAGjBqC,G,SE3bJ7D,O,uBAAAA,I,6BAAAA,I,uCAAAA,I,wBAAAA,Q,SAgBgBgH,G,YAYnB,WAAYrZ,GAAgB,IAAD,uBACzB,4CAAMA,KAHAsZ,iBAEmB,IAmJnBC,cAAgB,WACtB,EAAK/R,SAAS,CAAEqN,SAAUxC,GAASyC,eApJV,EAuJnB0E,aAAe,WACrB,EAAKhS,SAAS,CAAEqN,SAAUxC,GAAS0C,oBAxJV,EA2JnB0E,oBAAsB,WAC5B,EAAKjS,SAAS,CAAEqN,SAAUxC,GAAS2C,YA5JV,EAgKnB0E,SAAW,WFkQd,IAAgBhF,EEjQnB,EAAKlN,SAAS,CACZkN,OFgQiBA,EEhQH,EAAK5N,MAAM4N,MFiQtBA,GAAS,EAAIb,KEhQhBgB,SAAUxC,GAAS4C,YAnKI,EAwKnB0E,UAAY,WF8Pf,IAAiBjF,EE7PpB,EAAKlN,SAAS,CACZkN,OF4PkBA,EE5PH,EAAK5N,MAAM4N,MF6PvBA,GAAS,EAAIb,KE5PhBgB,SAAUxC,GAAS4C,YA3KI,EAgLnB/B,kBAAoB,WAC1B,EAAKqG,iBAjLoB,EAqLnBpE,OAAS,SAACT,GAEd,EAAK5N,MAAM4N,QAAUA,GACrB,EAAK5N,MAAM+N,WAAaxC,GAAS4C,UAEjC,EAAKzN,SAAS,CAAEkN,QAAOG,SAAUxC,GAAS4C,YAxL5C,IAAM2E,EAAMP,EAAqBQ,eAAe,EAAK7Z,MAAM8Z,iBAFlC,OAGzB,EAAKhT,MAAQ,CACX9P,KAAM4iB,EAAI5iB,KACVE,KAAM0iB,EAAI1iB,KACVC,KAAMyiB,EAAIziB,KACVE,KAAMuiB,EAAIviB,KACVqd,MAAO,EACPG,SAAUxC,GAASyC,aAErB,EAAKwE,YAAcvQ,cAXM,E,iFARE9N,GAC3B,OAAOA,EACHA,EAAI8e,sBACJ,CAAE/iB,KAAM,EAAGE,KAAM,EAAGC,KAAM,EAAGE,KAAM,O,8CAmBxB,IAAD,OACd,OAAI3I,KAAKsR,MAAM8Z,gBAEX,gCACE,uBACEnS,UAAU,oBACVzX,MAAO,CAAE8pB,SAAU,WAAY9nB,IAAK,EAAGE,MAAO,IAE9C,gBAAC6nB,EAAA,EAAD,CAAQpS,QAASnZ,KAAK+qB,qBACpB,qCAEF,gBAACQ,EAAA,EAAD,CAAQpS,QAASnZ,KAAK6qB,eACpB,gBAACW,GAAA,EAAD,CAAWC,MAAM,iBAEnB,gBAACF,EAAA,EAAD,CAAQpS,QAASnZ,KAAK8qB,cACpB,gBAACU,GAAA,EAAD,CAAWC,MAAM,uBAEnB,gBAACF,EAAA,EAAD,CAAQpS,QAASnZ,KAAKgrB,UACpB,gBAACQ,GAAA,EAAD,CAAWC,MAAM,aAEnB,gBAACF,EAAA,EAAD,CAAQpS,QAASnZ,KAAKirB,WACpB,gBAACO,GAAA,EAAD,CAAWC,MAAM,cAEnB,6BACG,MACoB,IAAnBzrB,KAAKoY,MAAM4N,OAAa0F,QAAQ,GAFpC,MAKF,gBAAC,GAAD,CACEvsB,IAAKa,KAAKsR,MAAM8Z,gBAAgB3hB,GAChCqR,YACE9a,KAAKsR,MAAM8Z,gBAAkBprB,KAAKsR,MAAM8Z,gBAAgB9pB,KAAO,GAEjEga,QAAStb,KAAKsb,WAEd,gBAAC,GAAD,CACEgJ,SAAUtkB,KAAKoY,MAAM9P,KAAOtI,KAAKoY,MAAM3P,MAAQ,EAC/C8b,SAAUvkB,KAAKoY,MAAM5P,KAAOxI,KAAKoY,MAAMzP,MAAQ,EAC/CsB,YAAajK,KAAKsR,MAAMrH,YACxB1F,WAAYvE,KAAK2rB,eACjB3hB,MAAOhK,KAAKsR,MAAMtH,MAClBwa,kBAAmBxkB,KAAKwkB,mBAExB,gBAAC,GAAD,CACElc,KAAMtI,KAAKoY,MAAM9P,KACjBE,KAAMxI,KAAKoY,MAAM5P,KACjBC,KAAMzI,KAAKoY,MAAM3P,KACjBE,KAAM3I,KAAKoY,MAAMzP,KACjB8d,OAAQzmB,KAAKymB,OACb8B,cAAevoB,KAAK4qB,YACpB5E,MAAOhmB,KAAKoY,MAAM4N,MAClBG,SAAUnmB,KAAKoY,MAAM+N,UAEpBnmB,KAAKsR,MAAMtH,MAAMpJ,KAAI,SAAAmO,GAAI,OACxBsL,gBC5EH,SAA2BxM,GACxC,IAAM+d,EAmHR,SAAqB/d,GACnB,IAAMyR,EAASzR,EAASD,iBACxB,OAAI0R,EACKA,EAAO3V,KAEPkE,EAASlE,KAxHHwV,CAAYtR,GAC3B,OAAQ+d,GACN,IAAK,cACL,IAAK,WACH,OAAO7J,GACT,IAAK,aACH,OAAOM,GACT,IAAK,2BACL,IAAK,wBACL,IAAK,0BACH,OAAOpC,GACT,IAAK,uBACH,OAAOT,GACT,IAAK,mBACL,IAAK,gBACL,IAAK,kBACH,OAAOyB,GACT,IAAK,sBACL,IAAK,mBACL,IAAK,qBACH,OAAOK,GACT,IAAK,yBACL,IAAK,sBACL,IAAK,wBACH,OAAOM,GACT,IAAK,uBACL,IAAK,oBACL,IAAK,sBACH,OAAOC,GACT,IAAK,qBACL,IAAK,kBACL,IAAK,oBACH,OAAOa,GACT,IAAK,qBACL,IAAK,kBACL,IAAK,oBACH,OAAOU,GACT,IAAK,gBACH,OAAOrD,GACT,IAAK,WACH,OAAOH,GACT,IAAK,aACH,OAAOE,GACT,IAAK,SACH,OAAOiB,GACT,IAAK,aACH,OAAOb,GACT,IAAK,OACH,OAAOsB,GACT,IAAK,UACH,OAAOc,GACT,IAAK,YACH,OAAOG,GACT,IAAK,cACH,OAAOS,GACT,IAAK,cACH,OAAOI,GACT,IAAK,iBACL,IAAK,aACH,OAAOnD,GACT,IAAK,eACH,OAAOH,GACT,IAAK,WACH,OAAOK,GACT,IAAK,cACH,OAAOC,GACT,IAAK,MACH,OAAOiB,GACT,IAAK,wBACL,IAAK,wBACL,IAAK,eACH,OAAOV,GACT,IAAK,SACH,OAAOH,GACT,IAAK,UACH,OAAO8B,GACT,IAAK,OACH,OAAOL,GACT,IAAK,sBACH,OAAOrB,GACT,IAAK,QACH,OAAOW,GACT,IAAK,WACH,OAAOE,GACT,IAAK,WACH,OAAOK,GACT,IAAK,UACH,OAAOC,GACT,IAAK,uBACL,IAAK,UACH,OAAOC,GACT,IAAK,OACH,OAAOK,GACT,IAAK,WACH,OAAOY,GACT,IAAK,iBACH,OAAOK,GACT,IAAK,gBACL,IAAK,OACH,OAAOpB,GACT,IAAK,UACH,OAAOY,GACT,IAAK,iBACH,OAAOC,GACT,IAAK,oBACH,OAAOM,GACT,IAAK,QACH,OAAOE,GACT,IAAK,cACH,OAAOC,GACT,QACE,MAAM,IAAIxa,EAAJ,oCAA4C0iB,KDpClBC,CAAkB9c,GAAO,CAC3C5P,IAAK4P,EAAKtF,GACVyP,UAAW,EAAK5H,MAAMwa,cACtB/S,SAAU,EAAKgT,eAAehd,GAC9BlB,SAAUkB,EACVlM,EAAGkM,EAAKlM,GAAKkM,EAAK9L,OAAOQ,KACzBX,EAAGiM,EAAKjM,GAAKiM,EAAK9L,OAAOO,SAG5BxD,KAAKsR,MAAMrH,YAAYrJ,KAAI,SAAA+M,GAAI,OAC9B,gBAAC,GAAD,CACEpJ,WAAY,EAAKonB,eACjBxsB,IAAKwO,EAAKlE,GACVnF,WAAYqJ,EACZuL,UAAW,EAAK5H,MAAMwa,cACtB/S,SAAU,EAAKgT,eAAepe,GAC9B+K,MAAO/K,EAAKjJ,eAAejB,KAC3BkV,MAAOhL,EAAKjJ,eAAelB,IAC3BoV,IAAKjL,EAAKhJ,eAAelB,KACzBoV,IAAKlL,EAAKhJ,eAAenB,aAUrC,uBACEyV,UAAU,YACVzX,MAAO,CAAEwqB,YAAa,MAAOC,aAAc,QAE3C,8CACA,yBACE,gBAACT,GAAA,EAAD,CAAWC,MAAM,eADnB,iD,2CAUN,IAAMP,EAAMP,EAAqBQ,eAAenrB,KAAKsR,MAAM8Z,kBAEzD5E,GAAcxmB,KAAKoY,MAAM9P,KAAM4iB,EAAI5iB,OACnCke,GAAcxmB,KAAKoY,MAAM5P,KAAM0iB,EAAI1iB,OACnCge,GAAcxmB,KAAKoY,MAAM3P,KAAMyiB,EAAIziB,OACnC+d,GAAcxmB,KAAKoY,MAAMzP,KAAMuiB,EAAIviB,QAEnC3I,KAAK8Y,SAAS,CACZxQ,KAAM4iB,EAAI5iB,KACVE,KAAM0iB,EAAI1iB,KACVC,KAAMyiB,EAAIziB,KACVE,KAAMuiB,EAAIviB,S,qCAMd,OACG3I,KAAKsR,MAAM8Z,iBACVprB,KAAKsR,MAAM8Z,gBAAgBzhB,OAAS1T,EAAYic,aAClD,I,qCAImBnD,GACrB,QAAkCrP,IAA9BM,KAAKsR,MAAM4a,eACb,OAAO,EAET,IAAMC,EAAcpd,EAAKnB,iBACzB,YAAoBlO,IAAhBysB,GAGGnsB,KAAKsR,MAAM4a,eAAeziB,KAAO0iB,EAAY1iB,K,gCA+CpD,OAAO,IAAI2iB,QACTpsB,KAAKoY,MAAM3P,KACXzI,KAAKoY,MAAMzP,KACX3I,KAAKoY,MAAM5P,KAAOxI,KAAKoY,MAAMzP,KAC7B3I,KAAKoY,MAAM9P,KAAOtI,KAAKoY,MAAM3P,U,GA/Me4R,iB,gDEhC7BgS,G,YACnB,WAAY/a,GAAgB,IAAD,8BACzB,4CAAMA,KA+BAgb,qBAAuB,WAC7B,EAAKxT,SAAS,CAAEyT,UAAW,EAAKnU,MAAMmU,YA/BtC,EAAKnU,MAAQ,CACXmU,cACoC7sB,IAAlC,EAAK4R,MAAMkb,oBAEP,EAAKlb,MAAMkb,oBANM,E,sEAWzB,IAAMC,EAAezsB,KAAKoY,MAAMmU,SAC5B,sBACA,yBACJ,OACE,uBAAKtT,UAAU,uBACZjZ,KAAK0sB,SACN,uBAAKjjB,GAAG,uBAAuBwP,UAAWwT,GACvCzsB,KAAKsR,MAAMiC,a,yCAMMkF,GACpBzY,KAAKsR,MAAMkb,qBAAuB/T,EAAU+T,oBAC9CxsB,KAAK8Y,SAAS,CACZyT,WAAUvsB,KAAKsR,MAAMkb,uB,+BAUzB,GAAIxsB,KAAKsR,MAAMob,OAAQ,CACrB,IAAMC,EAAc3sB,KAAKoY,MAAMmU,SAC3B,gCACA,8BACJ,OACE,uBAAKtT,UAAU,iBACb,sBAAIA,UAAU,eACXjZ,KAAKsR,MAAMob,OACZ,0BACEzT,UAAU,oCACVtP,KAAK,SACLijB,iBAAgB5sB,KAAKoY,MAAMmU,SAC3BpT,QAASnZ,KAAKssB,sBAEd,wBAAMrT,UAAW0T,EAAaE,cAAY,YAMpD,OAAO,S,GA1DwBxS,iBCDdyS,G,iLAEjB,IAAMC,EAAa/sB,KAAKsR,MAAMrR,KAAOD,KAAKsR,MAAMrR,IAAIc,OAAOC,OAAS,EAC9D8d,EAAQ9e,KAAKsR,MAAMob,QAAU,gBAC7BA,EAASK,EACbjO,EAEA,gCACGA,EADH,IACU,wBAAM7F,UAAU,SAAhB,WAGZ,OACE,gBAAC,GAAD,CAAOyT,OAAQA,EAAQF,oBAAqBO,GAC1C,gBAAC,KAAD,CACE9T,UAAU,gBACVhO,OAAQjL,KAAKsR,MAAMrR,KAAO,0B,GAfYoa,iBCC3B2S,G,2MAkBXlB,cAAgB,kBAAM,EAAKxa,MAAMwa,cAAc,EAAKxa,MAAM3G,S,wEAhBhE,IAAM2R,EAAOtc,KAAKsR,MAAMgL,KAAOtc,KAAKsR,MAAMgL,KAAOtc,KAAKsR,MAAM3G,OAAQrJ,KACpE,OAAItB,KAAKsR,MAAM3G,OAEX,qBACEsB,KAAMjM,KAAKsR,MAAM3G,OAAQsB,KACzBkN,QAASnZ,KAAK8rB,eAEb9rB,KAAKsR,MAAMiC,SACZ,wBAAM0F,UAAWjZ,KAAKsR,MAAM2b,WAAY3Q,SAI5C,M,GAdkCjC,iBCAnB6S,G,iLACF,IAAD,OACVC,EAAc,CAChB,sBAAIhuB,IAAI,eACN,sBAAIiuB,QAAS,GACX,qBAAGnU,UAAU,aAAb,kBAKFjZ,KAAKsR,MAAM9E,SAASxL,OAAS,IAC/BmsB,EAAcntB,KAAKsR,MAAM9E,SAAS6gB,KAAKC,IAAe1sB,KAAI,SAAAsJ,GACxD,OACE,sBAAI/K,IAAK+K,EAAQT,IACf,0BACE,gBAAC,GAAD,CACEkB,OAAQT,EACR4hB,cAAe,EAAKxa,MAAMic,kBAG9B,0BAAKrjB,EAAQP,WAKrB,IAAM6jB,EAAuC,IAA/BxtB,KAAKsR,MAAM9E,SAASxL,OAC5B0rB,EAAUc,EAGd,4CACW,wBAAMvU,UAAU,SAAhB,WAHX,WAMF,OACE,gBAAC,GAAD,CAAOyT,OAAQA,EAAQF,mBAAoBgB,GACzC,yBAAOvU,UAAU,kCACf,6BACE,sBAAI9Z,IAAI,mBACN,qCACA,oCAGJ,6BAAQguB,S,GA1CyB9S,iBAiDpC,SAASiT,GAAcvtB,EAAYD,GACxC,OAAIC,IAAMD,EACD,EAGLC,EAAE4J,OAAS7J,EAAE6J,KACR5J,EAAE4J,KAAK8jB,cAAc3tB,EAAE6J,MAEvB5J,EAAEuB,KAAKmsB,cAAc3tB,EAAEwB,M,ICpDbosB,G,iLAEjB,IAAM/iB,EAAS3K,KAAKsR,MAAM3G,OACpBrJ,EAAOqJ,EACXA,EAAOrJ,KAEP,wBAAM2X,UAAU,cAAhB,oBAEF,OACE,gBAAC,GAAD,KACE,yBAAOA,UAAU,SACf,6BACE,sBAAI9Z,IAAI,eACN,kCACA,0BAAKmC,IAENtB,KAAK2tB,qB,sCAQd,IAAMhjB,EAAS3K,KAAKsR,MAAM3G,OAC1B,OAAIA,aAAkByC,GACbpN,KAAK4tB,iBACHjjB,aAAkBqC,GACpBhN,KAAK6tB,sBACHljB,aAAkBqB,EACpBhM,KAAK8tB,iBAEL,K,uCAKT,IAAMtkB,EAAUxJ,KAAKsR,MAAM3G,OAC3B,OACE,sBAAIxL,IAAI,eACN,+CACA,0BAAKqK,EAAQukB,2B,0CAKSC,GAC1B,QAAiBtuB,IAAbsuB,EACF,MAAO,GAET,IAAM3e,EAAM2e,EACZ,OACE,gBAAC,GAAD,CACErjB,OAAQ0E,EACRyc,cAAe9rB,KAAKsR,MAAMwa,cAC1BxP,KAAI,UAAKjN,EAAI/N,KAAT,aAAkB+N,EAAI1F,KAAtB,S,4CAMR,IAAM0B,EAAerL,KAAKsR,MAAM3G,OAChC,OACE,gCACE,sBAAIxL,IAAI,qBACN,0CACA,0BAAKkM,EAAa1B,OAEpB,sBAAIxK,IAAI,uBACN,oCACA,0BAAKa,KAAKiuB,oBAAoB5iB,EAAauF,mBAE7C,sBAAIzR,IAAI,uBACN,oCACA,0BAAKa,KAAKiuB,oBAAoB5iB,EAAawF,sB,uCAOjD,IAAMlG,EAAS3K,KAAKsR,MAAM3G,OAC1B,OACE,sBAAIxL,IAAI,eACN,qCACA,0BAAKwL,EAAOhB,W,GArFuB0Q,iBCLtB6T,G,iLACF,IAAD,OACRC,EAAQnuB,KAAKsR,MAAM6c,MAAQnuB,KAAKsR,MAAM6c,MAAQ,GAChDC,EAAY,KAEdA,EADmB,IAAjBD,EAAMntB,OACI,CACV,sBAAI7B,IAAK,wBACP,sBAAIiuB,QAAS,GAAb,cAIQe,EAAMd,KAAKgB,IAAQztB,KAAI,SAAA0tB,GAAI,OACrC,sBAAInvB,IAAKmvB,EAAK/gB,MACZ,0BACE,gBAAC,GAAD,CACE5C,OAAQ2jB,EACRxC,cAAe,EAAKxa,MAAMwa,iBAG9B,0BAAKwC,EAAKtvB,eAKhB,IAAMwuB,EAAoC,IAA5BxtB,KAAKsR,MAAM6c,MAAMntB,OACzB0rB,EAAUc,EAGd,yCACQ,wBAAMvU,UAAU,SAAhB,WAHR,QAMF,OACE,gBAAC,GAAD,CAAOyT,OAAQA,EAAQF,mBAAoBgB,GACzC,yBAAOvU,UAAU,+BACf,6BACE,sBAAI9Z,IAAI,sBACN,kCACA,yCAGJ,6BAAQivB,S,GAzCsB/T,iBAgDjC,SAASgU,GAAOtuB,EAAYD,GACjC,OAAIC,IAAMD,EACD,EAEFyuB,GAAiBxuB,EAAEuB,KAAMxB,EAAEwB,MAG7B,SAASitB,GACdxuB,EACAD,GAEA,OAAIC,IAAMD,EACD,OAECJ,IAANK,OACQL,IAANI,EACK,GAEC,OAGAJ,IAANI,EACK,EAEAC,EAAE0tB,cAAc3tB,G,ICxER0uB,G,iLACF,IAAD,OACR1kB,EAAa9J,KAAKsR,MAAMxH,WAAa9J,KAAKsR,MAAMxH,WAAa,GAC/DskB,EAAY,KAEdA,EADwB,IAAtBtkB,EAAW9I,OACD,CACV,sBAAI7B,IAAK,iBACP,sBAAIiuB,QAAS,GAAb,mBAIQtjB,EAAWujB,KAAKoB,IAAe7tB,KAAI,SAAA8tB,GAAQ,OACrD,sBAAIvvB,IAAKuvB,EAASvvB,KAChB,0BAAKuvB,EAASvvB,KACd,0BAAK,EAAKD,MAAMwvB,EAASxvB,YAK/B,IAAMyvB,EAAmD,IAAjC3uB,KAAKsR,MAAMxH,WAAW9I,OACxC0rB,EAAUiC,EAGd,8CACa,wBAAM1V,UAAU,SAAhB,WAHb,aAMF,OACE,gBAAC,GAAD,CAAOyT,OAAQA,EAAQF,mBAAoBmC,GACzC,yBAAO1V,UAAU,SACf,6BACE,sBAAI9Z,IAAI,qBACN,sCACA,qCAGJ,yBAAOsK,GAAG,sBAAsB2kB,O,4BAM1BztB,GACZ,OAAIA,EACK,gBAAC,KAAD,CAAesY,UAAU,gBAAgBhO,OAAQtK,IAGnD,0C,GA/CkC0Z,iBAmDtC,SAASoU,GAAc1uB,EAAaD,GACzC,OAAIC,IAAMD,EACD,EAGLC,EAAEZ,MAAQW,EAAEX,IACPY,EAAEZ,IAAIsuB,cAAc3tB,EAAEX,KAEtBovB,GAAiBxuB,EAAEb,MAAOY,EAAEZ,O,IC3DlB0vB,G,iLACF,IAAD,OACRxiB,EAAgBpM,KAAKsR,MAAMlF,cAC7BpM,KAAKsR,MAAMlF,cACX,GACAgiB,EAAY,KAEdA,EAD2B,IAAzBhiB,EAAcpL,OACJ,CACV,sBAAI7B,IAAI,oBACN,sBAAIiuB,QAAS,GAAb,sBAIQhhB,EACT1L,QAAO,SAAAd,GAAC,YAAUF,IAANE,KACZc,QAAO,SAAAd,GAAC,OAAIA,aAAaoN,MACzBqgB,KAAKwB,IACLjuB,KAAI,SAAAyK,GAAY,OACf,sBAAIlM,IAAKkM,EAAa5B,IACpB,0BACE,gBAAC,GAAD,CACEkB,OAAQU,EACRygB,cAAe,EAAKxa,MAAMwa,cAC1BxP,KAAM,EAAKwS,iBAAiBzjB,MAGhC,0BAAK,EAAK4iB,oBAAoB5iB,EAAauF,kBAC3C,0BAAK,EAAKqd,oBAAoB5iB,EAAawF,sBAInD,IAAM2c,EAA4C,IAApCxtB,KAAKsR,MAAMlF,cAAcpL,OACjC0rB,EAAUc,EAGd,iDACgB,wBAAMvU,UAAU,SAAhB,WAHhB,gBAMF,OACE,gBAAC,GAAD,CAAOyT,OAAQA,EAAQF,mBAAoBgB,GACzC,yBAAOvU,UAAU,SACf,6BACE,sBAAI9Z,IAAI,wBACN,+CACA,oCACA,sCAGJ,yBAAOsK,GAAG,yBAAyB2kB,O,0CAMfJ,GAC1B,QAAiBtuB,IAAbsuB,EACF,MAAO,GAET,IAAM3e,EAAM2e,EACZ,OACE,gBAAC,GAAD,CACErjB,OAAQ0E,EACRyc,cAAe9rB,KAAKsR,MAAMwa,cAC1BxP,KAAI,UAAKjN,EAAI/N,KAAT,aAAkB+N,EAAI1F,KAAtB,S,uCAKe0C,GACvB,OAAIA,EAAI/K,MAAQ+K,EAAI/K,KAAKN,OAAS,EAC1B,GAAN,OAAUqL,EAAI/K,KAAd,aAAuB+K,EAAI1C,KAA3B,KAEK0C,EAAI1C,S,GAzEiC0Q,iBA6EzC,SAASwU,GAAO9uB,EAAYD,GACjC,OAAIC,IAAMD,EACD,EAGFC,EAAE4J,KAAK8jB,cAAc3tB,EAAE6J,M,ICvEXolB,G,iLAEjB,OACE,gCACE,gBAAC,GAAD,CACEpkB,OAAQ3K,KAAKsR,MAAM3G,OACnBmhB,cAAe9rB,KAAKsR,MAAMwa,gBAE5B,gBAAC,GAAD,CACE7rB,IAAKD,KAAKsR,MAAM3G,OAAS3K,KAAKsR,MAAM3G,OAAOjB,mBAAgBhK,IAE5DM,KAAK8J,aACL9J,KAAKwM,WACLxM,KAAKoM,gBACLpM,KAAKmuB,W,iCAMV,GAAInuB,KAAKsR,MAAM3G,kBAAkByC,GAAS,CACxC,IAAM5D,EAAUxJ,KAAKsR,MAAM3G,OAC3B,OACE,gBAAC,GAAD,CACE6B,SAAUhD,EAAQgD,WAClB+gB,eAAgBvtB,KAAKsR,MAAMwa,mB,sCAQjC,OACE9rB,KAAKsR,MAAM3G,kBAAkByC,IAC7BpN,KAAKsR,MAAM3G,kBAAkBqB,EAG3B,gBAAC,GAAD,CACEI,cAAgBpM,KAAKsR,MAClB3G,OAA6ByB,gBAChC0f,cAAe9rB,KAAKsR,MAAMwa,qBAI9B,I,8BAKF,GACE9rB,KAAKsR,MAAM3G,kBAAkByC,IAC7BpN,KAAKsR,MAAM3G,kBAAkBqB,GAC7BhM,KAAKsR,MAAM3G,kBAAkBqC,GAC7B,CACA,IAAMgiB,EAAchvB,KAAKsR,MAAM3G,OAC/B,OACE,gBAAC,GAAD,CACEwjB,MAAOa,EAAY1iB,WACnBwf,cAAe9rB,KAAKsR,MAAMwa,mB,mCAQhC,QAA0BpsB,IAAtBM,KAAKsR,MAAM3G,OAGf,OAAO,gBAAC,GAAD,CAAiBb,WAAY9J,KAAKsR,MAAM3G,OAAOb,YAAc,S,GAtEnCuQ,iB,kDCNhB4U,G,iLAEjB,OACE,gBAACC,GAAA,EAAD,CAAMC,YAAY,GAChB,gBAACC,GAAA,EAAD,KACE,gBAACC,GAAA,EAAD,CAAKC,eAAgBC,KAAcC,GAAI,GACrC,yBAAOvW,UAAU,cAAjB,UAEF,gBAACoW,GAAA,EAAD,CAAKG,GAAI,IACP,gBAACC,GAAA,EAAYC,OAAb,KACE,8BAAS1vB,KAAKsR,MAAMqe,cAIzB3vB,KAAK4vB,gB,mCAMV,OAAI5vB,KAAKsR,MAAMwJ,YAEX,gBAACsU,GAAA,EAAD,KACE,gBAACC,GAAA,EAAD,CAAKC,eAAgBC,KAAcC,GAAI,GACrC,yBAAOvW,UAAU,cAAjB,YAEF,gBAACoW,GAAA,EAAD,CAAKG,GAAI,IACP,gBAACC,GAAA,EAAYC,OAAb,KACE,8BAAS1vB,KAAKsR,MAAMwJ,aAAsB,IAC1C,iCAEG9a,KAAKsR,MAAMue,iBAFd,qBAUD,S,GAvC0BxV,a,8BCIlByV,G,2MA+CXC,gBAAkB,SAAClJ,GACzB,IAAMmJ,EAAUnJ,EAAM3b,OAAOhM,MACvB0Q,EAAQ,EAAK0B,MAAM2e,QAAQxjB,MAAK,SAAAyjB,GAAC,QAAKA,GAAIA,EAAEzmB,KAAOumB,KACzD,EAAK1e,MAAMye,gBAAgBngB,I,wEAhD3B,OACE,gBAAC,KAAD,CAAOugB,iBAAiB,GACtB,gBAAC,KAAMC,QAAP,KACE,gBAAC,KAAMC,MAAP,CAAaf,eAAe,KAAKgB,QAAQ,GAAzC,YAIF,gBAAC,KAAMC,SAAP,KACE,gBAAC,KAAMC,KAAP,KACE,gBAACtB,GAAA,EAAD,KACE,gBAACE,GAAA,EAAD,CAAWqB,UAAU,wBACnB,gBAACC,GAAA,EAAD,KACE,gBAACjB,GAAA,EAAD,CACEH,eAAe,SACfqB,YAAY,eACZC,aAAc5wB,KAAKsR,MAAMuf,cAAcvvB,KACvCwvB,SAAU9wB,KAAK+vB,iBAEd/vB,KAAKsR,MAAM2e,QAAQrvB,KAClB,SAAAsvB,GAAC,OACCA,EACE,0BAAQ/wB,IAAK+wB,EAAEzmB,GAAIvK,MAAOgxB,EAAEzmB,IACzBymB,EAAE5uB,WAGL5B,MAIR,gBAAC+vB,GAAA,EAAYsB,SAAb,MACA,gBAACL,GAAA,EAAWnF,OAAZ,CAAmBpS,QAASnZ,KAAKsR,MAAM0f,YACrC,gBAACzF,EAAA,EAAD,cAGJ,gBAAC0F,GAAA,EAAD,gE,GApCsB5W,iB,qECLjB6W,G,YACnB,WAAY5f,GAAgB,IAAD,8BACzB,4CAAMA,KAgLA6f,SAAW,SAAChS,EAA0B0H,GAC5C,IAAM9nB,EAAe,EAAKuS,MAAM1B,MAAM7Q,aAAa+R,SAASqO,GAC1D,EAAK7N,MAAM1B,MAAM7Q,aAAaiQ,OAAOmQ,GAAe,EAAK7N,MAAM1B,MAAM7Q,aAAagS,IAAIoO,GACxF,EAAK7N,MAAM8f,eACT,EAAK9f,MAAM1B,MAAMyhB,YAAY,CAAEtyB,eAAcQ,cAAeT,EAAyBC,OArL9D,EAuMnBuyB,iBAAmB,WACzB,EAAKxY,SAAS,CAACyY,iBAAkB,EAAKnZ,MAAMmZ,mBAtM5C,EAAKnZ,MAAQ,CACXmZ,iBAAiB,GAHM,E,sEAQzB,OACE,gBAACnC,GAAA,EAAD,KACE,gBAACG,GAAA,EAAD,2BAEG,KACD,gBAAC/D,GAAA,EAAD,CAAWC,MAAOzrB,KAAKoY,MAAMmZ,gBAAkB,cAAgB,gBAAiBpY,QAASnZ,KAAKsxB,oBAE/FtxB,KAAKoY,MAAMmZ,gBAAkB,KAC9B,yBAAO/vB,MAAO,CAACuY,SAAU,QACvB,6BACE,0BACE,2BACA,+CACA,sCACA,8CACA,0CAGJ,6BACE,sBAAIvY,MAAO,CAAC8L,WAAY,YACtB,sCACA,0BACItN,KAAKwxB,WAAWr7B,EAAYkB,WAEhC,0BACI2I,KAAKwxB,WAAWr7B,EAAYgB,WAAYhB,EAAYiB,iBAExD,2BACA,sBAAIq6B,QAAS,EAAGjwB,MAAO,CAAC8L,WAAY,YAChCtN,KAAKwxB,WACLr7B,EAAYwE,YACZxE,EAAYkE,OACZlE,EAAYgE,WACZhE,EAAYmE,KACZnE,EAAYqE,QACZrE,EAAYsE,UACZtE,EAAYuE,YACZvE,EAAYiE,WACZjE,EAAYoE,QACZpE,EAAYyE,SAIlB,sBAAI4G,MAAO,CAAC8L,WAAY,YACtB,sCACA,0BACItN,KAAKwxB,WACLr7B,EAAYmB,cACZnB,EAAY2B,aACZ3B,EAAYoB,sBACZpB,EAAYwB,oBAIhB,0BACIqI,KAAKwxB,WACLr7B,EAAY0B,gBACZ1B,EAAYsB,iBACZtB,EAAYuB,oBACZvB,EAAYqB,cACZrB,EAAY4B,kBAIhB,0BACIiI,KAAKwxB,WACLr7B,EAAYyB,eACZzB,EAAY6B,SACZ7B,EAAY+B,kBAKlB,sBAAIsJ,MAAO,CAAC8L,WAAY,YACtB,yCACA,0BACItN,KAAKwxB,WACLr7B,EAAYiC,qBACZjC,EAAYgC,yBACZhC,EAAYqC,uBAIhB,0BACIwH,KAAKwxB,WACLr7B,EAAYmC,oBACZnC,EAAYoC,uBACZpC,EAAYsC,mBACZtC,EAAYkC,iBACZlC,EAAYuC,qBAIhB,0BACIsH,KAAKwxB,WACLr7B,EAAYwC,cAKlB,sBAAI6I,MAAO,CAAC8L,WAAY,YACtB,wCACA,0BACItN,KAAKwxB,WACLr7B,EAAYiD,KACZjD,EAAY4C,OACZ5C,EAAYmD,eACZnD,EAAYoD,wBACZpD,EAAYwD,oBACZxD,EAAYkD,KACZlD,EAAY0C,uBAIhB,0BACImH,KAAKwxB,WACLr7B,EAAYsD,mBACZtD,EAAY0D,kBACZ1D,EAAYuD,sBACZvD,EAAYqD,gBACZrD,EAAY2D,oBAIhB,0BACIkG,KAAKwxB,WACLr7B,EAAYyD,iBACZzD,EAAYyC,YAKlB,sBAAI4I,MAAO,CAAC8L,WAAY,YACtB,sCACA,0BACItN,KAAKwxB,WACLr7B,EAAY6D,UACZ7D,EAAY8D,SACZ9D,EAAY4D,sBAIhB,2BACA,0BACIiG,KAAKwxB,WACLr7B,EAAY+D,YAKlB,sBAAIsH,MAAO,CAAC8L,WAAY,YACtB,2CAAkB,2BAAlB,IAA4B,2BAA5B,aACA,sBAAI8f,QAAS,GACTptB,KAAKwxB,WACLr7B,EAAY8E,YACZ9E,EAAY0E,YACZ1E,EAAY4E,oBACZ5E,EAAY6E,QACZ7E,EAAY2E,Y,mCAmBuB,IAAC,IAAD,0BAA7BiE,EAA6B,yBAA7BA,EAA6B,gBACjD,OAAOA,EAAa6B,KAAI,SAAAue,GACtB,OACE,gBAACuS,GAAA,EAAD,CACIvyB,IAAKggB,EACLwS,QAAS,EAAKrgB,MAAM1B,MAAM7Q,aAAa+R,SAASqO,GAChD2R,SAAU,EAAKK,SAAS/X,KAAK,EAAM+F,IAEpCA,U,GAlMoC9E,iBCL1BuX,G,2MAYXd,SAAW,SAACjK,GAClB,EAAKvV,MAAMwf,SAAS,EAAKxf,MAAMra,OAAQ,EAAKqa,MAAMqgB,U,wEAXlD,OACE,gBAACD,GAAA,EAAD,CACEC,QAAS3xB,KAAKsR,MAAMqgB,QACpBxY,QAASnZ,KAAK8wB,UAEb9wB,KAAKsR,MAAMra,W,GAPuBojB,iBCyCtBwX,G,YAUnB,WAAYvgB,GAAgB,IAAD,8BACzB,4CAAMA,KAVAwgB,YAAc,CACpBpN,SAAU,IACVqN,KAAM,CAAC,OAAQ,QACfnuB,SAAU,EACVouB,iBAAkB,GAClBC,YAAY,EACZC,UAAW,IAGc,EAyHnBC,mBAAqB,SAACtL,GAC5B,EAAKvV,MAAM8f,eACT,EAAK9f,MAAM1B,MAAMyhB,YAAY,CAAE/vB,KAAMulB,EAAM3b,OAAOhM,UA3H3B,EA+HnBkzB,mBAAqB,SAACvL,GAC5B,IAAMtnB,EAAgBsnB,EAAM3b,OAAOhM,MACnC,EAAKoS,MAAM8f,eACT,EAAK9f,MAAM1B,MAAMyhB,YAAY,CAC3BtyB,aAAcM,cAAiBC,EAAyBC,EAAe,EAAK+R,MAAM1B,MAAM7Q,eACxFQ,oBApIqB,EAyInB8yB,mBAAqB,SAACxL,GAC5B,EAAKvV,MAAM8f,eACT,EAAK9f,MAAM1B,MAAMyhB,YAAY,CAC3B5gB,UAAWrQ,OAAOC,SAASwmB,EAAM3b,OAAOhM,MAAO,QA5I1B,EAiJnBozB,qBAAuB,SAACr7B,EAAc06B,GAC5C,IAAItgB,EAEFA,EADEsgB,EACY,EAAKrgB,MAAM1B,MAAMyB,YAAYN,IAAI9Z,GAEjC,EAAKqa,MAAM1B,MAAMyB,YAAYkhB,OAAOt7B,GAEpD,EAAKqa,MAAM8f,eAAe,EAAK9f,MAAM1B,MAAMyhB,YAAY,CAAEhgB,kBAxJhC,EA+JnBmhB,WAAa,SAACtoB,EAAkB2c,GACtC,EAAKvV,MAAM8f,eACT,EAAK9f,MAAM1B,MAAMyhB,YAAY,CAC3B7kB,SAAU,EAAK8E,MAAM1B,MAAMpD,SAASuE,IAAI7G,OAlKnB,EAuKnBuoB,cAAgB,SAACvoB,EAAkB2c,GACzC,EAAKvV,MAAM8f,eACT,EAAK9f,MAAM1B,MAAMyhB,YAAY,CAC3B7kB,SAAU,EAAK8E,MAAM1B,MAAMpD,SAAS+lB,OAAOroB,OA1KtB,EAiMnBwoB,gBAAkB,SAAC7L,GACzB,EAAK/N,SAAS,CAAE6Z,OAAQ9L,EAAM3b,OAAOhM,QACrC,EAAK0zB,oBAnMoB,EA4NnBC,YAAc,WACpB,OAAOC,eAAc,EAAKxhB,MAAM1B,MAAMrG,MAAMiD,WA7NnB,EAgOnBumB,sBAAwB,WAC9B,EAAKja,SAAS,CAACka,sBAAuB,EAAK5a,MAAM4a,wBA/NjD,EAAK5a,MAAQ,CACXlH,kBAAmB,MACnB+hB,4BAA4B,EAC5BD,sBAAsB,EACtBE,QAASJ,iBACTH,OAAQ,IAPe,E,sEAWV,IAAD,OACd,OACE,gBAAC,KAAD,CAAOxC,iBAAiB,GACtB,gBAAC,KAAMC,QAAP,KACE,gBAAC,KAAMC,MAAP,CAAaf,eAAe,KAAKgB,QAAQ,GAAzC,iBAIF,gBAAC,KAAMC,SAAP,KACE,gBAAC,KAAMC,KAAP,KACE,gBAACtB,GAAA,EAAD,KACE,gBAACE,GAAA,EAAD,CAAWqB,UAAU,aACnB,gBAAClB,GAAA,EAAD,aACA,gBAACE,GAAA,EAAD,CACE9lB,KAAK,OACLzK,MAAOc,KAAKsR,MAAM1B,MAAMtO,KACxBqvB,YAAY,aACZG,SAAU9wB,KAAKmyB,sBAGnB,gBAAC/C,GAAA,EAAD,CAAWqB,UAAU,iBACnB,gBAAClB,GAAA,EAAD,kBACA,gBAACE,GAAA,EAAD,CACEH,eAAe,SACfwB,SAAU9wB,KAAKoyB,mBACflzB,MAAOc,KAAKsR,MAAM1B,MAAMrQ,eAEvB3C,EAAWgE,KAAI,SAAAD,GAAC,OAAIA,KAAG0sB,OAAOzsB,KAAI,SAAAD,GAAC,OAClC,0BAAQxB,IAAKwB,EAAGzB,MAAOyB,GACpBA,QAKT,gBAACyuB,GAAA,EAAD,CAAWqB,UAAU,eACnB,gBAAClB,GAAA,EAAD,oBAEG,KACD,gBAAC/D,GAAA,EAAD,CAAWC,MAAOzrB,KAAKoY,MAAM4a,qBAAuB,cAAgB,gBAAiB7Z,QAASnZ,KAAK+yB,yBAEpG/yB,KAAKoY,MAAM4a,qBAAuB,KACjC,gBAACG,GAAA,EAAD,CAAMC,OAAO,SACX,uBAAK5xB,MAAO,CAAC6xB,QAAS,IACnBt8B,EAAc6J,KAAI,SAAA3J,GAAK,OACrB,gBAAC,GAAD,CAAeA,MAAOA,EAAO06B,QAAS,EAAK2B,aAAar8B,GAAQ65B,SAAU,EAAKwB,6BAM1F,gBAAC,GAAD,CACE1iB,MAAO5P,KAAKsR,MAAM1B,MAClBwhB,eAAgBpxB,KAAKsR,MAAM8f,iBAE7B,gBAAChC,GAAA,EAAD,KACE,gBAACG,GAAA,EAAD,uBACA,gBAACE,GAAA,EAAD,CACE9lB,KAAK,SACLjH,IAAI,IACJxB,IAAI,MACJqyB,KAAK,IACLr0B,MAAOc,KAAKsR,MAAM1B,MAAMa,UACxBqgB,SAAU9wB,KAAKqyB,qBAEjB,gBAACpB,GAAA,EAAD,kDAEF,gBAAC7B,GAAA,EAAD,CAAWqB,UAAU,UACnB,gBAAClB,GAAA,EAAD,eACA,yBACE5lB,KAAK,OACLzK,MAAOc,KAAKoY,MAAMua,OAClB1Z,UAAU,eACVxP,GAAG,SACHknB,YAAY,SACZG,SAAU9wB,KAAK0yB,mBAGnB,gBAACtD,GAAA,EAAD,CAAWqB,UAAU,WACnB,gBAAClB,GAAA,EAAD,gBACU,gBAACiE,GAAA,EAAD,KAAQxzB,KAAKoY,MAAM8a,QAAQ3xB,OAErC,gBAACkyB,GAAA,EAAD,KACGzzB,KAAKoY,MAAM8a,QACTQ,MAAM,EAAGvyB,KAAKuB,IAAI,GAAI1C,KAAKoY,MAAM8a,QAAQ3xB,OACzCX,KACC,SAAA8L,GAAE,OACAA,EACE,gBAACinB,GAAA,EAAD,CAAex0B,IAAKuN,EAAGjD,IACrB,uBAAKwP,UAAU,cACZ,EAAK2a,iBAAiBlnB,IAEzB,wBAAMuM,UAAU,aAAavM,EAAG/C,MAC/B,KACA,wBAAMsP,UAAU,gBAAgBvM,EAAGpL,OAClC,wBAAM2X,UAAU,cAAhB,iBAIJvZ,a,mCA8CHzI,GACnB,OAAO+I,KAAKsR,MAAM1B,MAAMyB,YAAYP,SAAS7Z,K,uCAmBtByV,GAGvB,IAAMmnB,EAAa7zB,KAAKsR,MAAM1B,MAAMpD,SAAS8I,MAC3C,SAAArE,GAAC,QAAKA,GAAIA,EAAExH,KAAOiD,EAAGjD,MAElBgiB,EAAQoI,EAAa,SAAW,OAChC1a,EAAU0a,EACZ7zB,KAAKyyB,cAAcrZ,KAAKpZ,KAAM0M,GAC9B1M,KAAKwyB,WAAWpZ,KAAKpZ,KAAM0M,GACzBonB,EAAUD,EAAa,SAAW,UACxC,OACE,gBAACtI,EAAA,EAAD,CAAQ6H,OAAO,SAASU,QAASA,EAAS3a,QAASA,GACjD,gBAACqS,GAAA,EAAD,CAAWC,MAAOA,O,yCAWtB,QAAwB/rB,IAApBM,KAAKoY,MAAM2b,KAAoB,CACjC,IAAMC,EAAmBh0B,KAAKsR,MAAM1B,MAAM7Q,aACpCk1B,EAAuB50B,cAC3BW,KAAK6yB,cAAcnyB,QACjB,SAAAuQ,GAAC,QAAKA,GAAI+iB,EAAiB1e,MAAK,SAAA5D,GAAE,OAAIA,IAAOT,EAAEtH,YAGnD3J,KAAK8Y,SAAS,CACZkb,mBACAC,yBAEF,IAAMF,EAAO,IAAIG,KAAqCD,EAAqBlkB,OAAQ/P,KAAK8xB,aACxF9xB,KAAK8Y,SAAS,CAAEib,SAElB,IAAMb,EACJlzB,KAAKoY,MAAMua,OAAO3xB,OAAS,EACvB8xB,eAAe9yB,KAAKoY,MAAM2b,KAA8CpB,OAAO3yB,KAAKoY,MAAMua,SAC1FG,iBACN9yB,KAAK8Y,SAAS,CAAEoa,gB,GAnOqB7Y,iBC3BpByV,G,YACnB,WAAYxe,GAAgB,IAAD,uBACzB,4CAAMA,KAsCAye,gBAAkB,SAAClJ,GACzB,IAAMjX,EAAQiX,EAAM3b,OAAOhM,MAC3B,EAAK4Z,SAAS,CAAE+X,cAAejhB,KAzCN,EA4CnBohB,WAAa,WACnB,IAAMmD,EAAW,IAAIhjB,GAAM,EAAKG,MAAM/H,OACtC,EAAKuP,SAAS,CACZmX,QAAS,EAAK7X,MAAM6X,QAAQ1vB,KAAK4zB,GACjCtD,cAAesD,KAhDQ,EAoDnB/C,eAAiB,SAACxhB,GACxB,IAAMpG,EAAUoG,EAAMoC,MACtB,EAAK8G,SAAS,CACZ+X,cAAejhB,IAEjB,EAAK0B,MAAM8iB,iBAAiB5qB,IAvD5B,IAAMoG,EAAQ,IAAIuB,GAAM,EAAKG,MAAM/H,OAFV,OAGzB,EAAK6O,MAAQ,CACX7T,YAAY,EACZ0rB,QAAS6C,eAAK,CAACljB,IACfihB,cAAejhB,GANQ,E,gFAUD6I,EAAmB4b,GAC3C,GAAI5b,EAAUlP,QAAUvJ,KAAKsR,MAAM/H,MAAO,CACxC,IAAMqG,EAAQ,IAAIuB,GAAMnR,KAAKsR,MAAM/H,OACnCvJ,KAAK8Y,SAAS,CACZmX,QAAS6C,eAAK,CAACljB,IACfihB,cAAejhB,O,+BAMnB,OACE,gCACE,gBAAC,GAAD,CACEohB,WAAYhxB,KAAKgxB,WACjBjB,gBAAiB/vB,KAAK+vB,gBACtBE,QAASjwB,KAAKoY,MAAM6X,QACpBY,cAAe7wB,KAAKoY,MAAMyY,gBAE5B,gBAAC,GAAD,CACEtnB,MAAOvJ,KAAKsR,MAAM/H,MAClB6hB,gBAAiBprB,KAAKsR,MAAM8Z,gBAC5Bxb,MAAO5P,KAAKoY,MAAMyY,cAClBO,eAAgBpxB,KAAKoxB,sB,GAlCO/W,iBCTjBia,G,iLAEjB,OACE,0BACE,gBAAC,GAAD,CACE3pB,OAAQ3K,KAAKsR,MAAM3G,OACnBmhB,cAAe9rB,KAAKsR,MAAMijB,cAC1BjY,KAAI,UAAKtc,KAAKsR,MAAM3G,OAAOrJ,KAAvB,aAAgCtB,KAAKw0B,aAArC,U,mCAOV,IAAM7pB,EAAS3K,KAAKsR,MAAM3G,OACtB6pB,EAAa7pB,EAAOhB,KAQxB,OAPIgB,aAAkBqB,EACpBwoB,EAAa7pB,EAAOhB,MAAQ6qB,EACnB7pB,aAAkBqC,GAC3BwnB,EAAa7pB,EAAOhB,MAAQ6qB,EACnB7pB,aAAkByC,KAC3BonB,EAAa7pB,EAAO3L,WAAa,SAE5Bw1B,M,GAvB+Bna,iBCWrBoa,G,YAUnB,WAAYnjB,GAAgB,IAAD,8BACzB,4CAAMA,KAVAwgB,YAAc,CACpBpN,SAAU,IACVqN,KAAM,CAAC,OAAQ,OAAQ,gBAAiB,cACxCnuB,SAAU,EACVouB,iBAAkB,GAClBC,YAAY,EACZC,UAAW,IAGc,EA8DnBwC,YAAc,SAAC7N,GACrBA,EAAMe,iBACF,EAAKxP,MAAMua,OAAO3xB,OAAS,GAC7B,EAAK8X,SAAS,CACZoa,QAAS,EAAK9a,MAAM2b,KAAKpB,OAAO,EAAKva,MAAMua,WAlEtB,EAuEnBgC,aAAe,SAAC9N,GACtB,EAAK/N,SAAS,CAAE6Z,OAAQ9L,EAAM+N,cAAc11B,QACxC,EAAKkZ,MAAMua,OAAO3xB,OAAS,GAC7B,EAAK8X,SAAS,CACZoa,QAAS,EAAK9a,MAAM2b,KAAKpB,OAAO,EAAKva,MAAMua,WAxE/C,EAAKva,MAAQ,CACX2b,KAAM,IAAIG,KAAqC,EAAK5iB,MAAM/H,MAAMsrB,WAAY,EAAK/C,aACjFoB,QAAS,GACTP,OAAQ,EAAKrhB,MAAMwjB,YAAc,IANV,E,uFAUMC,GAC3B/0B,KAAKsR,MAAM/H,QAAUwrB,EAAUxrB,OACjCvJ,KAAK8Y,SAAS,CACZib,KAAM,IAAIG,KAAqCa,EAAUxrB,MAAMsrB,WAAY70B,KAAK8xB,iB,+BAKrE,IAAD,OACRkD,EACJh1B,KAAKoY,MAAM8a,QAAQlyB,OAAS,IAAM,IAAMhB,KAAKoY,MAAM8a,QAAQlyB,OACvDi0B,EAAY,GACdC,EAAc,SACM,OAApBl1B,KAAKoY,MAAM2b,OACbkB,EAAKE,SAAW,WAChBD,EAAc,WAEhB,IAAME,EAAcp1B,KAAKoY,MAAM8a,QAC5BQ,MAAM,EAAGsB,GACTp0B,KAAI,SAAAy0B,GAAM,OACT,kBAAC,GAAD,CACEl2B,IAAKk2B,EAAO5rB,GACZkB,OAAQ0qB,EACRd,cAAe,EAAKjjB,MAAMijB,mBAGhC,OACE,kBAAC,KAAD,KACE,kBAAC,KAAM/D,KAAP,KACE,kBAACtB,GAAA,EAAD,KACE,kBAACE,GAAA,EAAD,KACE,kBAACsB,GAAA,EAAD,KACE,kBAACjB,GAAA,EAAD,CACE9lB,KAAK,OACLgnB,YAAY,SACZC,aAAc5wB,KAAKoY,MAAMua,OACzB7B,SAAU9wB,KAAK20B,eAEjB,kBAACjE,GAAA,EAAWnF,OAAZ,KACE,kBAACA,EAAA,EAAD,eAAQpS,QAASnZ,KAAK00B,aAAiBO,GACpCC,MAKT,4BAAKE,U,GAjEsB/a,IAAMib,e,oBCbxBC,G,iLAEjB,OACE,sBACEp2B,IAAKa,KAAKsR,MAAM3G,OAAOlB,GACvBwP,UAAWjZ,KAAKw1B,kBAAkBx1B,KAAKsR,MAAM3G,SAE7C,gBAAC,GAAD,CACEA,OAAQ3K,KAAKsR,MAAM3G,OACnBmhB,cAAe9rB,KAAKsR,MAAMwa,cAC1BmB,UAAWjtB,KAAKw1B,kBAAkBx1B,KAAKsR,MAAM3G,SAE7C,wBACEsO,UAAU,8BACVzX,MAAOxB,KAAKy1B,sBAAsBz1B,KAAKsR,MAAM3G,UAPjD,W,4CAewBmC,GAC5B,OAAI9M,KAAKsR,MAAM4a,gBAAkBlsB,KAAKsR,MAAM4a,eAAeziB,KAAOqD,EAAKrD,GAC9D,CAAEoQ,MAAO,SAET,K,wCAIe/M,GACxB,OAAI9M,KAAKsR,MAAM4a,gBAAkBlsB,KAAKsR,MAAM4a,eAAeziB,KAAOqD,EAAKrD,GAC9D,aAEA,O,GAlCiC4Q,iBCUzBqb,G,YAInB,WAAYpkB,GAAgB,IAAD,8BACzB,4CAAMA,KA+CAojB,YAAc,SAAC7N,GACrBA,EAAMe,iBACN,EAAK9O,SAAS,CAAEyT,UAAW,EAAKnU,MAAMmU,YAhDtC,EAAKnU,MAAQ,CACXmU,UAAU,GAHa,E,sEAQzB,IAAMoJ,EAAI,UAAM31B,KAAKsR,MAAMskB,gBACrBC,EAAQ,WAAOF,GACrB,OACE,sBAAIx2B,IAAKa,KAAKsR,MAAMskB,eAAgBnsB,GAAIzJ,KAAKsR,MAAMskB,gBACjD,qBACE3c,UAAU,8BACV6c,KAAK,SACLC,cAAY,WACZ9pB,KAAM4pB,EACN1c,QAASnZ,KAAK00B,aAEd,wBACEzb,UACEjZ,KAAKoY,MAAMmU,SACP,mCACA,oCAXV,OAeGvsB,KAAKsR,MAAM0kB,kBAEd,sBACEvsB,GAAIksB,EACJ1c,UACEjZ,KAAKoY,MAAMmU,SACP,uCACA,+BAGN,gBAAC,GAAD,CACE5f,cAAe3M,KAAKsR,MAAM3E,cAC1BC,MAAO5M,KAAKsR,MAAM1E,MAClBkf,cAAe9rB,KAAKsR,MAAMwa,cAC1BI,eAAgBlsB,KAAKsR,MAAM4a,uB,GA7CO7R,iBCAzB4b,G,YA4BnB,WAAY3kB,GAAgB,IAAD,8BACzB,4CAAMA,KAbA4kB,oBAAsBC,cAE5B,SAAAxpB,GAAa,OAAIA,EAAc0gB,KAAK+I,OAYpC,EAAKhe,MAAQ,CACXie,aAAc,IAHS,E,2FAvBzB/kB,EACA8G,GAEA,IAAMie,EAAe/kB,EAAM1E,MAAMhM,KAAI,SAAAwH,GAAC,OAAIA,EAAEqB,MAC5C,OAAI2O,GAASke,aAAQD,EAAcje,EAAMie,cAChC,KAEA,CAAEA,oB,2DAwBXtB,EACAwB,GAEA,OACEv2B,KAAKsR,MAAM3E,gBAAkBooB,EAAUpoB,eACvC3M,KAAKsR,MAAM1E,QAAUmoB,EAAUnoB,OAC/B5M,KAAKsR,MAAM4a,iBAAmB6I,EAAU7I,iBAKtClsB,KAAKoY,MAAMie,aAAar1B,SAAWu1B,EAAUF,aAAar1B,SAItDs1B,aAAQt2B,KAAKoY,MAAMie,aAAcE,EAAUF,iB,+BAMpC,IAAD,OACd,OACE,sBAAIpd,UAAU,+BACXjZ,KAAKk2B,oBAAoBl2B,KAAKsR,MAAM3E,eAAe/L,KAClD,SAAAuT,GAAY,OACV,gBAAC,GAAD,CACEhV,IAAKgV,EAAa1K,GAClBusB,iBAAkB7hB,EAAa7S,KAC/Bs0B,eAAgBzhB,EAAa1K,GAC7BkD,cAAewH,EAAaxH,cAC5BC,MAAOuH,EAAakiB,eACpBvK,cAAe,EAAKxa,MAAMwa,cAC1BI,eAAgB,EAAK5a,MAAM4a,oBAIhClsB,KAAKsR,MAAM1E,MAAMygB,KAAK+I,IAAgBx1B,KAAI,SAAA+J,GAAM,OAC/C,gBAAC,GAAD,CACExL,IAAKwL,EAAOlB,GACZkB,OAAQA,EACRmhB,cAAe,EAAKxa,MAAMwa,cAC1BI,eAAgB,EAAK5a,MAAM4a,yB,GA9EU7R,aAsFjD,SAAS+b,GAAer2B,EAAYD,GAClC,QAAeJ,IAAXK,EAAEuB,WAAiC5B,IAAXI,EAAEwB,KAC5B,OAAO,EACF,QAAe5B,IAAXK,EAAEuB,KACX,OAAQ,EACH,QAAe5B,IAAXI,EAAEwB,KACX,OAAO,EAGT,IAAMk1B,EAAQz2B,EAAEuB,KACVm1B,EAAQ32B,EAAEwB,KAChB,OAAIk1B,EAAQC,GACF,EAEND,EAAQC,EACH,EAIF,E,ICrHGC,GAOAC,GCJSC,G,iLAEjB,OACE,gBAAC,KAAD,KACE,gBAAC,KAAMpG,KAAP,KACGxwB,KAAKsR,MAAM3E,cACV,gBAAC,GAAD,CACEA,cAAe3M,KAAKsR,MAAM3E,cAC1BC,MAAO5M,KAAKsR,MAAM1E,MAClBkf,cAAe9rB,KAAKsR,MAAMwa,cAC1BI,eAAgBlsB,KAAKsR,MAAM4a,sBAG7BxsB,Q,GAb0B2a,kB,SDH1Bqc,O,mCAAAA,I,qBAAAA,I,yBAAAA,I,wBAAAA,Q,cAOAC,O,qBAAAA,I,yBAAAA,I,kBAAAA,Q,SAsBSE,G,YACnB,WAAYvlB,GAAgB,IAAD,8BACzB,4CAAMA,KACD8G,MAAQ,CACX0e,kBAAkB,EAClBC,aAAcJ,GAAaK,QAJJ,E,sEASzB,OACE,uBACE/d,UAAU,qBACVzX,MAAO,CACLy1B,UAAU,GAAD,OAAKj3B,KAAKoY,MAAM2e,aAAhB,QAGX,uBAAK9d,UAAU,eACb,4BACA,gBAACsS,EAAA,EAAD,CAAQtS,UAAU,qBAAqBE,QAASnZ,KAAKk3B,kBAAkB9d,KAAKpZ,KAAM22B,GAAaQ,WAAYrD,QAAS9zB,KAAKo3B,WAAWT,GAAaQ,YAAY,gBAAC3L,GAAA,EAAD,CAAWC,MAAM,mBAC9K,gBAACF,EAAA,EAAD,CAAQtS,UAAU,qBAAqBE,QAASnZ,KAAKk3B,kBAAkB9d,KAAKpZ,KAAM22B,GAAaK,QAASlD,QAAS9zB,KAAKo3B,WAAWT,GAAaK,SAAS,gBAACxL,GAAA,EAAD,CAAWC,MAAM,uBACxK,gBAACF,EAAA,EAAD,CAAQtS,UAAU,qBAAqBE,QAASnZ,KAAKk3B,kBAAkB9d,KAAKpZ,KAAM22B,GAAaU,MAAOvD,QAAS9zB,KAAKo3B,WAAWT,GAAaU,OAAO,gBAAC7L,GAAA,EAAD,CAAWC,MAAM,qBAEpK,qBAAGxf,KAAK,uCAAuCgN,UAAU,SAAS6F,MAAM,UAAS,wBAAM7F,UAAU,cAAjG,YAEF,uBAAKA,UAAU,aACf,gBAAC,GAAD,CACE0W,UAAW3vB,KAAKsR,MAAM/H,MAAMjI,KAC5BwZ,YACE9a,KAAKsR,MAAM8Z,gBACPprB,KAAKsR,MAAM8Z,gBAAgB9pB,UAC3B5B,EAENmwB,iBACE7vB,KAAKsR,MAAM8Z,gBACPprB,KAAKsR,MAAM8Z,gBAAgB2C,4BAC3BruB,IAGR,gBAAC43B,GAAA,EAAD,CACE7tB,GAAG,yBACH8tB,WAAW,EACXC,iBAAkBd,GAAWe,eAC7BC,UAAW13B,KAAKsR,MAAMqmB,cACtBC,SAAU53B,KAAKsR,MAAMumB,eAErB,gBAACC,GAAA,EAAD,CAAKC,SAAUrB,GAAWe,eAAgB3Y,MAAM,SAC9C,gBAAC,GAAD,CACEnS,cAAe3M,KAAKsR,MAAM/H,MAAM4I,mBAAmBxF,cACnDC,MAAO5M,KAAKsR,MAAM/H,MAAM4I,mBAAmBkkB,eAC3CnK,eAAgBlsB,KAAKsR,MAAM8Z,gBAC3BU,cAAe9rB,KAAKsR,MAAM0mB,sBAG9B,gBAACF,GAAA,EAAD,CAAKC,SAAUrB,GAAW3H,QAASjQ,MAAM,QACvC,gBAAC,GAAD,CACEnU,OAAQ3K,KAAKsR,MAAM4a,eACnBJ,cAAe9rB,KAAKsR,MAAMwa,iBAG9B,gBAACgM,GAAA,EAAD,CAAKC,SAAUrB,GAAWjC,UAAW3V,MAAM,UACzC,gBAAC,GAAD,CACEvV,MAAOvJ,KAAKsR,MAAM/H,MAClBgrB,cAAev0B,KAAKsR,MAAMwa,iBAG9B,gBAACgM,GAAA,EAAD,CAAKC,SAAUrB,GAAWuB,SAAUnZ,MAAM,SACxC,gBAAC,GAAD,CACEvV,MAAOvJ,KAAKsR,MAAM/H,MAClB6hB,gBAAiBprB,KAAKsR,MAAM8Z,gBAC5BgJ,iBAAkBp0B,KAAKsR,MAAM8iB,yB,iCAStB9wB,GACjB,OAAQtD,KAAKoY,MAAM2e,eAAiBzzB,EAAQ,UAAY,O,wCAGhCA,GACpBtD,KAAKoY,MAAM2e,eAAiBzzB,GAC9BtD,KAAK8Y,SAAS,CAACie,aAAczzB,Q,GArFE+W,aELhB6d,G,YAInB,WAAY5mB,GAAgB,IAAD,uBACzB,4CAAMA,KA0JA6mB,iBAAmB,WACzB,EAAKrf,SAAS,CAAEsf,WAAO14B,KA5JE,EA0LnB24B,kBAAoB,WAC1B,EAAKvf,SAAS,CAAEwf,aAAS54B,KA3LA,EA8LnB64B,mBAAqB,SAC3B5tB,EACAkc,GAEA,IAAKlc,EAEH,MADA,EAAKmO,SAAS,CAAEsS,qBAAiB1rB,IAC3B,IAAIwJ,EAAW,yBAEvB,IAAMM,EAAUmB,EAChB,EAAKmO,SAAS,CACZsS,gBAAiB5hB,EACjB0iB,eAAgB1iB,IAEdA,GAAWA,EAAQC,IAAMD,EAAQC,GAAGzI,OAAS,IAC/C4lB,OAAOhjB,SAAS40B,KAAhB,WAA2BhvB,EAAQC,MA5MZ,EAgNnBgvB,cAAgB,SACtB9tB,EACAkc,GAEKlc,GAIL,EAAKmO,SAAS,CACZoT,eAAgBvhB,EAChBgtB,cAAejB,GAAW3H,UAExBpkB,aAAkByC,IACpB,EAAKmrB,mBAAmB5tB,IARxB,EAAKmO,SAAS,CAAEoT,oBAAgBxsB,KArNT,EAkOnBg5B,qBAAuB,SAACX,GAC9B,EAAKjf,SAAS,CAAE6e,cAAeI,KAjO/B,IAAMxuB,EAAQ,IAAI4E,GACZwqB,EACJrnB,EAAMqnB,mBAAqB/R,OAAOhjB,SAAS40B,KAAK3iB,QAAQ,KAAM,IAC1DuV,EAAkB7hB,EAAM0I,cAAc0mB,GACtCzM,EACJ3iB,EAAMsB,OAAOyG,EAAMsnB,mBAAqBxN,EAPjB,OAQzB,EAAKhT,MAAQ,CACX7O,QACA6hB,kBACAc,iBACAyL,cAAejB,GAAWe,eAC1BV,aAAc,KAbS,E,sEAkBzB,OACE,gCACG/2B,KAAK64B,gBACL74B,KAAK84B,cACN,uBAAK7f,UAAU,iBACb,gBAAC,GAAD,CACE+e,mBAAoBh4B,KAAKu4B,mBACzBzM,cAAe9rB,KAAKy4B,cACpBlvB,MAAOvJ,KAAKoY,MAAM7O,MAClB6qB,iBAAkBp0B,KAAKu4B,mBACvBV,cAAe73B,KAAK04B,qBACpBtN,gBAAiBprB,KAAKoY,MAAMgT,gBAC5Bc,eAAgBlsB,KAAKoY,MAAM8T,eAC3ByL,cAAe33B,KAAKoY,MAAMuf,gBAE5B,uBAAK1e,UAAU,0BACb,uBAAKA,UAAU,2BACb,gBAAC,GAAD,CACE9Z,IACEa,KAAKoY,MAAMgT,gBACPprB,KAAKoY,MAAMgT,gBAAgB3hB,GAC3B,uBAENyiB,eAAgBlsB,KAAKoY,MAAM8T,eAC3Bd,gBAAiBprB,KAAKoY,MAAMgT,gBAC5BphB,MACEhK,KAAKoY,MAAMgT,gBACPprB,KAAKoY,MAAMgT,gBAAgBphB,MAC3B,GAINC,YACEjK,KAAKoY,MAAMgT,gBACPprB,KAAKoY,MAAMgT,gBAAgBnhB,YAAYvJ,QACrC,SAAAiH,GAAC,OAAIA,EAAEiE,2BAA4BtC,KAErC,GAENwiB,cAAe9rB,KAAKy4B,cACpBM,eAAgB/4B,KAAKu4B,2B,0CASP,IAAD,OACnBS,EAAS,IAAIC,UACnBj5B,KAAK8Y,SAAS,CACZogB,UAAWC,KAAKC,MAChBC,cAAU35B,EACV45B,eAAW55B,EACX65B,gBAAY75B,EACZ85B,eAAW95B,EACX44B,QAAS,4BAEXmB,MAAMz5B,KAAKsR,MAAMooB,UACdC,MAAK,SAACC,GAAD,OAAwBA,EAAStd,UACtCqd,MACC,SAAC15B,GACC,EAAK6Y,SAAS,CACZugB,UAAWF,KAAKC,MAAS,EAAKhhB,MAAM8gB,WAAwB,IAC5DK,WAAYJ,KAAKC,MACjBd,QAAS,4BAEX,IACIuB,EADEC,EAAcd,EAAOe,gBAAgB95B,EAAK,mBAEhD,IACM65B,EAAYvmB,SAAS,GAAG0J,cAC1B4c,EC1HP,SAAetjB,GACpB,IAEIhN,EAFEywB,EAASzjB,EAAIhD,SAAS,GAAGX,WAAWC,aAAa,SACjDE,EAAKinB,EAAUA,EAAgB96B,WAAQQ,EAE7C,OAAQqT,GACN,IAAK,8CACL,IAAK,yCACH,MAAM,IAAI5J,EAAkB,uBAAwB4J,GACtD,QACExJ,GAAQ,IAAImO,IAAkBuiB,MAAM1jB,GAExC,OAAOhN,ED+GmB0wB,CAAMH,EAAYvmB,SAAS,GAAG0J,eAE5C,EAAKnE,SAAS,CACZsf,MAAO,sCAGX,MAAO8B,GACP,EAAKphB,SAAS,CACZsf,MAAO8B,IAGX,EAAKphB,SAAS,CACZwgB,UAAWH,KAAKC,MAChBI,WACGL,KAAKC,MAAS,EAAKhhB,MAAMmhB,YAAyB,IACrDjB,aAAS54B,IAEX,IAAMy6B,EAAkBN,GAAe,EAAKzhB,MAAM7O,MAC5C6hB,EAAkB+O,EAASloB,cAC/B,EAAKX,MAAMqnB,mBACT/R,OAAOhjB,SAAS40B,KAAK3iB,QAAQ,KAAM,KAEjCqW,EACJiO,EAAStvB,OAAO,EAAKyG,MAAMsnB,mBAC3BxN,GACA+O,EACF,EAAKrhB,SAAS,CACZvP,MAAOswB,GAAe,EAAKzhB,MAAM7O,MACjC6hB,kBACAc,sBAMJ,SAAAkM,GACE,EAAKtf,SAAS,CACZsf,QACAE,aAAS54B,S,sCAOjB,QAAyBA,IAArBM,KAAKoY,MAAMggB,MAAf,CAGA,GAAIp4B,KAAKoY,MAAMggB,iBAAiBgC,OAC9B,OAAOp6B,KAAKoY,MAAMggB,MAEpB,IAAM8B,EAAMl6B,KAAKoY,MAAMggB,MACjBiC,EAAY,UAAMH,EAAI54B,KAAV,aAAmB44B,EAAIrxB,SAEzC,OACE,gBAACyxB,EAAA,EAAD,CAAOxG,QAAQ,SAASyG,UAAWv6B,KAAKm4B,kBACtC,mDACA,6BAAKkC,EAAL,KACA,yBACE,gBAAC9O,EAAA,EAAD,CAAQpS,QAASnZ,KAAKm4B,kBAAtB,c,oCAWN,OACE,gBAACqC,EAAA,EAAD,CACEC,OAAMz6B,KAAKoY,MAAMkgB,QACjBoC,OAAQ16B,KAAKq4B,mBAEb,gBAACmC,EAAA,EAAMG,OAAP,KACE,gBAACH,EAAA,EAAMnK,MAAP,oBAEF,gBAACmK,EAAA,EAAMhK,KAAP,KACE,uBAAKvX,UAAU,YACb,uBACEA,UAAU,2CACV6c,KAAK,cACL8E,gBAAe,IACfC,gBAAe,EACfC,gBAAe,KAEd96B,KAAKoY,MAAMkgB,UAGhB,yBAAIt4B,KAAKoY,MAAMkgB,e,GAxLuBje,a,OEvB5B0gB,QACW,cAA7BnU,OAAOhjB,SAASo3B,UAEe,UAA7BpU,OAAOhjB,SAASo3B,UAEhBpU,OAAOhjB,SAASo3B,SAAS76B,MACvB,2DCTN86B,IAASC,OAGP,kBAAC,GAAD,CAAoBxB,SAAS,yCAC7B5c,SAASqe,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,iB","file":"static/js/main.fa5da65d.chunk.js","sourcesContent":["export enum AccessType {\n  Access,\n  Read,\n  Write,\n  ReadWrite\n}\n","export enum DiagramType {\n  ArchimateDiagramModel = \"ArchimateDiagramModel\",\n  SketchModel = \"SketchModel\",\n  ModelQuery = \"ModelQuery\"\n}\n","import { ElementType, ElementTypes } from \"./element-type\";\n\nexport enum Layer {\n  Strategy = \"Strategy\",\n  Business = \"Business\",\n  Application = \"Application\",\n  Technology = \"Technology\",\n  Physical = \"Physical\",\n  Motivation = \"Motivation\",\n  ImplementationAndMigration = \"Implementation And Migration\",\n  Connectors = \"Connectors\",\n  Other = \"Other\",\n  None = \"None\"\n}\n\nexport const Layers: Layer[] = [\n  Layer.Strategy,\n  Layer.Business,\n  Layer.Application,\n  Layer.Technology,\n  Layer.Physical,\n  Layer.Motivation,\n  Layer.ImplementationAndMigration,\n  Layer.Connectors,\n  Layer.Other,\n  Layer.None\n];\n\nexport const DisplayLayers: Layer[] = [\n  Layer.Strategy,\n  Layer.Business,\n  Layer.Application,\n  Layer.Technology,\n  Layer.Physical,\n  Layer.Motivation,\n  Layer.ImplementationAndMigration\n];\n\nexport function layerClassName(layer: Layer) {\n  switch (layer) {\n    case Layer.Strategy:\n      return \"archimate-strategy-background\";\n    case Layer.Business:\n      return \"archimate-business-background\";\n    case Layer.Application:\n      return \"archimate-application-background\";\n    case Layer.Technology:\n      return \"archimate-infrastructure-background\";\n    case Layer.Physical:\n      return \"archimate-physical-background\";\n    case Layer.Motivation:\n      return \"archimate-motivation-background\";\n    case Layer.ImplementationAndMigration:\n      return \"archimate-implementation-background\";\n    case Layer.Connectors:\n      return \"archimate-connectors-background\";\n    case Layer.Other:\n      return \"archimate-other-background\";\n    case Layer.None:\n    default:\n      return \"archimate-none-background\";\n  }\n}\n\nexport function layerElements(layer: Layer) {\n  switch (layer) {\n    case Layer.Strategy:\n      return [\n        ElementType.Capability,\n        ElementType.CourseOfAction,\n        ElementType.Resource\n      ];\n    case Layer.Business:\n      return [\n        ElementType.BusinessActor,\n        ElementType.BusinessCollaboration,\n        ElementType.BusinessEvent,\n        ElementType.BusinessFunction,\n        ElementType.BusinessInteraction,\n        ElementType.BusinessInterface,\n        ElementType.BusinessObject,\n        ElementType.BusinessProcess,\n        ElementType.BusinessRole,\n        ElementType.BusinessService,\n        ElementType.Contract,\n        ElementType.Product,\n        ElementType.Representation\n      ];\n    case Layer.Application:\n      return [\n        ElementType.ApplicationCollaboration,\n        ElementType.ApplicationComponent,\n        ElementType.ApplicationEvent,\n        ElementType.ApplicationFunction,\n        ElementType.ApplicationInteraction,\n        ElementType.ApplicationInterface,\n        ElementType.ApplicationProcess,\n        ElementType.ApplicationService,\n        ElementType.DataObject\n      ];\n    case Layer.Technology:\n      return [\n        ElementType.Artifact,\n        ElementType.CommunicationNetwork,\n        ElementType.CommunicationPath,\n        ElementType.Device,\n        ElementType.InfrastructureFunction,\n        ElementType.InfrastructureInterface,\n        ElementType.InfrastructureService,\n        ElementType.Network,\n        ElementType.Node,\n        ElementType.Path,\n        ElementType.SystemSoftware,\n        ElementType.TechnologyCollaboration,\n        ElementType.TechnologyEvent,\n        ElementType.TechnologyFunction,\n        ElementType.TechnologyInteraction,\n        ElementType.TechnologyInterface,\n        ElementType.TechnologyObject,\n        ElementType.TechnologyProcess,\n        ElementType.TechnologyService\n      ];\n    case Layer.Physical:\n      return [\n        ElementType.DistributionNetwork,\n        ElementType.Equipment,\n        ElementType.Facility,\n        ElementType.Material\n      ];\n    case Layer.Motivation:\n      return [\n        ElementType.Assessment,\n        ElementType.Constraint,\n        ElementType.Driver,\n        ElementType.Goal,\n        ElementType.Meaning,\n        ElementType.Outcome,\n        ElementType.Principle,\n        ElementType.Requirement,\n        ElementType.Stakeholder,\n        ElementType.Value\n      ];\n    case Layer.ImplementationAndMigration:\n      return [\n        ElementType.Deliverable,\n        ElementType.Gap,\n        ElementType.ImplementationEvent,\n        ElementType.Plateau,\n        ElementType.WorkPackage\n      ];\n    case Layer.Connectors:\n      return [\n        ElementType.AndJunction,\n        ElementType.Junction,\n        ElementType.OrJunction\n      ];\n    case Layer.Other:\n      return [ElementType.Location, ElementType.Grouping];\n    case Layer.None:\n    default:\n      return ElementTypes;\n  }\n}\n\nexport function elementTypeLayer(elementType: ElementType): Layer {\n  switch (elementType) {\n    case ElementType.Capability:\n    case ElementType.CourseOfAction:\n    case ElementType.Resource:\n      return Layer.Strategy;\n    case ElementType.BusinessActor:\n    case ElementType.BusinessCollaboration:\n    case ElementType.BusinessEvent:\n    case ElementType.BusinessFunction:\n    case ElementType.BusinessInteraction:\n    case ElementType.BusinessInterface:\n    case ElementType.BusinessObject:\n    case ElementType.BusinessProcess:\n    case ElementType.BusinessRole:\n    case ElementType.BusinessService:\n    case ElementType.Contract:\n    case ElementType.Product:\n    case ElementType.Representation:\n      return Layer.Business;\n    case ElementType.ApplicationCollaboration:\n    case ElementType.ApplicationComponent:\n    case ElementType.ApplicationEvent:\n    case ElementType.ApplicationFunction:\n    case ElementType.ApplicationInteraction:\n    case ElementType.ApplicationInterface:\n    case ElementType.ApplicationProcess:\n    case ElementType.ApplicationService:\n    case ElementType.DataObject:\n      return Layer.Application;\n    case ElementType.Artifact:\n    case ElementType.CommunicationNetwork:\n    case ElementType.CommunicationPath:\n    case ElementType.Device:\n    case ElementType.InfrastructureFunction:\n    case ElementType.InfrastructureInterface:\n    case ElementType.InfrastructureService:\n    case ElementType.Network:\n    case ElementType.Node:\n    case ElementType.Path:\n    case ElementType.SystemSoftware:\n    case ElementType.TechnologyCollaboration:\n    case ElementType.TechnologyEvent:\n    case ElementType.TechnologyFunction:\n    case ElementType.TechnologyInteraction:\n    case ElementType.TechnologyInterface:\n    case ElementType.TechnologyObject:\n    case ElementType.TechnologyProcess:\n    case ElementType.TechnologyService:\n      return Layer.Technology;\n    case ElementType.DistributionNetwork:\n    case ElementType.Equipment:\n    case ElementType.Facility:\n    case ElementType.Material:\n      return Layer.Physical;\n    case ElementType.Assessment:\n    case ElementType.Constraint:\n    case ElementType.Driver:\n    case ElementType.Goal:\n    case ElementType.Meaning:\n    case ElementType.Outcome:\n    case ElementType.Principle:\n    case ElementType.Requirement:\n    case ElementType.Stakeholder:\n    case ElementType.Value:\n      return Layer.Motivation;\n    case ElementType.Deliverable:\n    case ElementType.Gap:\n    case ElementType.ImplementationEvent:\n    case ElementType.Plateau:\n    case ElementType.WorkPackage:\n      return Layer.ImplementationAndMigration;\n    case ElementType.AndJunction:\n    case ElementType.Junction:\n    case ElementType.OrJunction:\n      return Layer.Connectors;\n    case ElementType.Location:\n    case ElementType.Grouping:\n      return Layer.Other;\n    default:\n      return Layer.None;\n  }\n}\n","import { Layer, layerElements } from \"./layers\";\n\nexport enum ElementType {\n  BusinessActor = \"BusinessActor\",\n  BusinessCollaboration = \"BusinessCollaboration\",\n  BusinessEvent = \"BusinessEvent\",\n  BusinessFunction = \"BusinessFunction\",\n  BusinessInteraction = \"BusinessInteraction\",\n  BusinessInterface = \"BusinessInterface\",\n  BusinessObject = \"BusinessObject\",\n  BusinessProcess = \"BusinessProcess\",\n  BusinessRole = \"BusinessRole\",\n  BusinessService = \"BusinessService\",\n  Contract = \"Contract\",\n  Location = \"Location\",\n  Product = \"Product\",\n  Representation = \"Representation\",\n  ApplicationCollaboration = \"ApplicationCollaboration\",\n  ApplicationComponent = \"ApplicationComponent\",\n  ApplicationEvent = \"ApplicationEvent\",\n  ApplicationFunction = \"ApplicationFunction\",\n  ApplicationInteraction = \"ApplicationInteraction\",\n  ApplicationInterface = \"ApplicationInterface\",\n  ApplicationProcess = \"ApplicationProcess\",\n  ApplicationService = \"ApplicationService\",\n  DataObject = \"DataObject\",\n  Artifact = \"Artifact\",\n  CommunicationNetwork = \"CommunicationNetwork\",\n  CommunicationPath = \"CommunicationPath\",\n  Device = \"Device\",\n  InfrastructureFunction = \"InfrastructureFunction\",\n  InfrastructureInterface = \"InfrastructureInterface\",\n  InfrastructureService = \"InfrastructureService\",\n  Network = \"Network\",\n  Node = \"Node\",\n  Path = \"Path\",\n  SystemSoftware = \"SystemSoftware\",\n  TechnologyCollaboration = \"TechnologyCollaboration\",\n  TechnologyEvent = \"TechnologyEvent\",\n  TechnologyFunction = \"TechnologyFunction\",\n  TechnologyInteraction = \"TechnologyInteraction\",\n  TechnologyInterface = \"TechnologyInterface\",\n  TechnologyObject = \"TechnologyObject\",\n  TechnologyProcess = \"TechnologyProcess\",\n  TechnologyService = \"TechnologyService\",\n  DistributionNetwork = \"DistributionNetwork\",\n  Equipment = \"Equipment\",\n  Facility = \"Facility\",\n  Material = \"Material\",\n  Assessment = \"Assessment\",\n  Constraint = \"Constraint\",\n  Driver = \"Driver\",\n  Goal = \"Goal\",\n  Meaning = \"Meaning\",\n  Outcome = \"Outcome\",\n  Principle = \"Principle\",\n  Requirement = \"Requirement\",\n  Stakeholder = \"Stakeholder\",\n  Value = \"Value\",\n  Deliverable = \"Deliverable\",\n  Gap = \"Gap\",\n  ImplementationEvent = \"ImplementationEvent\",\n  Plateau = \"Plateau\",\n  WorkPackage = \"WorkPackage\",\n  AndJunction = \"AndJunction\",\n  Junction = \"Junction\",\n  OrJunction = \"OrJunction\",\n  Capability = \"Capability\",\n  CourseOfAction = \"CourseOfAction\",\n  Resource = \"Resource\",\n  Grouping = \"Grouping\"\n}\n\nexport const ElementTypes: Readonly<ElementType[]> = [\n  ElementType.BusinessActor,\n  ElementType.BusinessCollaboration,\n  ElementType.BusinessEvent,\n  ElementType.BusinessFunction,\n  ElementType.BusinessInteraction,\n  ElementType.BusinessInterface,\n  ElementType.BusinessObject,\n  ElementType.BusinessProcess,\n  ElementType.BusinessRole,\n  ElementType.BusinessService,\n  ElementType.Contract,\n  ElementType.Location,\n  ElementType.Product,\n  ElementType.Representation,\n  ElementType.ApplicationCollaboration,\n  ElementType.ApplicationComponent,\n  ElementType.ApplicationEvent,\n  ElementType.ApplicationFunction,\n  ElementType.ApplicationInteraction,\n  ElementType.ApplicationInterface,\n  ElementType.ApplicationProcess,\n  ElementType.ApplicationService,\n  ElementType.DataObject,\n  ElementType.Artifact,\n  ElementType.CommunicationNetwork,\n  ElementType.CommunicationPath,\n  ElementType.Device,\n  ElementType.InfrastructureFunction,\n  ElementType.InfrastructureInterface,\n  ElementType.InfrastructureService,\n  ElementType.Network,\n  ElementType.Node,\n  ElementType.Path,\n  ElementType.SystemSoftware,\n  ElementType.TechnologyCollaboration,\n  ElementType.TechnologyEvent,\n  ElementType.TechnologyFunction,\n  ElementType.TechnologyInteraction,\n  ElementType.TechnologyInterface,\n  ElementType.TechnologyObject,\n  ElementType.TechnologyProcess,\n  ElementType.TechnologyService,\n  ElementType.DistributionNetwork,\n  ElementType.Equipment,\n  ElementType.Facility,\n  ElementType.Material,\n  ElementType.Assessment,\n  ElementType.Constraint,\n  ElementType.Driver,\n  ElementType.Goal,\n  ElementType.Meaning,\n  ElementType.Outcome,\n  ElementType.Principle,\n  ElementType.Requirement,\n  ElementType.Stakeholder,\n  ElementType.Value,\n  ElementType.Deliverable,\n  ElementType.Gap,\n  ElementType.ImplementationEvent,\n  ElementType.Plateau,\n  ElementType.WorkPackage,\n  ElementType.AndJunction,\n  ElementType.Junction,\n  ElementType.OrJunction,\n  ElementType.Capability,\n  ElementType.CourseOfAction,\n  ElementType.Resource,\n  ElementType.Grouping\n];\n\nexport const CoreElementTypes: Readonly<ElementType[]> = layerElements(\n  Layer.Business\n).concat(layerElements(Layer.Application), layerElements(Layer.Technology));\nexport const ConnectorElementTypes: Readonly<ElementType[]> = layerElements(\n  Layer.Connectors\n);\n","export enum RelationshipType {\n  Composition = \"CompositionRelationship\",\n  Aggregation = \"AggregationRelationship\",\n  Assignment = \"AssignmentRelationship\",\n  Realization = \"RealizationRelationship\",\n  Realisation = \"RealisationRelationship\",\n  Serving = \"ServingRelationship\",\n  UsedBy = \"UsedByRelationship\",\n  Access = \"AccessRelationship\",\n  Influence = \"InfluenceRelationship\",\n  Triggering = \"TriggeringRelationship\",\n  Flow = \"FlowRelationship\",\n  Specialization = \"SpecializationRelationship\",\n  Specialisation = \"SpecialisationRelationship\",\n  Association = \"AssociationRelationship\",\n  Junction = \"JunctionRelationship\",\n  AndJunction = \"AndJunctionRelationship\",\n  OrJunction = \"OrJunctionRelationship\"\n}\n\nexport const RelationshipTypes = [\n  RelationshipType.Composition,\n  RelationshipType.Aggregation,\n  RelationshipType.Assignment,\n  RelationshipType.Realization,\n  RelationshipType.Realisation,\n  RelationshipType.Serving,\n  RelationshipType.UsedBy,\n  RelationshipType.Access,\n  RelationshipType.Influence,\n  RelationshipType.Triggering,\n  RelationshipType.Flow,\n  RelationshipType.Specialization,\n  RelationshipType.Specialisation,\n  RelationshipType.Association,\n  RelationshipType.Junction,\n  RelationshipType.AndJunction,\n  RelationshipType.OrJunction\n];\n","import { is, Set } from \"immutable\";\nimport {\n  ConnectorElementTypes,\n  CoreElementTypes,\n  ElementType,\n  ElementTypes\n} from \"./element-type\";\n\nexport enum ViewpointType {\n  Total = \"Total\",\n  Introductory = \"Introductory\",\n  Organization = \"Organization\",\n  Application_platform = \"Application platform\",\n  Information_structure = \"Information structure\",\n  Technology = \"Technology\",\n  Layered = \"Layered\",\n  Physical = \"Physical\",\n  Product = \"Product\",\n  Application_usage = \"Application usage\",\n  Technology_usage = \"Technology usage\",\n  Business_process_cooperation = \"Business process cooperation\",\n  Application_cooperation = \"Application cooperation\",\n  Service_realization = \"Service realization\",\n  Implementation_and_deployment = \"Implementation and deployment\",\n  Goal_realization = \"Goal realization\",\n  Goal_contribution = \"Goal contribution\",\n  Principles = \"Principles\",\n  Requirements_realization = \"Requirements realization\",\n  Motivation = \"Motivation\",\n  Strategy = \"Strategy\",\n  Capability_map = \"Capability map\",\n  Outcome_realization = \"Outcome realization\",\n  Resource_map = \"Resource map\",\n  Project = \"Project\",\n  Migration = \"Migration\",\n  Implementation_and_migration = \"Implementation and migration\",\n  Stakeholder = \"Stakeholder\",\n  Actor_cooperation = \"Actor cooperation\",\n  Business_function = \"Business function\",\n  Business_process = \"Business process\",\n  Application_behavior = \"Application behavior\",\n  Application_structure = \"Application structure\",\n  Infrastructure = \"Infrastructure\",\n  Infrastructure_usage = \"Infrastructure usage\",\n  Landscape_map = \"Landscape map\",\n  Custom = \"Custom\"\n}\n\nexport const Viewpoints: Readonly<ViewpointType[]> = [\n  ViewpointType.Total,\n  ViewpointType.Introductory,\n  ViewpointType.Organization,\n  ViewpointType.Application_platform,\n  ViewpointType.Information_structure,\n  ViewpointType.Technology,\n  ViewpointType.Layered,\n  ViewpointType.Physical,\n  ViewpointType.Product,\n  ViewpointType.Application_usage,\n  ViewpointType.Technology_usage,\n  ViewpointType.Business_process_cooperation,\n  ViewpointType.Application_cooperation,\n  ViewpointType.Service_realization,\n  ViewpointType.Implementation_and_deployment,\n  ViewpointType.Goal_realization,\n  ViewpointType.Goal_contribution,\n  ViewpointType.Principles,\n  ViewpointType.Requirements_realization,\n  ViewpointType.Motivation,\n  ViewpointType.Strategy,\n  ViewpointType.Capability_map,\n  ViewpointType.Outcome_realization,\n  ViewpointType.Resource_map,\n  ViewpointType.Project,\n  ViewpointType.Migration,\n  ViewpointType.Implementation_and_migration,\n  ViewpointType.Stakeholder,\n  ViewpointType.Actor_cooperation,\n  ViewpointType.Business_function,\n  ViewpointType.Business_process,\n  ViewpointType.Application_behavior,\n  ViewpointType.Application_structure,\n  ViewpointType.Infrastructure,\n  ViewpointType.Infrastructure_usage,\n  ViewpointType.Landscape_map,\n  ViewpointType.Custom\n];\n\nexport const ViewpointTypeElementTypes = new Map<\n  ViewpointType,\n  Readonly<ElementType[]>\n>([\n  [\n    ViewpointType.Actor_cooperation,\n    ConnectorElementTypes.concat(\n      ElementType.ApplicationComponent,\n      ElementType.ApplicationInterface,\n      ElementType.ApplicationService,\n      ElementType.BusinessActor,\n      ElementType.BusinessCollaboration,\n      ElementType.BusinessInterface,\n      ElementType.BusinessRole,\n      ElementType.BusinessService\n    )\n  ],\n  [\n    ViewpointType.Application_behavior,\n    ConnectorElementTypes.concat(\n      ElementType.ApplicationCollaboration,\n      ElementType.ApplicationComponent,\n      ElementType.ApplicationFunction,\n      ElementType.ApplicationInteraction,\n      ElementType.ApplicationInterface,\n      ElementType.ApplicationService,\n      ElementType.DataObject\n    )\n  ],\n  [\n    ViewpointType.Application_cooperation,\n    ConnectorElementTypes.concat(\n      ElementType.ApplicationCollaboration,\n      ElementType.ApplicationComponent,\n      ElementType.ApplicationFunction,\n      ElementType.ApplicationInteraction,\n      ElementType.ApplicationInterface,\n      ElementType.ApplicationService,\n      ElementType.DataObject,\n      ElementType.Location\n    )\n  ],\n  [ViewpointType.Application_platform, CoreElementTypes],\n  [\n    ViewpointType.Application_structure,\n    ConnectorElementTypes.concat(\n      ElementType.ApplicationCollaboration,\n      ElementType.ApplicationComponent,\n      ElementType.ApplicationInterface,\n      ElementType.DataObject\n    )\n  ],\n  [\n    ViewpointType.Application_usage,\n    ConnectorElementTypes.concat(\n      ElementType.ApplicationCollaboration,\n      ElementType.ApplicationComponent,\n      ElementType.ApplicationInterface,\n      ElementType.ApplicationService,\n      ElementType.BusinessEvent,\n      ElementType.BusinessFunction,\n      ElementType.BusinessInteraction,\n      ElementType.BusinessObject,\n      ElementType.BusinessProcess,\n      ElementType.BusinessRole,\n      ElementType.DataObject\n    )\n  ],\n  [\n    ViewpointType.Business_function,\n    ConnectorElementTypes.concat(\n      ElementType.BusinessActor,\n      ElementType.BusinessFunction,\n      ElementType.BusinessRole\n    )\n  ],\n  [\n    ViewpointType.Business_process,\n    ConnectorElementTypes.concat(\n      ElementType.ApplicationService,\n      ElementType.BusinessActor,\n      ElementType.BusinessCollaboration,\n      ElementType.BusinessEvent,\n      ElementType.BusinessFunction,\n      ElementType.BusinessInteraction,\n      ElementType.BusinessObject,\n      ElementType.BusinessProcess,\n      ElementType.BusinessRole,\n      ElementType.BusinessService,\n      ElementType.Location,\n      ElementType.Representation\n    )\n  ],\n  [\n    ViewpointType.Business_process_cooperation,\n    ConnectorElementTypes.concat(\n      ElementType.ApplicationCollaboration,\n      ElementType.ApplicationComponent,\n      ElementType.ApplicationEvent,\n      ElementType.ApplicationFunction,\n      ElementType.ApplicationInteraction,\n      ElementType.ApplicationInterface,\n      ElementType.ApplicationProcess,\n      ElementType.ApplicationService,\n      ElementType.BusinessActor,\n      ElementType.BusinessCollaboration,\n      ElementType.BusinessEvent,\n      ElementType.BusinessFunction,\n      ElementType.BusinessInteraction,\n      ElementType.BusinessInterface,\n      ElementType.BusinessObject,\n      ElementType.BusinessProcess,\n      ElementType.BusinessRole,\n      ElementType.BusinessService,\n      ElementType.DataObject,\n      ElementType.Location,\n      ElementType.Representation\n    )\n  ],\n  [ViewpointType.Capability_map, CoreElementTypes],\n  [\n    ViewpointType.Goal_contribution,\n    [\n      ElementType.Constraint,\n      ElementType.Goal,\n      ElementType.Principle,\n      ElementType.Requirement\n    ]\n  ],\n  [\n    ViewpointType.Goal_realization,\n    [\n      ElementType.Constraint,\n      ElementType.Goal,\n      ElementType.Principle,\n      ElementType.Requirement\n    ]\n  ],\n  [\n    ViewpointType.Implementation_and_deployment,\n    ConnectorElementTypes.concat(\n      ElementType.ApplicationCollaboration,\n      ElementType.ApplicationComponent,\n      ElementType.Artifact,\n      ElementType.CommunicationPath,\n      ElementType.DataObject,\n      ElementType.Device,\n      ElementType.InfrastructureService,\n      ElementType.Network,\n      ElementType.Node,\n      ElementType.SystemSoftware\n    )\n  ],\n  [\n    ViewpointType.Implementation_and_migration,\n    CoreElementTypes.concat(\n      ConnectorElementTypes,\n      ElementType.Location,\n      ElementType.Requirement,\n      ElementType.Constraint,\n      ElementType.Goal,\n      ElementType.BusinessRole,\n      ElementType.WorkPackage,\n      ElementType.Deliverable,\n      ElementType.BusinessActor,\n      ElementType.Plateau,\n      ElementType.Gap\n    )\n  ],\n  [\n    ViewpointType.Information_structure,\n    ConnectorElementTypes.concat(\n      ElementType.Artifact,\n      ElementType.BusinessObject,\n      ElementType.DataObject,\n      ElementType.Meaning,\n      ElementType.Representation\n    )\n  ],\n  [\n    ViewpointType.Infrastructure_usage,\n    ConnectorElementTypes.concat(\n      ElementType.ApplicationComponent,\n      ElementType.ApplicationFunction,\n      ElementType.CommunicationPath,\n      ElementType.Device,\n      ElementType.InfrastructureFunction,\n      ElementType.InfrastructureInterface,\n      ElementType.InfrastructureService,\n      ElementType.Network,\n      ElementType.Node,\n      ElementType.SystemSoftware\n    )\n  ],\n  [\n    ViewpointType.Infrastructure,\n    ConnectorElementTypes.concat(\n      ElementType.Artifact,\n      ElementType.CommunicationPath,\n      ElementType.Device,\n      ElementType.InfrastructureFunction,\n      ElementType.InfrastructureInterface,\n      ElementType.InfrastructureService,\n      ElementType.Location,\n      ElementType.Network,\n      ElementType.Node,\n      ElementType.SystemSoftware\n    )\n  ],\n  [ViewpointType.Introductory, CoreElementTypes],\n  [ViewpointType.Landscape_map, ElementTypes.concat(ConnectorElementTypes)],\n  [ViewpointType.Layered, ElementTypes.concat(ConnectorElementTypes)],\n  [\n    ViewpointType.Migration,\n    ConnectorElementTypes.concat(ElementType.Gap, ElementType.Plateau)\n  ],\n  [\n    ViewpointType.Motivation,\n    [\n      ElementType.Assessment,\n      ElementType.Constraint,\n      ElementType.Driver,\n      ElementType.Goal,\n      ElementType.Principle,\n      ElementType.Requirement,\n      ElementType.Stakeholder\n    ]\n  ],\n  [\n    ViewpointType.Organization,\n    ConnectorElementTypes.concat(\n      ElementType.BusinessActor,\n      ElementType.BusinessCollaboration,\n      ElementType.BusinessInterface,\n      ElementType.BusinessRole,\n      ElementType.Location\n    )\n  ],\n  [ViewpointType.Outcome_realization, CoreElementTypes],\n  [ViewpointType.Physical, CoreElementTypes],\n  [ViewpointType.Principles, [ElementType.Goal, ElementType.Principle]],\n  [\n    ViewpointType.Product,\n    ConnectorElementTypes.concat(\n      ElementType.ApplicationComponent,\n      ElementType.ApplicationInterface,\n      ElementType.ApplicationService,\n      ElementType.BusinessActor,\n      ElementType.BusinessEvent,\n      ElementType.BusinessFunction,\n      ElementType.BusinessInteraction,\n      ElementType.BusinessInterface,\n      ElementType.BusinessProcess,\n      ElementType.BusinessRole,\n      ElementType.BusinessService,\n      ElementType.Contract,\n      ElementType.Product,\n      ElementType.Value\n    )\n  ],\n  [\n    ViewpointType.Project,\n    ConnectorElementTypes.concat(\n      ElementType.BusinessActor,\n      ElementType.BusinessRole,\n      ElementType.Deliverable,\n      ElementType.Goal,\n      ElementType.WorkPackage\n    )\n  ],\n  [\n    ViewpointType.Requirements_realization,\n    CoreElementTypes.concat(\n      ConnectorElementTypes,\n      ElementType.Constraint,\n      ElementType.Goal,\n      ElementType.Requirement\n    )\n  ],\n  [ViewpointType.Resource_map, CoreElementTypes],\n  [\n    ViewpointType.Service_realization,\n    ConnectorElementTypes.concat(\n      ElementType.ApplicationCollaboration,\n      ElementType.ApplicationComponent,\n      ElementType.ApplicationService,\n      ElementType.BusinessActor,\n      ElementType.BusinessCollaboration,\n      ElementType.BusinessEvent,\n      ElementType.BusinessFunction,\n      ElementType.BusinessInteraction,\n      ElementType.BusinessObject,\n      ElementType.BusinessProcess,\n      ElementType.BusinessRole,\n      ElementType.BusinessService,\n      ElementType.DataObject\n    )\n  ],\n  [\n    ViewpointType.Stakeholder,\n    [\n      ElementType.Assessment,\n      ElementType.Driver,\n      ElementType.Goal,\n      ElementType.Stakeholder\n    ]\n  ],\n  [ViewpointType.Strategy, CoreElementTypes],\n  [ViewpointType.Technology_usage, CoreElementTypes],\n  [ViewpointType.Technology, CoreElementTypes],\n  [ViewpointType.Total, ElementTypes]\n]);\n\nexport function viewpointForElementTypes(\n  elementTypes: Set<ElementType>\n): ViewpointType {\n  let viewpoint = ViewpointType.Custom;\n  ViewpointTypeElementTypes.forEach(\n    (value: Readonly<ElementType[]>, key: ViewpointType) => {\n      if (is(elementTypes, Set<ElementType>(value))) {\n        viewpoint = key;\n      }\n    }\n  );\n  return viewpoint;\n}\n\nexport function elementTypesForViewpoint(\n  viewpointType: ViewpointType,\n  currentElementTypes: Set<ElementType>\n): Set<ElementType> {\n  if (viewpointType === ViewpointType.Custom) {\n    return currentElementTypes;\n  } else {\n    const elementTypes = ViewpointTypeElementTypes.get(viewpointType);\n    if (elementTypes === undefined) {\n      return currentElementTypes;\n    } else {\n      return Set<ElementType>(elementTypes);\n    }\n  }\n}\n","// RGBColorType in the XSD\n// RGB Color type.\n// The r, g, b attributes range from 0 - 255.\n// The a (alpha) transparency attribute is optional. 0 = full transparency, 100 = opaque.\nexport class Color {\n  // Parses a CSS style color string into a color object\n  // this.param str [String] CSS color string\n  // this.return [Color]\n  public static rgba(str: string | undefined): Color | undefined {\n    if (!str) {\n      return undefined;\n    }\n    const md = str.match(/#([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})?/);\n    if (!md) {\n      return undefined;\n    }\n    return new Color(\n      Number.parseInt(md[1], 16),\n      Number.parseInt(md[2], 16),\n      Number.parseInt(md[3], 16),\n      md[4] ? (Number.parseInt(md[4], 16) / 256.0) * 100.0 : 100\n    );\n  }\n\n  // Results in a Color instance for the color black\n  // this.return [Color]\n  public static black() {\n    return new Color(0, 0, 0, 100);\n  }\n\n  public r: number;\n  public g: number;\n  public b: number;\n  public a?: number;\n\n  constructor(r: number, g: number, b: number, a?: number) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  public toString(): string {\n    return `Color(r: ${this.r}, g: ${this.g}, b: ${this.b}, a: ${this.a})`;\n  }\n\n  public toRGBA(): string {\n    const vals: number[] = [this.r, this.g, this.b];\n    if (this.a) {\n      vals.push(this.scaledAlpha());\n    }\n    const vs = vals\n      .filter(v => v !== undefined)\n      .map<number>(v => v as number)\n      .map(v => v.toString(16))\n      .map(s => s.trim())\n      .map(s => (s.length === 1 ? `0${s}` : s))\n      .join(\"\");\n\n    return `#${vs}`;\n    // return `#${vs[0]}${vs[1]}${vs[2]}${vs[3]}`;\n    // if ((this.a === undefined) || (this.a === 100)) {\n    //   return ``\n    //   return format(\"#%02x%02x%02x\", this.r, this.g, this.b);\n    // } else {\n    //   return format(\"#%02x%02x%02x%02x\", this.r, this.g, this.b, this.scaledAlpha())\n    // }\n  }\n\n  private scaledAlpha(max: number = 255) {\n    if (!this.a) {\n      return max;\n    }\n    return Math.round(max * (this.a / 100.0));\n  }\n}\n","export class Font {\n  // Archi font strings look like this:\n  //  \"1|Arial            |14.0|0|WINDOWS|1|0  |0|0|0|0  |0 |0|0|1|0|0|0|0 |Arial\"\n  //  \"1|Arial            |8.0 |0|WINDOWS|1|0  |0|0|0|0  |0 |0|0|1|0|0|0|0 |Arial\"\n  //  \"1|Segoe UI Semibold|12.0|2|WINDOWS|1|-16|0|0|0|600|-1|0|0|0|3|2|1|34|Segoe UI Semibold\"\n  //  \"1|Times New Roman  |12.0|3|WINDOWS|1|-16|0|0|0|700|-1|0|0|0|3|2|1|18|Times New Roman\"\n  // this.todo move this to the archi file reader\n  public static archiFontString(str: string | undefined): Font | undefined {\n    if (!str) {\n      return undefined;\n    }\n    const fontParts = str.split(\"|\");\n    return new Font(\n      fontParts[1],\n      Number.parseFloat(fontParts[2]),\n      Number.parseInt(fontParts[3], 10),\n      str\n    );\n  }\n\n  public name?: string;\n  public size?: number;\n  // this.todo make this an enum\n  public style?: number;\n  public fontData?: string;\n\n  constructor(name?: string, size?: number, style?: number, fontData?: string) {\n    if (name) {\n      this.name = name;\n    }\n    if (size) {\n      this.size = size;\n    }\n    if (style) {\n      this.style = style;\n    }\n    if (fontData) {\n      this.fontData = fontData;\n    }\n  }\n\n  public toString(): string {\n    return `Font(name: ${this.name}, size: ${this.size}, style: ${this.style})`;\n  }\n\n  public toArchiFont(): string {\n    return (\n      this.fontData ||\n      [\n        1,\n        this.name,\n        this.size,\n        this.style,\n        \"WINDOWS\",\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        this.name\n      ]\n        .map(v => `${v}`)\n        .join(\"|\")\n    );\n  }\n\n  // this.todo this isn't standard\n  // Move to file format\n  public styleString() {\n    switch (this.style) {\n      case 1:\n        return \"italic\";\n      case 2:\n        return \"bold\";\n      case 3:\n        return \"bold|italic\";\n      default:\n        return \"\";\n    }\n  }\n}\n","import { TextAlignProperty } from \"csstype\";\nimport { Color } from \"./color\";\nimport { Font } from \"./font\";\n\nexport class Style {\n  // @todo make this an enum\n  public textAlignment?: TextAlignProperty;\n  // @return [Color, NilClass]\n  public fillColor?: Color;\n  // @return [Color, NilClass]\n  public lineColor?: Color;\n  // @todo move this to font\n  // @return [Color, NilClass]\n  public fontColor?: Color;\n  // @return [Int, NilClass]\n  public lineWidth?: number;\n  // @return [Font, NilClass]\n  public font?: Font;\n  // @todo make this an enum\n  public textPosition?: number;\n\n  // TODO:\n  // public toString() {\n  //   const attr_name_vals = %i[textAlignment fillColor lineColor fontColor lineWidth\n  //                       font textPosition].map { |k| \"#{k}: #{send(k)}\" }.join(\", \")\n  //   \"Style(#{attr_name_vals})\"\n  // }\n\n  // public text_align() {\n  //   case textAlignment\n  //   when \"1\"\n  //     \"left\"\n  //   when \"2\"\n  //     \"center\"\n  //   when \"3\"\n  //     \"right\"\n  //   }\n  // }\n}\n","import { IRange } from \"./interfaces\";\n\nexport default class Range implements IRange {\n  public begin: number;\n  public end: number;\n\n  constructor(begin: number, end: number) {\n    this.begin = begin;\n    this.end = end;\n  }\n\n  public overlapMidpoint(r: Range): number | undefined {\n    const beginMax = Math.max(this.begin, r.begin);\n    const endMin = Math.min(this.end, r.end);\n    if (beginMax > endMin) {\n      return undefined;\n    }\n    return (beginMax + endMin) / 2.0;\n  }\n\n  public cover(n: number): boolean {\n    return this.begin <= n && n <= this.end;\n  }\n}\n","import { IBounds } from \"./interfaces\";\n\nexport class Point {\n  public x: number;\n  public y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  public equals(other: Point): boolean {\n    return this.x === other.x && this.y === other.y;\n  }\n\n  public subtract(other: Point): number {\n    return Math.sqrt((other.x - this.x) ** 2 + (other.y - this.y) ** 2);\n  }\n\n  public toString(): string {\n    return [this.x, this.y].map(v => v.toString()).join(\" \");\n  }\n\n  // Returns true if this location is inside the bounds argument\n  // @param bounds [Bounds]\n  public inside(bounds: IBounds): boolean {\n    if (bounds === undefined) {\n      return false;\n    }\n    return bounds.xRange().cover(this.x) && bounds.yRange().cover(this.y);\n  }\n}\n","import { IBounds, IPoint } from \"./interfaces\";\nimport { Point } from \"./point\";\nimport Range from \"./range\";\n\nexport class Bounds implements IBounds {\n  public static fromPoint(location: IPoint): Bounds {\n    return new Bounds(location.x, location.y, 0, 0);\n  }\n\n  public static zeroBounds(): Bounds {\n    return new Bounds(0, 0, 0, 0);\n  }\n\n  public readonly x?: number;\n  public readonly y?: number;\n  public readonly width: number;\n  public readonly height: number;\n  public readonly top: number;\n  public readonly left: number;\n  public readonly right: number;\n  public readonly bottom: number;\n\n  constructor(\n    x: number | undefined,\n    y: number | undefined,\n    width: number,\n    height: number\n  ) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.top = this.y || 0;\n    this.left = this.x || 0;\n    this.right = this.left + this.width;\n    this.bottom = this.top + this.height;\n  }\n\n  public offset(os: Bounds): Bounds {\n    return new Bounds(\n      this.left + os.left,\n      this.top + os.top,\n      this.width,\n      this.height\n    );\n  }\n\n  public toString() {\n    return `Bounds(x: ${this.x}, y: ${this.y}, width: ${this.width}, height: ${\n      this.height\n    })`;\n  }\n\n  public xRange() {\n    return new Range(this.left, this.right);\n  }\n\n  public yRange() {\n    return new Range(this.top, this.bottom);\n  }\n\n  public center(): Point {\n    // return new Bounds(this.left + this.width / 2.0, this.top + this.height / 2.0, 0, 0);\n    return new Point(\n      this.left + this.width / 2.0,\n      this.top + this.height / 2.0\n    );\n  }\n\n  public above(other: Bounds) {\n    return this.bottom < other.top;\n  }\n\n  public below(other: Bounds) {\n    return this.top > other.bottom;\n  }\n\n  public rightOf(other: Bounds) {\n    return this.left > other.right;\n  }\n\n  public leftOf(other: Bounds) {\n    return this.right < other.left;\n  }\n\n  public reducedBy(val: number) {\n    return new Bounds(\n      this.left + val,\n      this.top + val,\n      this.width - val * 2,\n      this.height - val * 2\n    );\n  }\n\n  // Tests if this bounds is inside the argument Bounds\n  public inside(other: Bounds) {\n    return (\n      this.left > other.left &&\n      this.right < other.right &&\n      this.top > other.top &&\n      this.bottom < other.bottom\n    );\n  }\n\n  public empty() {\n    return this.width === 0.0 && this.height === 0.0;\n  }\n}\n\nexport function zeroBounds() {\n  return new Bounds(0, 0, 0, 0);\n}\n","import { Point } from \"./point\";\n\nexport class Segment {\n  public a: Point;\n  public b: Point;\n\n  constructor(a: Point, b: Point) {\n    this.a = a;\n    this.b = b;\n  }\n\n  public length(): number {\n    return this.b.subtract(this.a);\n  }\n\n  public fromEnd(dist: number): Point {\n    const length = this.b.subtract(this.a);\n    return this.fromStart(length - dist);\n  }\n\n  public fromStart(dist: number): Point {\n    const length = this.b.subtract(this.a);\n    if (dist < 0) {\n      return this.a;\n    }\n    if (length < dist) {\n      return this.b;\n    }\n    return this.pointAtPercent(dist / length);\n  }\n\n  public pointAtPercent(pct: number): Point {\n    return new Point(\n      this.a.x + (this.b.x - this.a.x) * pct,\n      this.a.y + (this.b.y - this.a.y) * pct\n    );\n  }\n}\n","import { Bounds, zeroBounds } from \"./bounds\";\nimport { Connection } from \"./connection\";\nimport { Point } from \"./point\";\nimport { Segment } from \"./segment\";\n\nconst LINE_CURVE_RADIUS = 5;\n\nexport class Path {\n  public connection: Connection;\n  public points: Point[];\n  public segments: Segment[];\n  public sourceBounds: Bounds;\n  public targetBounds: Bounds;\n  public autoLayout: boolean;\n  private dCmds?: any[];\n  private pathLength?: number;\n\n  constructor(connection: Connection, autoLayout?: boolean) {\n    this.connection = connection;\n    this.autoLayout = autoLayout || false;\n    this.sourceBounds = this.connection.sourceBounds() || zeroBounds();\n    this.targetBounds = this.connection.targetBounds() || zeroBounds();\n    this.points = this.calcPoints();\n    this.segments = this.calcSegments();\n  }\n\n  // New implementation of SVG d method for a set of points\n  // making smooth curves at each bendpoint\n  //\n  // Given three points: a, b, c\n  // The result should be:\n  // (a is already part of the path -> first point is a move_to command)\n  // line_to(segment(a-b) - curve_radius (from end))\n  // q_curve(b, segment(b-c) - curve_radius (from start))\n  //\n  // For cases with more bendpoints (with values d, e, ...)\n  // repeat the above section with c as the new a value (so then [c, d, e], [d, e, f], etc.)\n  // [move_to(points.first)]\n  // .concat(\n  //   points\n  //     .each_cons(3)\n  //     .flat_map { |a, b, c| curve_segment(a, b, c) }\n  // )\n  // .concat([line_to(points.last)])\n  // .join(\" \")\n  // So given a set of points [a, b] -> moveto a, lineto b\n  // and [a, b, c] -> moveto a, curvesegment a, b, c, lineto c\n  // and [a, b, c, d] -> moveto a, curvesegment a, b, c, curvesegment b, c, d, lineto d\n  public d(): string {\n    if (this.dCmds) {\n      return this.dCmds.join(\" \");\n    }\n    let bendpoints: string[][] = [];\n    if (!this.autoLayout) {\n      bendpoints = this.eachCons(this.points, 3).map(pts =>\n        this.curve_segment(pts[0], pts[1], pts[2])\n      );\n    }\n    const dCmds: string[] = ([] as string[]).concat(\n      this.move_to(this.points[0]), // Starting point (Source)\n      ...bendpoints,\n      this.line_to(this.points[this.points.length - 1]) // Ending point (Target)\n    );\n    this.dCmds = dCmds;\n\n    return dCmds.join(\" \");\n  }\n\n  // this.param fraction Float 0.0-1.0\n  // this.return Point at the given percent along line between start and end\n  public point(fraction: number): Point {\n    let lengthFromStart = this.length() * fraction;\n    const pt = this.segments.reduce(\n      (acc: Point | undefined, segment: Segment) => {\n        if (acc === undefined && segment.length() >= lengthFromStart) {\n          return segment.fromStart(lengthFromStart);\n        }\n        lengthFromStart -= segment.length();\n        return acc;\n      },\n      undefined\n    );\n    return pt ? (pt as Point) : new Point(0.0, 0.0);\n  }\n\n  // this.return Point mid-point on Path\n  public midpoint(): Point {\n    return this.point(0.5);\n  }\n\n  // Takes the bounds of two objects and returns the optimal points\n  // between from the edge of `a` to the edge of `b`\n  // if left/right range of both overlap, use centerpoint of overlap range as x val\n  // if top/bottom range of both overlap, use centerpoint of overlap range as y val\n  // this.param a [Bounds]\n  // this.param b [Bounds]\n  private boundsToPoints(a: Bounds, b: Bounds): Point[] {\n    const axRange = a.xRange();\n    const bxRange = b.xRange();\n    const overlapXCenter = axRange.overlapMidpoint(bxRange);\n\n    let ax: number;\n    let bx: number;\n    if (overlapXCenter) {\n      ax = bx = overlapXCenter;\n    } else if (b.rightOf(a)) {\n      ax = a.right;\n      bx = b.left;\n    } else {\n      ax = a.left;\n      bx = b.right;\n    }\n\n    const ayRange = a.yRange();\n    const byRange = b.yRange();\n\n    const overlapYCenter = ayRange.overlapMidpoint(byRange);\n\n    let ay: number;\n    let by: number;\n    if (overlapYCenter) {\n      ay = by = overlapYCenter;\n    } else if (b.above(a)) {\n      ay = a.top;\n      by = b.bottom;\n    } else {\n      ay = a.bottom;\n      by = b.top;\n    }\n\n    return [new Point(ax, ay), new Point(bx, by)];\n  }\n\n  private normalizedBendPoints(): Bounds[] {\n    return (\n      this.connection.bendpoints\n        // TODO: Remove bendpoints that are inside of the bounds of the source or target element\n        // .filter(bendpoint => {\n        //   return ![this.sourceBounds, this.targetBounds].some(bounds => bendpoint.inside(bounds));\n        // })\n        .map(bendpoint => Bounds.fromPoint(bendpoint))\n    );\n  }\n\n  private calcSegments(): Segment[] {\n    const segAryLen = this.points.length - 1;\n    const segs = new Array(segAryLen);\n    for (let idx = 0; idx < segs.length; ++idx) {\n      segs[idx] = new Segment(this.points[idx], this.points[idx + 1]);\n    }\n    return segs;\n  }\n\n  private calcPoints(): Point[] {\n    const boundsAry = new Array<Bounds>()\n      .concat(this.sourceBounds, this.normalizedBendPoints(), this.targetBounds)\n      .filter(b => b !== undefined);\n\n    // const points = this.boundsToPoints(bounds[0], bounds[1]);\n    let points: Point[] = [];\n    let a = boundsAry.shift() as Bounds;\n    while (boundsAry.length > 0) {\n      const b = boundsAry.shift() as Bounds;\n      points = points.concat(this.boundsToPoints(a, b));\n      a = b;\n    }\n    // JS doesn't do objects justice!!!\n    // This section just uses a Map to make sure the list of points is unique\n    const ptHash = new Map<string, Point>();\n    points.forEach(pt => ptHash.set(pt.toString(), pt));\n    return Array.from(ptHash.values());\n  }\n\n  // Returns the lengths of each segment of the line\n  private segmentLengths(): number[] {\n    return this.segments.map(s => s.length());\n  }\n\n  // this.return Float length of this path\n  private length(): number {\n    if (this.pathLength) {\n      return this.pathLength;\n    }\n    this.pathLength = this.segmentLengths().reduce(\n      (total, length) => total + length,\n      0\n    );\n    return this.pathLength;\n  }\n\n  private move_to(point: Point): string {\n    return `M ${point}`;\n  }\n\n  private line_to(point: Point): string {\n    return `L ${point}`;\n  }\n\n  private q_curve(cp: Point, pt: Point): string {\n    return `Q ${cp} ${pt}`;\n  }\n\n  private curve_segment(a: Point, b: Point, c: Point): string[] {\n    const pt1 = new Segment(a, b).fromEnd(LINE_CURVE_RADIUS);\n    const pt2 = new Segment(b, c).fromStart(LINE_CURVE_RADIUS);\n    return [this.line_to(pt1), this.q_curve(b, pt2)];\n  }\n\n  private eachCons(ary: Point[], cons: number): Point[][] {\n    const len = ary.length - cons + 1;\n    if (len < 1) {\n      return [];\n    }\n    const mappedAry = new Array(len);\n    for (let i = 0; i < len; ++i) {\n      mappedAry[i] = i;\n    }\n    return mappedAry.map(i => [ary[i], ary[i + 1], ary[i + 2]]);\n  }\n}\n","import * as d3force from \"d3-force\";\nimport { AccessType } from \"./access-type\";\nimport { Bounds } from \"./bounds\";\nimport { Point } from \"./point\";\nimport { RelationshipType } from \"./relationship-type\";\nimport { Style } from \"./style\";\n\nexport interface IPoint {\n  x: number;\n  y: number;\n\n  subtract(other: IPoint): number;\n  toString(): string;\n  inside(bounds: IBounds): boolean;\n}\n\nexport interface IExtents {\n  maxX: number;\n  maxY: number;\n  minX: number;\n  minY: number;\n}\n\nexport const InitExtents: IExtents = {\n  maxX: Number.MIN_SAFE_INTEGER,\n  maxY: Number.MIN_SAFE_INTEGER,\n  minX: Number.MAX_SAFE_INTEGER,\n  minY: Number.MAX_SAFE_INTEGER\n};\n\nexport interface IRange {\n  begin: number;\n  end: number;\n\n  overlapMidpoint(r: IRange): number | undefined;\n  cover(n: number): boolean;\n}\n\nexport interface IBounds {\n  x?: number;\n  y?: number;\n  width: number;\n  height: number;\n\n  xRange(): IRange;\n  yRange(): IRange;\n}\n\nexport interface IIdentifiable {\n  id: string;\n}\n\nexport interface IProperty {\n  key: string;\n  value?: string;\n}\n\nexport interface IHasProperties {\n  properties: IProperty[];\n}\n\nexport interface IEntity extends IIdentifiable, IHasProperties {\n  readonly id: string;\n  readonly name?: string;\n  readonly href?: string;\n  readonly documentation?: string;\n  readonly type: string; // Model, Element, Relationship, or View\n}\n\nexport interface IEntityRef {\n  entityInstance(): IEntity | undefined;\n}\n\nexport interface IRelationship extends IEntity {\n  type: RelationshipType;\n  source: string; // comparison_attr: :id, writable: true, default: nil\n  target: string; // comparison_attr: :id, writable: true, default: nil\n  accessType?: AccessType; // default: nil\n\n  sourceElement(): IEntity | undefined;\n  targetElement(): IEntity | undefined;\n}\n\nexport interface IHasRelationships {\n  relationships(): IRelationship[];\n}\n\nexport interface IElement extends IEntity, IHasRelationships {\n  href?: string;\n}\n\nexport interface IHasViews {\n  diagrams(): IDiagram[];\n}\n\nexport interface IViewConceptType extends IEntity {\n  style?: Style;\n  // @note viewRefs are pointers to 0-* Diagrams for diagram drill in defined in abstract View Concept\n  viewRefs?: string;\n\n  entityInstance(): IEntity | undefined;\n  extents(): IExtents;\n}\n\nexport interface IViewNode\n  extends IViewConceptType,\n    d3force.SimulationNodeDatum {\n  // @todo document where this comes from\n  content?: string;\n\n  // This is needed for various calculations\n  parent?: string;\n\n  // ArchiMate ViewNodeType Attributes\n\n  bounds?: Bounds;\n\n  // ArchiMate Container Attributes\n  // container doesn't distinguish between nodes and connections\n\n  // nodes: IViewNode[];\n  // connections: object[];\n\n  // Element\n  element?: string;\n  // Archi format, selects the shape of element (for elements that can have two or more shapes)\n  // A nil value indicates the standard representation, a value of \"1\" indicates the alternate\n  childType?: string;\n}\n\n/**\n * Data type for ArchiMate relationships\n */\nexport interface IConnection\n  extends IViewConceptType,\n    d3force.SimulationLinkDatum<IViewNode> {\n  sourceAttachment?: Point;\n  bendpoints: Point[];\n  targetAttachment?: Point;\n  source: string;\n  target: string;\n  relationship?: string;\n  properties: IProperty[];\n  // linkType: string;\n  // weight: number;\n}\n\nexport interface IDiagram extends IEntity, IHasRelationships, IHasViews {\n  viewpoint?: string;\n  nodes: IViewNode[];\n  connectionRouterType?: string;\n  background?: string;\n  connections: object[];\n  path: string;\n\n  elements(): IElement[];\n}\n\nexport interface IOrganization extends IEntity {\n  organizations: IOrganization[];\n  items: string[];\n}\n\nexport interface IHasOrganizations extends IIdentifiable {\n  organizations: IOrganization[];\n}\n\nexport class ExtendableError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n    this.stack = new Error(message).stack;\n  }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ParserError extends ExtendableError {}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class LogicError extends ExtendableError {}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class UnsupportedFormat extends ExtendableError {\n  public xmlns?: string;\n\n  constructor(message: string, xmlns?: string) {\n    super(message);\n    this.xmlns = xmlns;\n  }\n}\n\nexport interface IModel extends IEntity, IHasOrganizations {\n  // unique identifier of this model\n  id: string;\n  // name of the model\n  name: string;\n  // model documentation\n  documentation?: string;\n  // model properties\n  properties: IProperty[];\n  // model metadata\n  metadata?: Map<string, object>;\n  // model elements\n  elements: IElement[];\n  // model relationships\n  relationships: IRelationship[];\n  // model organization tree (aka Folders)\n  organizations: IOrganization[];\n  // property definitions\n  propertyDefs: Map<string, IIdentifiable>;\n  version?: string;\n  diagrams: IDiagram[];\n  viewpoints: IIdentifiable[];\n  href?: string | undefined;\n  type: string;\n\n  lookup(id: string | undefined): IEntity | undefined;\n  makeUniqueId(): string;\n  register(entity: IEntity): void;\n}\n\nexport function inodeKeyFunc(\n  this: SVGGElement,\n  datum: IViewNode,\n  index: number,\n  groups: SVGGElement[]\n) {\n  return datum.id;\n}\n","export class Property {\n  public key: string;\n  public value?: string;\n\n  constructor(key: string, value?: string) {\n    this.key = key;\n    this.value = value;\n  }\n\n  public toString() {\n    return `Property<${this.key} = \"${this.value}\">`;\n  }\n}\n","import { Bounds, zeroBounds } from \"./bounds\";\nimport { Connection } from \"./connection\";\nimport { Diagram } from \"./diagram\";\nimport {\n  IEntity,\n  IEntityRef,\n  IExtents,\n  IModel,\n  IProperty,\n  IViewNode\n} from \"./interfaces\";\nimport { Style } from \"./style\";\n\nexport const VIEW_NODE_WIDTH = 120; // TODO: this should be from the SVG diagram settings\nexport const VIEW_NODE_HEIGHT = 55; // TODO: this should be from the SVG diagram settings\n\n// Graphical node type. It can contain child node types.\n// This can be specialized as Label and Container\n// In the ArchiMate v3 Schema, the tree of these nodes is:\n// ViewConceptType(\n//     LabelGroup (name LangString)\n//     PreservedLangString\n//     style (optional)\n//     viewRefs\n//     id)\n// - ViewNodeType(\n//       LocationGroup (x, y)\n//       SizeGroup (width, height))\n//   - Label(\n//         conceptRef\n//         attributeRef\n//         xpathPart (optional)\n//     )\n//   - Container(\n//         nodes (ViewNodeType)\n//     - Element(\n//           elementRef)\nexport class ViewNode implements IViewNode, IEntityRef {\n  // ArchiMate ViewConceptType Attributes\n  public id: string;\n  public name?: string;\n  public documentation?: string;\n  // @note type here was used for the Element/Relationship/Diagram type\n  public type: string;\n  public style?: Style;\n\n  // @note viewRefs are pointers to 0-* Diagrams for diagram drill in defined in abstract View Concept\n  public viewRefs?: string;\n\n  // @todo document where this comes from\n  public content?: string;\n\n  public properties: IProperty[] = [];\n\n  // This is needed for various calculations\n  public parent?: string;\n\n  // ArchiMate ViewNodeType Attributes\n\n  public bounds: Bounds;\n\n  // ArchiMate Container Attributes\n  // container doesn't distinguish between nodes and connections\n\n  public nodes: IViewNode[] = [];\n  public connections: object[] = [];\n\n  // Element\n  public element?: string;\n  // Archi format, selects the shape of element (for elements that can have two or more shapes)\n  // A nil value indicates the standard representation, a value of \"1\" indicates the alternate\n  public childType?: string;\n\n  public diagram: Diagram;\n\n  // Node type to allow a Label in a Artifact. the \"label\" element holds the info for the @note.\n  // Label View Nodes have the following attributes\n\n  // conceptRef is a reference to an concept for this particular label, along with the attributeRef\n  // which references the particular concept's part which this label represents.\n  public conceptRef?: string;\n  // conceptRef is a reference to an concept for this particular label, along with the partRef\n  // which references the particular concept's part which this label represents. If this attribute\n  // is set, then there is no need to add a label tag in the Label parent (since it is contained in the model).\n  // the XPATH statement is meant to be interpreted in the context of what the conceptRef points to.\n  // @!attribute [r] xpath_path\n  // @return [String, NilClass]\n  public xpathPath?: string;\n\n  // D3.SimulationNodeDatum\n  /**\n   * Node’s zero-based index into nodes array. This property is set during the initialization process of a simulation.\n   */\n  public index?: number;\n  /**\n   * Node’s current x-position\n   */\n  public x?: number;\n  /**\n   * Node’s current y-position\n   */\n  public y?: number;\n  /**\n   * Node’s current x-velocity\n   */\n  public vx?: number;\n  /**\n   * Node’s current y-velocity\n   */\n  public vy?: number;\n  /**\n   * Node’s fixed x-position (if position was fixed)\n   */\n  public fx?: number | null;\n  /**\n   * Node’s fixed y-position (if position was fixed)\n   */\n  public fy?: number | null;\n\n  private model: IModel;\n  private entity?: IEntity;\n\n  constructor(model: IModel, diagram: Diagram) {\n    this.model = model;\n    this.id = this.model.makeUniqueId();\n    this.diagram = diagram;\n    this.type = \"ViewNode\";\n    this.bounds = zeroBounds();\n  }\n\n  public toString() {\n    return `ViewNode[${this.name || \"\"}](${this.element ? this.element : \"\"})`;\n  }\n\n  public entityInstance(): IEntity | undefined {\n    if (this.entity) {\n      return this.entity;\n    }\n    if (this.viewRefs) {\n      this.entity = this.model.lookup(this.viewRefs);\n      return this.entity;\n    }\n    this.entity = this.model.lookup(this.element);\n    return this.entity;\n  }\n\n  // @todo Is this true for all or only Archi models?\n  public absolutePosition(): Bounds {\n    return new Bounds(\n      this.x || this.bounds.left,\n      this.y || this.bounds.top,\n      this.bounds.width,\n      this.bounds.height\n    );\n  }\n\n  public extents(): IExtents {\n    return {\n      maxX: (this.x || this.bounds.left) + this.bounds.width,\n      maxY: (this.y || this.bounds.top) + this.bounds.height,\n      minX: this.x || this.bounds.left,\n      minY: this.y || this.bounds.top\n    };\n  }\n\n  public inside(other: ViewNode | Connection): boolean {\n    if (other instanceof Connection) {\n      return false;\n    }\n    return this.bounds.inside((other as ViewNode).bounds);\n  }\n\n  //   const offset = this.bounds || zeroBounds();\n  //   const el = this.parent;\n  //   while (el.respond_to?(:bounds) && el.bounds) {\n  //     const bounds = el.bounds\n  //     offset = Bounds.new(\n  //         offset.to_h.merge(x: (offset.x || 0) + (bounds.x || 0), y: (offset.y || 0) + (bounds.y || 0)))\n  //     el = el.parent\n  //   }\n  //   return offset;\n  // }\n\n  // target_connections() {\n  //   diagram\n  //     .connections\n  //     .select { |conn| conn.target&.id == id }\n  //     .map(&:id)\n  // }\n\n  public center() {\n    return this.bounds!.center();\n  }\n}\n\n// Type is one of:  [\"archimate:DiagramModelReference\", \"archimate:Group\", \"archimate:DiagramObject\"]\n// textAlignment \"2\"\n// model is on only type of archimate:DiagramModelReference and is id of another element\n//    type=archimate:ArchimateDiagramModel\n// fillColor, lineColor, fontColor are web hex colors\n// targetConnections is a string of space separated ids to connections on diagram objects found on DiagramObject\n// archimateElement is an id of a model element found on DiagramObject types\n// font is of this form: font=\"1|Arial|14.0|0|WINDOWS|1|0|0|0|0|0|0|0|0|1|0|0|0|0|Arial\"\n","import { Bounds } from \"./bounds\";\nimport {\n  IConnection,\n  IEntity,\n  IEntityRef,\n  IExtents,\n  IModel,\n  InitExtents,\n  IProperty,\n  LogicError\n} from \"./interfaces\";\nimport { Path } from \"./path\";\nimport { Point } from \"./point\";\nimport { Style } from \"./style\";\nimport { ViewNode } from \"./view-node\";\n\n// Graphical connection type.\n//\n// If the 'relationshipRef' attribute is present, the connection should\n// reference an existing ArchiMate relationship.\n//\n// If the connection is an ArchiMate relationship type, the connection's\n// label, documentation and properties may be determined (i.e inherited)\n// from those in the referenced ArchiMate relationship. Otherwise the\n// connection's label, documentation and properties can be provided and will\n// be additional to (or over-ride) those contained in the referenced\n// ArchiMate relationship.\nexport class Connection implements IConnection, IEntityRef {\n  public id: string;\n  public name?: string;\n  public documentation?: string;\n  public type: string;\n  public sourceAttachment?: Point;\n  public bendpoints: Point[] = [];\n  public targetAttachment?: Point;\n  public source: string;\n  public target: string;\n  public relationship?: string;\n  public style?: Style;\n  public properties: IProperty[] = [];\n\n  private model: IModel;\n  private sourceEntity?: ViewNode | Connection;\n  private targetEntity?: ViewNode | Connection;\n\n  constructor(model: IModel, type: string, source: string, target: string) {\n    this.model = model;\n    this.id = model.makeUniqueId();\n    this.type = type;\n    this.source = source;\n    this.target = target;\n  }\n\n  public typeName() {\n    return `Connection[${this.name || \"\"}]`;\n  }\n\n  public entityInstance(): IEntity | undefined {\n    return this.model.lookup(this.relationship);\n  }\n\n  public toString() {\n    return `${this.typeName} ${this.source || \"nothing\"} -> ${this.target ||\n      \"nothing\"}`;\n  }\n\n  public startLocation(): Point {\n    return this.sourceAttachment || this.sourceBounds().center();\n  }\n\n  public endLocation(): Point {\n    return this.targetAttachment || this.targetBounds().center();\n  }\n\n  public sourceViewNode(): ViewNode | Connection {\n    if (this.sourceEntity) {\n      return this.sourceEntity;\n    }\n    this.sourceEntity = this.srcTargetLookup(this.source);\n    return this.sourceEntity;\n  }\n\n  public targetViewNode() {\n    if (this.targetEntity) {\n      return this.targetEntity;\n    }\n    this.targetEntity = this.srcTargetLookup(this.target);\n    return this.targetEntity;\n  }\n\n  public sourceBounds(): Bounds {\n    return this.sourceViewNode().absolutePosition();\n  }\n\n  public targetBounds(): Bounds {\n    return this.targetViewNode().absolutePosition();\n  }\n\n  public inside(other: ViewNode | Connection): boolean {\n    return false;\n  }\n\n  // This is used when rendering a connection to connection relationship.\n  public nodes() {\n    return [];\n  }\n\n  public absolutePosition() {\n    const pt = new Path(this).midpoint();\n    return new Bounds(pt.x, pt.y, 0, 0);\n  }\n\n  public extents(): IExtents {\n    const path = new Path(this);\n    return path.points.reduce((extents: IExtents, point: Point) => {\n      return {\n        maxX: Math.max(point.x, extents.maxX),\n        maxY: Math.max(point.y, extents.maxY),\n        minX: Math.min(point.x, extents.minX),\n        minY: Math.min(point.y, extents.minY)\n      };\n    }, InitExtents);\n  }\n\n  private srcTargetLookup(id: string): ViewNode | Connection {\n    const entity = this.model.lookup(id);\n    if (entity === undefined) {\n      throw new LogicError(\"Lookup failed for srcTargetLookup\");\n    }\n    let srcOrTarget: ViewNode | Connection;\n    if (entity instanceof ViewNode) {\n      srcOrTarget = entity as ViewNode;\n    } else if (entity instanceof Connection) {\n      srcOrTarget = entity as Connection;\n    } else {\n      throw new LogicError(\"Lookup returned unexpected type\");\n    }\n    return srcOrTarget;\n  }\n}\n","import { ElementType } from \"./element-type\";\nimport {\n  IDiagram,\n  IEntity,\n  IHasRelationships,\n  IModel,\n  IProperty,\n  IRelationship\n} from \"./interfaces\";\n\n// A base element type that can be extended by concrete ArchiMate types.\n//\n// Note that ElementType is abstract, so one must have derived types of this\n// type. This is indicated in xml by having a tag name of +element+ and an\n// attribute of +xsi:type=\"BusinessRole\"+ where +BusinessRole+ is a derived\n// type from [ElementType].\nexport class Element implements IEntity, IHasRelationships {\n  public id: string;\n  public type: ElementType;\n  public name: string;\n  public documentation?: string;\n  public properties: IProperty[];\n  public href?: string;\n  private model: IModel;\n  private diagramCache?: IDiagram[];\n  private relationshipCache?: IRelationship[];\n\n  constructor(model: IModel, type: ElementType, id?: string, name?: string) {\n    this.model = model;\n    this.type = type;\n    this.id = id || model.makeUniqueId();\n    this.name = name || \"\";\n    this.properties = [];\n  }\n\n  public toString() {\n    return `${this.type}<${this.id}>[${this.name}]`;\n  }\n\n  // classification() {\n  //   this.class::CLASSIFICATION\n  // }\n\n  // layer() {\n  //   this.class::LAYER\n  // }\n\n  public relationships(): IRelationship[] {\n    if (this.relationshipCache) {\n      return this.relationshipCache;\n    }\n    this.relationshipCache = this.model.relationships.filter(\n      rel => rel.source === this.id || rel.target === this.id\n    );\n    return this.relationshipCache;\n  }\n\n  public sourceRelationships(): IRelationship[] {\n    return this.model.relationships.filter(rel => rel.source === this.id);\n  }\n\n  public targetRelationships(): IRelationship[] {\n    return this.model.relationships.filter(rel => rel.target === this.id);\n  }\n\n  // Diagrams that this entity is referenced in.\n  public diagrams() {\n    if (this.diagramCache) {\n      return this.diagramCache;\n    }\n    this.diagramCache = this.model.diagrams.filter(dia =>\n      dia.elements().find(el => el.id === this.id)\n    );\n    return this.diagramCache;\n  }\n}\n","import { IEntity, IModel, IOrganization } from \"./interfaces\";\nimport { Property } from \"./property\";\n\nexport class Organization implements IOrganization {\n  public id: string;\n  public name?: string;\n  public href?: string;\n  public documentation?: string;\n  public properties: Property[];\n  public type: string;\n  public organizations: Organization[];\n  public items: string[];\n  private model: IModel;\n\n  constructor(model: IModel) {\n    this.model = model;\n    this.id = this.model.makeUniqueId();\n    this.type = \"\";\n    this.organizations = [];\n    this.items = [];\n    this.properties = [];\n  }\n\n  public item(id: string): Organization | undefined {\n    return this.model.lookup(id) as Organization;\n  }\n\n  public itemEntities(): IEntity[] {\n    return this.items\n      .map(itemId => this.item(itemId))\n      .filter(maybeItem => maybeItem !== undefined)\n      .map(item => item as IEntity);\n  }\n\n  // public normalize(model: IModel): Folder {\n  //     if (this.isNormalized()) {\n  //         return this;\n  //     }\n  //     this.folders = this.iFolders.map((iFolder) => (new Folder(iFolder).normalize(model))).sort(this.sortByName);\n  //     this.diagrams = this.diagramIds.map((id) => (model.diagram(id, 0))).sort(this.sortByName);\n  //     super.normalize(model);\n  //     return this;\n  // }\n\n  // private sortByName(a: any, b: any): number {\n  //     return a.name.localeCompare(b.name);\n  // }\n}\n","import { AccessType } from \"./access-type\";\nimport { IEntity, IModel, IRelationship } from \"./interfaces\";\nimport { Property } from \"./property\";\nimport { RelationshipType } from \"./relationship-type\";\n\n// A base relationship type that can be extended by concrete ArchiMate types.\n//\n// Note that RelationshipType is abstract, so one must have derived types of\n// this type. this is indicated in xml by having a tag name of \"relationship\"\n// and an attribute of xsi:type=\"AccessRelationship\" where AccessRelationship\n// is a derived type from RelationshipType.\nexport class Relationship implements IRelationship {\n  public id: string; //\n  public type: RelationshipType;\n  public name?: string;\n  public documentation?: string;\n  public properties: Property[];\n  public source: string;\n  public target: string;\n  public accessType?: AccessType;\n  public derived: boolean = false;\n  public strength?: string;\n  public model: IModel;\n\n  constructor(\n    model: IModel,\n    type: RelationshipType,\n    source: string,\n    target: string\n  ) {\n    this.model = model;\n    this.type = type;\n    this.id = model.makeUniqueId();\n    this.source = source;\n    this.target = target;\n    this.properties = [];\n  }\n\n  public sourceElement(): IEntity | undefined {\n    return this.model.lookup(this.source) as IEntity;\n  }\n\n  public targetElement(): IEntity | undefined {\n    return this.model.lookup(this.target) as IEntity;\n  }\n  // weight() {\n  //   self.class::WEIGHT\n  // }\n\n  // classification() {\n  //   self.class::CLASSIFICATION\n  // }\n\n  // verb() {\n  //   self.class::VERB\n  // }\n\n  public toString() {\n    return `<${this.id}>[${this.name || \"\"}] ${this.source} -> ${this.target}`;\n  }\n\n  // description() {\n  //   [\n  //     name.nil? ? nil : \"#{name}:\",\n  //     verb\n  //   ].compact.join(\" \")\n  // }\n\n  // Diagrams that this entity is referenced in.\n  public diagrams() {\n    return this.model.diagrams.filter(dia =>\n      dia.relationships().find(rel => rel.id === this.id)\n    );\n  }\n\n  // replace_item_with(item, replacement) {\n  //   super\n  //   item.remove_reference(self)\n  //   case item\n  //   when source\n  //     @source = replacement\n  //   when target\n  //     @target = replacement\n  //   else\n  //     raise \"Trying to replace #{item} that I don't reference\"\n  //   end\n  // }\n}\n","import { Connection } from \"./connection\";\nimport { DiagramType } from \"./diagram-type\";\nimport { Element } from \"./element\";\nimport {\n  IDiagram,\n  IExtents,\n  IModel,\n  InitExtents,\n  IViewConceptType\n} from \"./interfaces\";\nimport { Property } from \"./property\";\nimport { Relationship } from \"./relationship\";\nimport { ViewNode } from \"./view-node\";\n\nconst DIAGRAM_MARGIN = 10;\n\nexport class Diagram implements IDiagram {\n  public id: string;\n  public name?: string;\n  public documentation?: string;\n  public type: string;\n  public properties: Property[];\n  public viewpoint?: string;\n  public nodes: ViewNode[];\n  public connectionRouterType?: string;\n  public background?: string;\n  public connections: Connection[];\n  public path: string;\n  private model: IModel;\n  private elementsCache?: Set<Element>;\n  private relationshipsCache?: Set<Relationship>;\n  private diagramsCache?: Diagram[];\n\n  constructor(model: IModel, type: DiagramType) {\n    this.model = model;\n    this.id = this.model.makeUniqueId();\n    this.type = type;\n    this.properties = [];\n    this.nodes = [];\n    this.connections = [];\n    this.path = `svg/${this.id}.svg`;\n  }\n\n  public relationships(): Relationship[] {\n    // TODO: expire this if the diagram changes\n    // if (this.relationshipsCache) {\n    //   return this.relationshipsCache;\n    // }\n    this.relationshipsCache = new Set<Relationship>(\n      this.connections\n        .map(conn => conn.entityInstance())\n        .filter(el => el !== undefined)\n        .map(rel => rel as Relationship)\n    );\n    return Array.from(this.relationshipsCache);\n  }\n\n  public elements(): Element[] {\n    // TODO: expire this if the diagram changes\n    // if (this.elementsCache) {\n    //   return this.elementsCache;\n    // }\n    this.elementsCache = new Set<Element>(\n      this.nodes\n        .map(viewNode => viewNode.entityInstance())\n        .filter(entity => entity instanceof Element)\n        .map(el => el as Element)\n    );\n    return Array.from(this.elementsCache.values());\n  }\n\n  public diagrams(): Diagram[] {\n    // TODO: expire this if the diagram changes\n    if (this.diagramsCache) {\n      return this.diagramsCache;\n    }\n    this.diagramsCache = this.nodes\n      .map(viewNode => viewNode.entityInstance())\n      .filter(entity => entity instanceof Diagram)\n      .map(el => el as Diagram);\n    return this.diagramsCache;\n  }\n\n  public toString() {\n    return `Diagram<${this.id}>[${this.name}]`;\n  }\n\n  public totalViewpoint() {\n    return this.viewpoint !== undefined;\n  }\n\n  public viewpointDescription(): string {\n    if (this.viewpoint === undefined) {\n      switch (this.type) {\n        case \"canvas:CanvasModel\":\n          return \"Canvas\";\n        case \"archimate:SketchModel\":\n          return \"Sketch\";\n        default:\n          return \"Total\";\n      }\n    }\n    return this.viewpoint.toString();\n  }\n\n  public calculateMaxExtents(): IExtents {\n    const viewConcepts: IViewConceptType[] = (this\n      .nodes as IViewConceptType[]).concat(this.connections);\n\n    if (viewConcepts.length < 1) {\n      return {\n        maxX: 0,\n        maxY: 0,\n        minX: 0,\n        minY: 0\n      };\n    }\n\n    const extents: IExtents = viewConcepts\n      .map(vc => vc.extents())\n      .reduce((accExtents: IExtents, vcExtents: IExtents) => {\n        return {\n          maxX: Math.max(vcExtents.maxX, accExtents.maxX),\n          maxY: Math.max(vcExtents.maxY, accExtents.maxY),\n          minX: Math.min(vcExtents.minX, accExtents.minX),\n          minY: Math.min(vcExtents.minY, accExtents.minY)\n        };\n      }, InitExtents);\n\n    return {\n      maxX: extents.maxX + DIAGRAM_MARGIN * 2,\n      maxY: extents.maxY + DIAGRAM_MARGIN * 2,\n      minX: extents.minX - DIAGRAM_MARGIN,\n      minY: extents.minY - DIAGRAM_MARGIN\n    };\n  }\n}\n","import { Diagram } from \"./diagram\";\nimport { Element } from \"./element\";\nimport {\n  IEntity,\n  IHasOrganizations,\n  IIdentifiable,\n  IModel\n} from \"./interfaces\";\nimport { Organization } from \"./organization\";\nimport { Property } from \"./property\";\nimport { Relationship } from \"./relationship\";\n\nexport type AdjacencyList = Map<Element, Relationship[]>;\n\n// This is the root model type.\n// It is a container for the elements, relationships, diagrams and\n// organizations of the model.\nexport class Model implements IModel {\n  // unique identifier of this model\n  public id: string = \"\";\n  // name of the model\n  public name: string = \"\";\n  // model documentation\n  public documentation?: string;\n  // model properties\n  public properties: Property[];\n  // model metadata\n  public metadata?: Map<string, object>;\n  // model elements\n  public elements: Element[] = [];\n  // model relationships\n  public relationships: Relationship[] = [];\n  // model organization tree (aka Folders)\n  public organizations: Organization[] = [];\n  // property definitions\n  public propertyDefs: Map<string, IIdentifiable> = new Map<\n    string,\n    IIdentifiable\n  >();\n  public version?: string;\n  public diagrams: Diagram[] = [];\n  public viewpoints: IIdentifiable[] = [];\n  public href?: string | undefined;\n  public type: string;\n\n  private indexHash: Map<string, IEntity>;\n\n  constructor() {\n    this.indexHash = emptyIndexHash();\n    this.properties = [];\n    this.rebuildIndex();\n    this.type = \"Model\";\n  }\n\n  public lookup(id: string | undefined): IEntity | undefined {\n    if (id === undefined || id === \"\") {\n      return undefined;\n    }\n    if (this.indexHash.get(id) === undefined) {\n      this.rebuildIndex(id);\n    }\n    return this.indexHash.get(id);\n  }\n\n  public lookupDiagram(id: string | undefined): Diagram | undefined {\n    const diagram = this.lookup(id);\n    if (diagram === undefined) {\n      return undefined;\n    } else {\n      return diagram as Diagram;\n    }\n  }\n\n  public viewOrganization(): Organization {\n    const viewOrg = this.organizations.find(\n      o => (o && o.type === \"diagrams\" ? true : false)\n    );\n    if (viewOrg) {\n      return viewOrg;\n    }\n    if (this.organizations.length === 0) {\n      const org = new Organization(this);\n      org.name = \"Diagrams\";\n      org.type = \"diagrams\";\n      this.organizations.push(org);\n    }\n    return this.organizations[this.organizations.length - 1];\n  }\n\n  public entities(): IEntity[] {\n    return Array.from(this.indexHash.values());\n  }\n\n  public toString() {\n    return `Model<${this.id}>[${this.name}]`;\n  }\n\n  // TODO: write me\n  public makeUniqueId() {\n    return (Math.random() * 0xffffffff).toString(16);\n    // while (true) {\n    //   const uniqueId = (Math.random() * 0xffffffff).toString(16);\n    //   if (this.indexHash.has(uniqueId)) {\n    //     return uniqueId;\n    //   }\n    // }\n  }\n\n  public register(node: IEntity): void {\n    this.indexHash.set(node.id, node);\n  }\n\n  public deregister(node: IEntity) {\n    this.indexHash.delete(node.id);\n  }\n\n  public adjacencyList(): AdjacencyList {\n    const list = new Map<Element, Relationship[]>();\n    return this.elements.reduce(adjacencyListReducer, list);\n  }\n\n  private rebuildIndex(missingId?: string) {\n    if (missingId === undefined) {\n      return this;\n    }\n    this.indexHash = this.buildIndex();\n    return this;\n  }\n\n  private buildIndex() {\n    this.indexHash = emptyIndexHash();\n    this.indexHash.set(this.id, this);\n    this.elements.forEach((ref: IEntity) => {\n      this.indexHash.set(ref.id, ref);\n    });\n    this.relationships.forEach(ref => {\n      this.indexHash.set(ref.id, ref);\n    });\n    this.diagrams.forEach(dia => {\n      this.indexHash.set(dia.id, this.indexViewNodes(dia));\n    });\n    // this.propertyDefs.forEach((ref) => { this.indexHash.set(ref.id, ref); });\n    this.indexOrganizations(this);\n    return this.indexHash;\n  }\n\n  private indexViewNodes(ref: Diagram): Diagram {\n    ref.nodes.forEach(node => this.indexHash.set(node.id, node));\n    ref.connections.forEach(con => this.indexHash.set(con.id, con));\n    return ref;\n  }\n\n  private indexOrganizations(ref: IHasOrganizations) {\n    ref.organizations.forEach(org => {\n      this.indexOrganizations(org);\n      this.indexHash.set(org.id, org);\n      });\n    return ref;\n  }\n}\n\nfunction emptyIndexHash() {\n  return new Map<string, IEntity>();\n}\n\nfunction adjacencyListReducer(\n  alMap: AdjacencyList,\n  cv: Element\n): AdjacencyList {\n  return alMap.set(cv, cv.relationships() as Relationship[]);\n}\n","import { Set } from \"immutable\";\nimport { IEntity, IRelationship, LogicError } from \"..\";\nimport { Element } from \"./element\";\nimport { ElementType } from \"./element-type\";\nimport { Query } from \"./query\";\nimport { Relationship } from \"./relationship\";\nimport { RelationshipType } from \"./relationship-type\";\n\ninterface ISearchQueueItem {\n  element: Element;\n  depth: number;\n}\n\nexport class QueryRunner {\n  public query: Query;\n\n  constructor(query: Query) {\n    this.query = query;\n  }\n\n  // Using a Breadth First Search approach\n  // Changes from a visit pattern to something that generates query results\n  public run(): [Element[], Relationship[]] {\n    const visited = Set<Element>(this.query.elements);\n    const queue: ISearchQueueItem[] = Array.from<Element>(\n      this.query.elements.toJS()\n    ).map(el => ({ element: el, depth: 1 }));\n\n    const resultElements: Element[] = [];\n    const resultRelationships: Relationship[] = [];\n\n    while (queue.length > 0) {\n      const item = queue.pop();\n      if (!item) {\n        throw new LogicError(\"queue shouldn't be undefined\");\n      }\n      resultElements.push(item.element);\n      item.element\n        .relationships()\n        .filter(rel => rel.source && rel.target)\n        .filter(relationshipTypesFilter(this.query.relationshipTypes))\n        .filter(relationshipElementTypesFilter(this.query.elementTypes))\n        .reduce(spiderRelationships, {\n          maxPathDepth: this.query.pathDepth,\n          queue,\n          relationships: resultRelationships,\n          searchQueueItem: item,\n          visited\n        });\n    }\n    return [resultElements, resultRelationships];\n  }\n}\n\ninterface ISpiderAccumulator {\n  maxPathDepth: number;\n  queue: ISearchQueueItem[];\n  relationships: Relationship[];\n  searchQueueItem: ISearchQueueItem;\n  visited: Set<Element>;\n}\n\nexport function spiderRelationships(\n  acc: ISpiderAccumulator,\n  relationship: IRelationship\n): ISpiderAccumulator {\n  const otherElement =\n    relationship.sourceElement() === acc.searchQueueItem.element\n      ? relationship.targetElement()\n      : relationship.sourceElement();\n\n  if (\n    otherElement &&\n    otherElement instanceof Element &&\n    !acc.visited.includes(otherElement)\n  ) {\n    acc.relationships.push(relationship as Relationship);\n    acc.visited = acc.visited.add(otherElement);\n    if (acc.searchQueueItem.depth < acc.maxPathDepth) {\n      acc.queue.push({\n        depth: acc.searchQueueItem.depth + 1,\n        element: otherElement\n      });\n    }\n  }\n  return acc;\n}\n\nexport function relationshipTypesFilter(\n  relationshipTypes: Set<RelationshipType>\n): (relationship: IRelationship) => boolean {\n  return (relationship: IRelationship) =>\n    relationshipTypes.includes(relationship.type);\n  // rt => (rt ? rt === relationship.type : false)\n  // );\n}\n\nexport function relationshipElementTypesFilter(\n  elementTypes: Set<ElementType>\n): ((relationship: IRelationship) => boolean) {\n  return (relationship: IRelationship) => {\n    return [relationship.sourceElement(), relationship.targetElement()].every(\n      elementTypeFilter(elementTypes)\n    );\n  };\n}\n\nexport function elementTypeFilter(\n  elementTypes: Set<ElementType>\n): ((e: IEntity | undefined) => boolean) {\n  return (e: IEntity | undefined): boolean => {\n    return (\n      (e && e instanceof Element && elementTypes.includes(e.type)) || false\n    );\n  };\n}\n","import { Set } from \"immutable\";\nimport { Bounds } from \"./bounds\";\nimport { Connection } from \"./connection\";\nimport { Diagram } from \"./diagram\";\nimport { DiagramType } from \"./diagram-type\";\nimport { Element } from \"./element\";\nimport { ElementType, ElementTypes } from \"./element-type\";\nimport { IRelationship, LogicError } from \"./interfaces\";\nimport { Layer, Layers } from \"./layers\";\nimport { Model } from \"./model\";\nimport { QueryRunner } from \"./query-runner\";\nimport { Relationship } from \"./relationship\";\nimport { RelationshipType, RelationshipTypes } from \"./relationship-type\";\nimport { VIEW_NODE_HEIGHT, VIEW_NODE_WIDTH, ViewNode } from \"./view-node\";\nimport { ViewpointType, ViewpointTypeElementTypes } from \"./viewpoint-type\";\n\ninterface IQueryUpdateProps {\n  elements?: Set<Element>;\n  elementTypes?: Set<ElementType>;\n  id?: string;\n  includeDerivedRelations?: boolean;\n  layerFilter?: Set<Layer>;\n  model?: Model;\n  name?: string;\n  pathDepth?: number;\n  relationships?: Set<Relationship>;\n  relationshipTypes?: Set<RelationshipType>;\n  viewpointType?: ViewpointType;\n}\n\nexport type RelationshipFilter = (relationship: IRelationship) => boolean;\nexport const EmptyElementTypeSet = Set<ElementType>();\n\nexport class Query {\n  public elements: Set<Element>;\n  public elementTypes: Set<ElementType>;\n  public id: string;\n  public includeDerivedRelations: boolean;\n  public layerFilter: Set<Layer>;\n  public model: Model;\n  public name: string;\n  public pathDepth: number;\n  public relationships: Set<Relationship>;\n  public relationshipTypes: Set<RelationshipType>;\n  public viewpointType: ViewpointType;\n\n  constructor(model: Model) {\n    this.elements = Set<Element>();\n    this.elementTypes = Set<ElementType>(ElementTypes);\n    this.id = model.makeUniqueId();\n    this.includeDerivedRelations = false;\n    this.layerFilter = Set<Layer>(Layers);\n    this.model = model;\n    this.name = \"New Query\";\n    this.pathDepth = 2;\n    this.relationships = Set<Relationship>();\n    this.relationshipTypes = Set<RelationshipType>(RelationshipTypes);\n    this.viewpointType = ViewpointType.Total;\n  }\n\n  public updateQuery(props: IQueryUpdateProps): Query {\n    return Object.assign(new Query(this.model), this, props);\n  }\n\n  // TODO: This should return a set based on\n  // * Selected Viewpoint <Done>\n  // * Selected Layer\n  // * Active/Passive Structure or Behavior\n  public availableElementTypes(): Set<ElementType> {\n    return Set<ElementType>(\n      ViewpointTypeElementTypes.get(\n        this.viewpointType || ViewpointType.Total\n      ) || ElementTypes\n    );\n  }\n\n  public unselectedElementTypes(): Set<ElementType> {\n    return Set<ElementType>(\n      this.availableElementTypes().filter(\n        et => this.elementTypes.find(vet => vet === et) === undefined\n      )\n    );\n  }\n\n  // Add this once Immutable v4 is released\n  // public hashCode(): number {\n  //   return hash(this);\n  // }\n\n  // public equals(other: any): boolean {\n  //   return (\n  //     (other instanceof Query) &&\n  //     (this.id === other.id) &&\n  //     (this.model === other.model) &&\n  //     (this.name === other.name) &&\n  //     (this.viewpoint === other.viewpoint) &&\n  //     (this.elements === other.elements) &&\n  //     (this.relationships === other.relationships) &&\n  //     (this.pathDepth === other.pathDepth)\n  //   );\n  // }\n\n  public run(): Diagram {\n    const queryResult = new QueryRunner(this);\n    const diagram = this.findOrCreateDiagram();\n    const nodesConns = this.diagramNodesAndConnections(\n      diagram,\n      queryResult.run()\n    );\n    diagram.name = this.name;\n    // diagram.properties = TODO: convert this query into properties so queries can be saved in the standard file format\n    diagram.viewpoint = this.viewpointType;\n    diagram.nodes = nodesConns[0];\n    diagram.connections = nodesConns[1];\n    return diagram;\n  }\n\n  // TODO: re-write this. Diagram should only be added once to the Model. Updates should replace the\n  // diagram in the model diagram set.\n  private findOrCreateDiagram(): Diagram {\n    let diagram = this.model.lookupDiagram(this.id);\n    if (diagram) {\n      return diagram;\n    }\n    diagram = new Diagram(this.model, DiagramType.ModelQuery);\n    diagram.id = this.id;\n    diagram.name = this.name;\n    this.model.diagrams.push(diagram);\n    this.model.viewOrganization().items.push(diagram.id);\n    return diagram;\n  }\n\n  private diagramNodesAndConnections(\n    diagram: Diagram,\n    elementsRelationships: [Element[], Relationship[]]\n  ): [ViewNode[], Connection[]] {\n    const elements = elementsRelationships[0];\n    const relationships = elementsRelationships[1];\n    const relationshipElements = relationships.reduce(\n      (acc: Element[], rel: Relationship) => {\n        const source = rel.sourceElement();\n        const target = rel.targetElement();\n        if (source === undefined) {\n          throw new LogicError(\n            `Relationship ${rel.id} source ${rel.source} Element not found`\n          );\n        }\n        if (target === undefined) {\n          throw new LogicError(\n            `Relationship ${rel.id} target ${rel.target} Element not found`\n          );\n        }\n        return acc.concat([source as Element, target as Element]);\n      },\n      []\n    );\n\n    const elementViewNodeMap: Map<string, ViewNode> = elements\n      .concat(relationshipElements)\n      .reduce(\n        (acc: Map<string, ViewNode>, el: Element) =>\n          acc.set(el.id, this.viewNodeFor(el, diagram)),\n        new Map<string, ViewNode>()\n      );\n\n    const connections: Connection[] = relationships.map(rel =>\n      this.connectionFor(rel, elementViewNodeMap, diagram)\n    );\n\n    return [Array.from(elementViewNodeMap.values()), connections];\n  }\n\n  // Then nodes are the reduction of the set of paths' elements mapped to ViewNodes\n  // And connections are the reduction of the set of paths' relationships mapped to Connections\n  private viewNodeFor(el: Element, diagram: Diagram): ViewNode {\n    const vn = new ViewNode(this.model, diagram);\n    vn.type = \"archimate:DiagramObject\";\n    vn.bounds = new Bounds(700, 700, VIEW_NODE_WIDTH, VIEW_NODE_HEIGHT);\n    vn.element = el.id;\n    vn.diagram = diagram;\n    return vn;\n  }\n\n  private connectionFor(\n    relationship: Relationship,\n    elementViewNodeMap: Map<string, ViewNode>,\n    diagram: Diagram\n  ): Connection {\n    const sourceViewNode = elementViewNodeMap.get(relationship.source);\n    const targetViewNode = elementViewNodeMap.get(relationship.target);\n    if (sourceViewNode === undefined) {\n      throw new LogicError(\n        `Source ViewNode id: ${relationship.source} not found`\n      );\n    }\n    if (targetViewNode === undefined) {\n      throw new LogicError(\n        `Target ViewNode id: ${relationship.target} not found`\n      );\n    }\n    const conn = new Connection(\n      this.model,\n      \"archimate:Connection\",\n      sourceViewNode.id,\n      targetViewNode.id\n    );\n    conn.relationship = relationship.id;\n    return conn;\n  }\n}\n","export function getStringAttribute(node: Element, name: string) {\n  const attr = node.attributes.getNamedItem(name);\n  if (attr === null) {\n    return undefined;\n  }\n  return (attr as Attr).value;\n}\n\nexport function getNSStringAttribute(node: Element, name: string, ns?: string) {\n  const attr = node.attributes.getNamedItemNS(ns || null, name);\n  if (attr === null) {\n    return undefined;\n  }\n  return (attr as Attr).value;\n}\n\nexport function getIntAttribute(\n  node: Element,\n  name: string\n): number | undefined {\n  const strVal = getStringAttribute(node, name);\n  if (strVal === undefined) {\n    return undefined;\n  }\n\n  return Number.parseInt(strVal as string, 10);\n}\n","import { Point } from \"../../point\";\nimport { getStringAttribute } from \"./dom-helpers\";\n\nexport class BendpointParser {\n  public bendpoints(parent: Element): Point[] {\n    const children = Array.from(parent.children).filter(\n      node => node.nodeName === \"bendpoint\"\n    );\n    if (children === undefined) {\n      return [];\n    }\n    return children.map(this.createPoint);\n  }\n\n  private createPoint = (child: Element): Point => {\n    return new Point(\n      this.parseAttrInt(child, \"startX\"),\n      this.parseAttrInt(child, \"startY\")\n    );\n  }\n\n  private parseAttrInt(child: Element, attrName: string): number {\n    const str = getStringAttribute(child, attrName) || \"0\";\n    const i = Number.parseInt(str, 10);\n    if (Number.isNaN(i)) {\n      return 0;\n    }\n    return i as number;\n  }\n}\n","export class DocumentationParser {\n  public value(parentElement: Element, docElementName?: string) {\n    const docEl = parentElement.querySelector(\n      docElementName || \"documentation\"\n    );\n    if (docEl === null) {\n      return undefined;\n    }\n    return (docEl as Element).textContent || undefined;\n  }\n}\n","import { IModel } from \"../../interfaces\";\nimport { Organization } from \"../../organization\";\nimport { getStringAttribute } from \"./dom-helpers\";\n\nexport class FolderParser {\n  public model: IModel;\n\n  constructor(model: IModel) {\n    this.model = model;\n  }\n\n  public organizations(parent: Element): Organization[] {\n    const children: Element[] = Array.from(parent.children).filter(\n      node => node.nodeName === \"folder\"\n    );\n    if (children === undefined) {\n      return [];\n    }\n    return children.map(this.createOrganization, this);\n  }\n\n  private createOrganization = (child: Element): Organization => {\n    const organization = new Organization(this.model);\n    organization.id = getStringAttribute(child, \"id\") || \"noid\"; // this.model.makeUniqueId();\n    organization.name = getStringAttribute(child, \"name\");\n    organization.type = getStringAttribute(child, \"type\") || \"\";\n    organization.items = Array.from(child.children)\n      .filter(node => node.nodeName === \"element\")\n      .map(el => el.attributes.getNamedItem(\"id\")!.value);\n    organization.organizations = this.organizations(child);\n    return organization;\n  }\n}\n","import { IModel, ParserError } from \"../../interfaces\";\nimport { Property } from \"../../property\";\nimport { getStringAttribute } from \"./dom-helpers\";\n\nexport class PropertiesParser {\n  public model: IModel;\n\n  constructor(model: IModel) {\n    this.model = model;\n  }\n\n  public properties(parent: Element) {\n    const els = Array.from(parent.children).filter(\n      node => node.nodeName === \"property\"\n    );\n    if (els === null) {\n      return [];\n    }\n    return els.map(this.handleElement);\n  }\n\n  private handleElement = (el: Element) => {\n    const key = getStringAttribute(el, \"key\");\n    const value = getStringAttribute(el, \"value\");\n    if (key === undefined) {\n      throw new ParserError(\"Property is missing key\");\n    }\n    return new Property(key as string, value);\n  }\n}\n","export class ContentParser {\n  public content(parentElement: Element) {\n    const contentEl = Array.from(parentElement.children).find(\n      node => node.nodeName === \"content\"\n    );\n    if (contentEl === undefined) {\n      return undefined;\n    }\n    return (contentEl as Element).textContent || undefined;\n  }\n}\n","import { TextAlignProperty } from \"csstype\";\nimport { Color } from \"../../color\";\nimport { Font } from \"../../font\";\nimport { Style } from \"../../style\";\nimport { getIntAttribute, getStringAttribute } from \"./dom-helpers\";\n\nexport class StyleParser {\n  public style(element: Element): Style | undefined {\n    const s = new Style();\n    const textAlignment = getStringAttribute(element, \"textAlignment\");\n    const fillColor = Color.rgba(getStringAttribute(element, \"fillColor\"));\n    const lineColor = Color.rgba(getStringAttribute(element, \"lineColor\"));\n    const fontColor = Color.rgba(getStringAttribute(element, \"fontColor\"));\n    const font = Font.archiFontString(getStringAttribute(element, \"font\"));\n    const lineWidth = getIntAttribute(element, \"lineWidth\");\n    const textPosition = getIntAttribute(element, \"textPosition\");\n    if (textAlignment) {\n      s.textAlignment = textAlignment as TextAlignProperty;\n    }\n    if (fillColor) {\n      s.fillColor = fillColor;\n    }\n    if (lineColor) {\n      s.lineColor = lineColor;\n    }\n    if (fontColor) {\n      s.fontColor = fontColor;\n    }\n    if (font) {\n      s.font = font;\n    }\n    if (lineWidth) {\n      s.lineWidth = lineWidth;\n    }\n    if (textPosition) {\n      s.textPosition = textPosition;\n    }\n    return s;\n  }\n}\n","import { ViewpointType } from \"../../viewpoint-type\";\nimport { getStringAttribute } from \"./dom-helpers\";\n\nconst archiViewpointMap = new Map<string, ViewpointType | undefined>([\n  [\"1\", undefined], // ViewpointType.Actor_cooperation,\n  [\"2\", ViewpointType.Application_behavior],\n  [\"application_cooperation\", ViewpointType.Application_cooperation],\n  [\"3\", ViewpointType.Application_cooperation],\n  [\"4\", ViewpointType.Application_structure],\n  [\"application_usage\", ViewpointType.Application_usage],\n  [\"5\", ViewpointType.Application_usage],\n  [\"6\", ViewpointType.Business_function],\n  [\"business_process_cooperation\", ViewpointType.Business_process_cooperation],\n  [\"7\", undefined], // ViewpointType.Business_cooperation,\n  [\"8\", ViewpointType.Business_process],\n  [\"product\", ViewpointType.Product],\n  [\"9\", ViewpointType.Product],\n  [\"implementation_deployment\", ViewpointType.Implementation_and_deployment],\n  [\"10\", ViewpointType.Implementation_and_deployment],\n  [\"information_structure\", ViewpointType.Information_structure],\n  [\"11\", ViewpointType.Information_structure],\n  [\"12\", ViewpointType.Infrastructure_usage],\n  [\"13\", ViewpointType.Infrastructure],\n  [\"layered\", ViewpointType.Layered],\n  [\"14\", ViewpointType.Layered],\n  [\"organization\", ViewpointType.Organization],\n  [\"15\", ViewpointType.Organization],\n  [\"service_realization\", ViewpointType.Service_realization],\n  [\"16\", ViewpointType.Service_realization],\n  [\"stakeholder\", ViewpointType.Stakeholder],\n  [\"17\", ViewpointType.Stakeholder],\n  [\"goal_realization\", ViewpointType.Goal_realization],\n  [\"18\", ViewpointType.Goal_realization],\n  [\"19\", ViewpointType.Goal_contribution],\n  [\"20\", ViewpointType.Principles],\n  [\"requirements_realization\", ViewpointType.Requirements_realization],\n  [\"21\", ViewpointType.Requirements_realization],\n  [\"motivation\", ViewpointType.Motivation],\n  [\"22\", ViewpointType.Motivation],\n  [\"project\", ViewpointType.Project],\n  [\"23\", ViewpointType.Project],\n  [\"migration\", ViewpointType.Migration],\n  [\"24\", ViewpointType.Migration],\n  [\"implementation_migration\", ViewpointType.Implementation_and_migration],\n  [\"25\", ViewpointType.Implementation_and_migration],\n  [\"capability\", undefined], // ViewpointType.Capability,\n  [\"outcome_realization\", ViewpointType.Outcome_realization],\n  [\"physical\", ViewpointType.Physical],\n  [\"resource\", undefined], // ViewpointType.Resource,\n  [\"strategy\", ViewpointType.Strategy],\n  [\"technology\", ViewpointType.Technology],\n  [\"technology_usage\", ViewpointType.Technology_usage]\n]);\n\nexport class ViewpointParser {\n  public viewpoint(domEl: Element): ViewpointType | undefined {\n    const viewpointStr = getStringAttribute(domEl, \"viewpoint\");\n    if (viewpointStr === undefined) {\n      return undefined;\n    }\n    return archiViewpointMap.get(viewpointStr as string);\n  }\n}\n","import { Bounds } from \"../../bounds\";\nimport { Connection } from \"../../connection\";\nimport { Diagram } from \"../../diagram\";\nimport { IModel, ParserError } from \"../../interfaces\";\nimport { BendpointParser } from \"./bendpoint-parser\";\nimport { DocumentationParser } from \"./documentation-parser\";\nimport { getNSStringAttribute, getStringAttribute } from \"./dom-helpers\";\nimport { StyleParser } from \"./style-parser\";\n\nexport class ConnectionParser {\n  public model: IModel;\n  public diagram: Diagram;\n  public offset: Bounds;\n  private documentationParser: DocumentationParser;\n  private bendpointParser: BendpointParser;\n  private styleParser: StyleParser;\n\n  constructor(model: IModel, diagram: Diagram, offset: Bounds) {\n    this.model = model;\n    this.diagram = diagram;\n    this.offset = offset;\n    this.documentationParser = new DocumentationParser();\n    this.bendpointParser = new BendpointParser();\n    this.styleParser = new StyleParser();\n  }\n\n  public connections(parent: Element): Connection[] {\n    const children = Array.from(parent.children).filter(\n      node => node.nodeName === \"sourceConnection\"\n    );\n    if (children === undefined) {\n      return [];\n    }\n    return children.map(this.createConnection);\n  }\n\n  private createConnection = (child: Element): Connection => {\n    const type =\n      getNSStringAttribute(\n        child,\n        \"type\",\n        \"http://www.w3.org/2001/XMLSchema-instance\"\n      ) || \"Connection\";\n    const source = getStringAttribute(child, \"source\");\n    const target = getStringAttribute(child, \"target\");\n    const id = getStringAttribute(child, \"id\");\n    if ([source, target].some(s => s === undefined)) {\n      throw new ParserError(\n        `Element id=${id} Type=${type}, Source=${source} or Target=${target} missing from Connection`\n      );\n    }\n    const connection = new Connection(\n      this.model,\n      type as string,\n      source as string,\n      target as string\n    );\n    connection.id =\n      getStringAttribute(child, \"id\") || this.model.makeUniqueId();\n    connection.name = getStringAttribute(child, \"name\");\n    connection.documentation = this.documentationParser.value(child);\n    connection.bendpoints = this.bendpointParser.bendpoints(child);\n    connection.relationship = getStringAttribute(\n      child,\n      \"archimateRelationship\"\n    );\n    connection.style = this.styleParser.style(child);\n    this.diagram.connections.push(connection);\n    return connection;\n  }\n}\n","import { Bounds } from \"../../bounds\";\nimport { ParserError } from \"../../interfaces\";\nimport { getIntAttribute } from \"./dom-helpers\";\n\nexport class BoundsParser {\n  public bounds(parentElement: Element) {\n    const el = Array.from(parentElement.children).find(\n      node => node.nodeName === \"bounds\"\n    );\n    if (el === null) {\n      return undefined;\n    }\n    const boundsEl = el as Element;\n    const x = getIntAttribute(boundsEl, \"x\");\n    const y = getIntAttribute(boundsEl, \"y\");\n    const width = getIntAttribute(boundsEl, \"width\");\n    const height = getIntAttribute(boundsEl, \"height\");\n\n    if (width === undefined || height === undefined) {\n      throw new ParserError(\"Invalid value for width or height\");\n    }\n    return new Bounds(x, y, width as number, height as number);\n  }\n}\n","import { Bounds } from \"../../bounds\";\nimport { Diagram } from \"../../diagram\";\nimport { IModel } from \"../../interfaces\";\nimport { ViewNode } from \"../../view-node\";\nimport { BoundsParser } from \"./bounds-parser\";\nimport { ConnectionParser } from \"./connection-parser\";\nimport { ContentParser } from \"./content-parser\";\nimport { DocumentationParser } from \"./documentation-parser\";\nimport { getNSStringAttribute, getStringAttribute } from \"./dom-helpers\";\nimport { StyleParser } from \"./style-parser\";\n\nexport class ViewNodeParser {\n  public model: IModel;\n  public diagram: Diagram;\n  public offset: Bounds;\n\n  private documentationParser: DocumentationParser;\n  private contentParser: ContentParser;\n  private boundsParser: BoundsParser;\n  private styleParser: StyleParser;\n\n  constructor(model: IModel, diagram: Diagram, offset: Bounds) {\n    this.model = model;\n    this.diagram = diagram;\n    this.offset = offset;\n    this.documentationParser = new DocumentationParser();\n    this.contentParser = new ContentParser();\n    this.boundsParser = new BoundsParser();\n    this.styleParser = new StyleParser();\n  }\n\n  public viewNodes(parent: Element): ViewNode[] {\n    const children = Array.from(parent.children).filter(\n      node => node.nodeName === \"child\"\n    );\n    if (children.length === 0) {\n      return [];\n    }\n    return children\n      .map(this.createViewNode)\n      .reduce((acc: ViewNode[], curr: ViewNode[]) => acc.concat(curr));\n  }\n\n  private createViewNode = (child: Element): ViewNode[] => {\n    const viewNode = new ViewNode(this.model, this.diagram);\n    viewNode.id = getStringAttribute(child, \"id\") || this.model.makeUniqueId();\n    viewNode.name = getStringAttribute(child, \"name\");\n    viewNode.documentation = this.documentationParser.value(child);\n    viewNode.type = (\n      getNSStringAttribute(\n        child,\n        \"type\",\n        \"http://www.w3.org/2001/XMLSchema-instance\"\n      ) || \"\"\n    ).replace(\"archimate:\", \"\");\n\n    viewNode.style = this.styleParser.style(child);\n    viewNode.viewRefs = getStringAttribute(child, \"model\");\n    viewNode.content = this.contentParser.content(child);\n    if (child.parentElement!.nodeName === \"child\") {\n      const parentEl = child.parentElement as Element;\n      viewNode.parent = getStringAttribute(parentEl, \"id\");\n    }\n    viewNode.bounds = this.boundsParser.bounds(child)!.offset(this.offset);\n    viewNode.element = getStringAttribute(child, \"archimateElement\");\n    viewNode.childType = getStringAttribute(child, \"type\");\n    this.diagram.nodes.push(viewNode);\n    this.model.register(viewNode);\n    const connectionParser = new ConnectionParser(\n      this.model,\n      this.diagram,\n      viewNode.bounds\n    );\n    connectionParser.connections(child);\n    const viewNodeParser = new ViewNodeParser(\n      this.model,\n      this.diagram,\n      viewNode.bounds\n    );\n    return [viewNode].concat(viewNodeParser.viewNodes(child));\n  }\n}\n","import { zeroBounds } from \"../../bounds\";\nimport { Diagram } from \"../../diagram\";\nimport { DiagramType } from \"../../diagram-type\";\nimport { IModel } from \"../../interfaces\";\nimport { DocumentationParser } from \"./documentation-parser\";\nimport { getStringAttribute } from \"./dom-helpers\";\nimport { PropertiesParser } from \"./properties-parser\";\nimport { ViewNodeParser } from \"./view-node-parser\";\nimport { ViewpointParser } from \"./viewpoint-parser\";\n\nexport class DiagramParser {\n  public model: IModel;\n  private documentationParser: DocumentationParser;\n  private propertiesParser: PropertiesParser;\n  private viewpointParser: ViewpointParser;\n\n  constructor(model: IModel) {\n    this.model = model;\n    this.documentationParser = new DocumentationParser();\n    this.propertiesParser = new PropertiesParser(model);\n    this.viewpointParser = new ViewpointParser();\n  }\n\n  public diagram(domEl: Element, type: DiagramType): Diagram {\n    const dia = new Diagram(this.model, type);\n    dia.id = getStringAttribute(domEl, \"id\") || this.model.makeUniqueId();\n    dia.name = getStringAttribute(domEl, \"name\");\n    dia.documentation = this.documentationParser.value(domEl);\n    dia.properties = this.propertiesParser.properties(domEl);\n    dia.viewpoint = this.viewpointParser.viewpoint(domEl);\n    const viewNodeParser = new ViewNodeParser(this.model, dia, zeroBounds());\n    dia.nodes = viewNodeParser.viewNodes(domEl);\n    return dia;\n  }\n}\n","import { AccessType } from \"../../access-type\";\nimport { DiagramType } from \"../../diagram-type\";\nimport { Element as ArchiElement } from \"../../element\";\nimport { ElementType } from \"../../element-type\";\nimport { IModel, ParserError } from \"../../interfaces\";\nimport { Relationship } from \"../../relationship\";\nimport { RelationshipType } from \"../../relationship-type\";\nimport { DiagramParser } from \"./diagram-parser\";\nimport { DocumentationParser } from \"./documentation-parser\";\nimport { getStringAttribute } from \"./dom-helpers\";\nimport { PropertiesParser } from \"./properties-parser\";\n\nexport class ElementTagParser {\n  public model: IModel;\n  public doc: XMLDocument;\n  private diagramParser: DiagramParser;\n  private documentationParser: DocumentationParser;\n  private propertiesParser: PropertiesParser;\n\n  constructor(model: IModel, doc: XMLDocument) {\n    this.model = model;\n    this.doc = doc;\n    this.diagramParser = new DiagramParser(model);\n    this.documentationParser = new DocumentationParser();\n    this.propertiesParser = new PropertiesParser(model);\n  }\n\n  public elements() {\n    const els = this.doc.querySelectorAll(\"element\");\n    if (els === null) {\n      return;\n    }\n    els.forEach(this.handleElement);\n  }\n\n  private parseArchimateElement(el: Element, type: ElementType) {\n    const archiEl = new ArchiElement(this.model, type);\n    archiEl.id = getStringAttribute(el, \"id\") || \"\";\n    archiEl.name = getStringAttribute(el, \"name\") || \"\";\n    archiEl.documentation = this.documentationParser.value(el);\n    archiEl.properties = this.propertiesParser.properties(el);\n    this.model.elements.push(archiEl);\n  }\n\n  private parseArchimateRelationship(el: Element, type: RelationshipType) {\n    const source = getStringAttribute(el, \"source\");\n    const target = getStringAttribute(el, \"target\");\n    if (source === undefined) {\n      throw new ParserError(\"Expected source to be present\");\n    }\n    if (target === undefined) {\n      throw new ParserError(\"Expected target to be present\");\n    }\n    const relationship = new Relationship(this.model, type, source, target);\n    relationship.id = getStringAttribute(el, \"id\") || \"\";\n    relationship.name = getStringAttribute(el, \"name\") || \"\";\n    relationship.documentation = this.documentationParser.value(el);\n    relationship.properties = this.propertiesParser.properties(el);\n    relationship.strength = getStringAttribute(el, \"strength\");\n    relationship.accessType = this.parseAccessType(el);\n    this.model.relationships.push(relationship);\n  }\n\n  private stringToAccessType(str: string): AccessType {\n    switch (str) {\n      case \"1\":\n        return AccessType.Read;\n      case \"2\":\n        return AccessType.Write;\n      case \"3\":\n        return AccessType.ReadWrite;\n      default:\n        return AccessType.Access;\n    }\n  }\n  private parseAccessType(el: Element): AccessType {\n    const accessTypeStr = getStringAttribute(el, \"accessType\");\n    if (accessTypeStr === undefined) {\n      return AccessType.Access;\n    }\n\n    return this.stringToAccessType(accessTypeStr);\n  }\n\n  private parseArchimateDiagram(el: Element, type: DiagramType) {\n    this.model.diagrams.push(this.diagramParser.diagram(el, type));\n  }\n\n  private handleElement = (el: Element) => {\n    const t = el.attributes.getNamedItemNS(\n      \"http://www.w3.org/2001/XMLSchema-instance\",\n      \"type\"\n    );\n    if (t === null) {\n      throw new Error(\"Couldn't find element type\");\n    }\n    const typeStr = (t as Attr).value.replace(\"archimate:\", \"\");\n    switch (typeStr) {\n      case ElementType.BusinessActor:\n        this.parseArchimateElement(el, ElementType.BusinessActor);\n        break;\n      case ElementType.BusinessCollaboration:\n        this.parseArchimateElement(el, ElementType.BusinessCollaboration);\n        break;\n      case ElementType.BusinessEvent:\n        this.parseArchimateElement(el, ElementType.BusinessEvent);\n        break;\n      case ElementType.BusinessFunction:\n        this.parseArchimateElement(el, ElementType.BusinessFunction);\n        break;\n      case ElementType.BusinessInteraction:\n        this.parseArchimateElement(el, ElementType.BusinessInteraction);\n        break;\n      case ElementType.BusinessInterface:\n        this.parseArchimateElement(el, ElementType.BusinessInterface);\n        break;\n      case ElementType.BusinessObject:\n        this.parseArchimateElement(el, ElementType.BusinessObject);\n        break;\n      case ElementType.BusinessProcess:\n        this.parseArchimateElement(el, ElementType.BusinessProcess);\n        break;\n      case ElementType.BusinessRole:\n        this.parseArchimateElement(el, ElementType.BusinessRole);\n        break;\n      case ElementType.BusinessService:\n        this.parseArchimateElement(el, ElementType.BusinessService);\n        break;\n      case ElementType.Contract:\n        this.parseArchimateElement(el, ElementType.Contract);\n        break;\n      case ElementType.Location:\n        this.parseArchimateElement(el, ElementType.Location);\n        break;\n      case ElementType.Product:\n        this.parseArchimateElement(el, ElementType.Product);\n        break;\n      case ElementType.Representation:\n        this.parseArchimateElement(el, ElementType.Representation);\n        break;\n      case ElementType.ApplicationCollaboration:\n        this.parseArchimateElement(el, ElementType.ApplicationCollaboration);\n        break;\n      case ElementType.ApplicationComponent:\n        this.parseArchimateElement(el, ElementType.ApplicationComponent);\n        break;\n      case ElementType.ApplicationEvent:\n        this.parseArchimateElement(el, ElementType.ApplicationEvent);\n        break;\n      case ElementType.ApplicationFunction:\n        this.parseArchimateElement(el, ElementType.ApplicationFunction);\n        break;\n      case ElementType.ApplicationInteraction:\n        this.parseArchimateElement(el, ElementType.ApplicationInteraction);\n        break;\n      case ElementType.ApplicationInterface:\n        this.parseArchimateElement(el, ElementType.ApplicationInterface);\n        break;\n      case ElementType.ApplicationProcess:\n        this.parseArchimateElement(el, ElementType.ApplicationProcess);\n        break;\n      case ElementType.ApplicationService:\n        this.parseArchimateElement(el, ElementType.ApplicationService);\n        break;\n      case ElementType.DataObject:\n        this.parseArchimateElement(el, ElementType.DataObject);\n        break;\n      case ElementType.Artifact:\n        this.parseArchimateElement(el, ElementType.Artifact);\n        break;\n      case ElementType.CommunicationNetwork:\n        this.parseArchimateElement(el, ElementType.CommunicationNetwork);\n        break;\n      case ElementType.CommunicationPath:\n        this.parseArchimateElement(el, ElementType.CommunicationPath);\n        break;\n      case ElementType.Device:\n        this.parseArchimateElement(el, ElementType.Device);\n        break;\n      case ElementType.InfrastructureFunction:\n        this.parseArchimateElement(el, ElementType.InfrastructureFunction);\n        break;\n      case ElementType.InfrastructureInterface:\n        this.parseArchimateElement(el, ElementType.InfrastructureInterface);\n        break;\n      case ElementType.InfrastructureService:\n        this.parseArchimateElement(el, ElementType.InfrastructureService);\n        break;\n      case ElementType.Network:\n        this.parseArchimateElement(el, ElementType.Network);\n        break;\n      case ElementType.Node:\n        this.parseArchimateElement(el, ElementType.Node);\n        break;\n      case ElementType.Path:\n        this.parseArchimateElement(el, ElementType.Path);\n        break;\n      case ElementType.SystemSoftware:\n        this.parseArchimateElement(el, ElementType.SystemSoftware);\n        break;\n      case ElementType.TechnologyCollaboration:\n        this.parseArchimateElement(el, ElementType.TechnologyCollaboration);\n        break;\n      case ElementType.TechnologyEvent:\n        this.parseArchimateElement(el, ElementType.TechnologyEvent);\n        break;\n      case ElementType.TechnologyFunction:\n        this.parseArchimateElement(el, ElementType.TechnologyFunction);\n        break;\n      case ElementType.TechnologyInteraction:\n        this.parseArchimateElement(el, ElementType.TechnologyInteraction);\n        break;\n      case ElementType.TechnologyInterface:\n        this.parseArchimateElement(el, ElementType.TechnologyInterface);\n        break;\n      case ElementType.TechnologyObject:\n        this.parseArchimateElement(el, ElementType.TechnologyObject);\n        break;\n      case ElementType.TechnologyProcess:\n        this.parseArchimateElement(el, ElementType.TechnologyProcess);\n        break;\n      case ElementType.TechnologyService:\n        this.parseArchimateElement(el, ElementType.TechnologyService);\n        break;\n      case ElementType.DistributionNetwork:\n        this.parseArchimateElement(el, ElementType.DistributionNetwork);\n        break;\n      case ElementType.Equipment:\n        this.parseArchimateElement(el, ElementType.Equipment);\n        break;\n      case ElementType.Facility:\n        this.parseArchimateElement(el, ElementType.Facility);\n        break;\n      case ElementType.Material:\n        this.parseArchimateElement(el, ElementType.Material);\n        break;\n      case ElementType.Assessment:\n        this.parseArchimateElement(el, ElementType.Assessment);\n        break;\n      case ElementType.Constraint:\n        this.parseArchimateElement(el, ElementType.Constraint);\n        break;\n      case ElementType.Driver:\n        this.parseArchimateElement(el, ElementType.Driver);\n        break;\n      case ElementType.Goal:\n        this.parseArchimateElement(el, ElementType.Goal);\n        break;\n      case ElementType.Meaning:\n        this.parseArchimateElement(el, ElementType.Meaning);\n        break;\n      case ElementType.Outcome:\n        this.parseArchimateElement(el, ElementType.Outcome);\n        break;\n      case ElementType.Principle:\n        this.parseArchimateElement(el, ElementType.Principle);\n        break;\n      case ElementType.Requirement:\n        this.parseArchimateElement(el, ElementType.Requirement);\n        break;\n      case ElementType.Stakeholder:\n        this.parseArchimateElement(el, ElementType.Stakeholder);\n        break;\n      case ElementType.Value:\n        this.parseArchimateElement(el, ElementType.Value);\n        break;\n      case ElementType.Deliverable:\n        this.parseArchimateElement(el, ElementType.Deliverable);\n        break;\n      case ElementType.Gap:\n        this.parseArchimateElement(el, ElementType.Gap);\n        break;\n      case ElementType.ImplementationEvent:\n        this.parseArchimateElement(el, ElementType.ImplementationEvent);\n        break;\n      case ElementType.Plateau:\n        this.parseArchimateElement(el, ElementType.Plateau);\n        break;\n      case ElementType.WorkPackage:\n        this.parseArchimateElement(el, ElementType.WorkPackage);\n        break;\n      case ElementType.AndJunction:\n      case ElementType.Junction:\n      case ElementType.OrJunction:\n        const jTypeAttr = el.attributes.getNamedItem(\"type\");\n        if (jTypeAttr && jTypeAttr.value === \"or\") {\n          this.parseArchimateElement(el, ElementType.OrJunction);\n        } else {\n          this.parseArchimateElement(el, ElementType.Junction);\n        }\n        break;\n      case ElementType.Capability:\n        this.parseArchimateElement(el, ElementType.Capability);\n        break;\n      case ElementType.CourseOfAction:\n        this.parseArchimateElement(el, ElementType.CourseOfAction);\n        break;\n      case ElementType.Resource:\n        this.parseArchimateElement(el, ElementType.Resource);\n        break;\n      case ElementType.Grouping:\n        this.parseArchimateElement(el, ElementType.Grouping);\n        break;\n      case RelationshipType.Composition:\n        this.parseArchimateRelationship(el, RelationshipType.Composition);\n        break;\n      case RelationshipType.Aggregation:\n        this.parseArchimateRelationship(el, RelationshipType.Aggregation);\n        break;\n      case RelationshipType.Assignment:\n        this.parseArchimateRelationship(el, RelationshipType.Assignment);\n        break;\n      case RelationshipType.Realization:\n      case RelationshipType.Realisation:\n        this.parseArchimateRelationship(el, RelationshipType.Realization);\n        break;\n      case RelationshipType.Serving:\n      case RelationshipType.UsedBy:\n        this.parseArchimateRelationship(el, RelationshipType.Serving);\n        break;\n      case RelationshipType.Access:\n        this.parseArchimateRelationship(el, RelationshipType.Access);\n        break;\n      case RelationshipType.Influence:\n        this.parseArchimateRelationship(el, RelationshipType.Influence);\n        break;\n      case RelationshipType.Triggering:\n        this.parseArchimateRelationship(el, RelationshipType.Triggering);\n        break;\n      case RelationshipType.Flow:\n        this.parseArchimateRelationship(el, RelationshipType.Flow);\n        break;\n      case RelationshipType.Specialization:\n      case RelationshipType.Specialisation:\n        this.parseArchimateRelationship(el, RelationshipType.Specialization);\n        break;\n      case RelationshipType.Association:\n        this.parseArchimateRelationship(el, RelationshipType.Association);\n        break;\n      case RelationshipType.Junction:\n        this.parseArchimateRelationship(el, RelationshipType.Junction);\n        break;\n      case RelationshipType.AndJunction:\n        this.parseArchimateRelationship(el, RelationshipType.AndJunction);\n        break;\n      case RelationshipType.OrJunction:\n        this.parseArchimateRelationship(el, RelationshipType.OrJunction);\n        break;\n      case DiagramType.ArchimateDiagramModel:\n        this.parseArchimateDiagram(el, DiagramType.ArchimateDiagramModel);\n        break;\n      case DiagramType.SketchModel:\n        this.parseArchimateDiagram(el, DiagramType.SketchModel);\n        break;\n      default:\n        throw new Error(`Unexpected Element Type ${typeStr}`);\n    }\n  }\n}\n","import { Connection } from \"../../connection\";\nimport { ParserError } from \"../../interfaces\";\nimport { Model } from \"../../model\";\nimport { DocumentationParser } from \"./documentation-parser\";\nimport { getStringAttribute } from \"./dom-helpers\";\nimport { ElementTagParser } from \"./element-tag-parser\";\nimport { FolderParser } from \"./folder-parser\";\n\nexport class ArchiFileReader {\n  public parse(doc: XMLDocument) {\n    const model = this.parseModel(doc);\n    return this.fixBendpoints(model);\n  }\n\n  private parseModel(doc: XMLDocument) {\n    const model = new Model();\n    const modelNodes = doc.getElementsByTagNameNS(\n      \"http://www.archimatetool.com/archimate\",\n      \"model\"\n    );\n    if (modelNodes.length === 0) {\n      throw new ParserError(\"Couldn't find a Model in the XMLDocument\");\n    }\n    const modelNode = modelNodes[0];\n    model.id = getStringAttribute(modelNode, \"id\") || model.makeUniqueId();\n    model.name = getStringAttribute(modelNode, \"name\") || \"ArchiMate Model\";\n    model.documentation =\n      new DocumentationParser().value(modelNode, \"purpose\") || \"\";\n    model.organizations = new FolderParser(model).organizations(modelNode);\n    const elementTagParser = new ElementTagParser(model, doc);\n    elementTagParser.elements();\n    return model;\n  }\n\n  private fixBendpoints(model: Model) {\n    const dConns = model.diagrams.map(d => d.connections);\n    const connections: Connection[] = new Array<Connection>().concat(...dConns);\n    connections.forEach(connection => {\n      connection.bendpoints.forEach(bendpoint => {\n        bendpoint.x += connection.startLocation().x;\n        bendpoint.y += connection.startLocation().y;\n      });\n    });\n    return model;\n  }\n}\n","import * as React from \"react\";\nimport { Connection, Path, ViewNode } from \"../../archimate-model\";\nimport { entityClickedFunc } from \"../common\";\nimport \"./archimate-svg.css\";\n\ninterface IProps {\n  connection: Connection;\n  onClicked?: entityClickedFunc;\n  selected: boolean;\n  autoLayout?: boolean;\n  fromX: number;\n  fromY: number;\n  toX: number;\n  toY: number;\n}\n\ninterface IState {\n  path: Path;\n  sourceEntity: ViewNode | Connection;\n  targetEntity: ViewNode | Connection;\n}\n\nexport default class ArchimateConnection extends React.PureComponent<\n  IProps,\n  IState\n> {\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      path: new Path(this.props.connection, this.props.autoLayout),\n      sourceEntity: this.props.connection.sourceViewNode(),\n      targetEntity: this.props.connection.targetViewNode()\n    };\n  }\n\n  public render() {\n    // If the target is contained in the source, then don't render this connection\n    // return if connection.source.nodes.include?(connection.target)\n    if (\n      this.state.sourceEntity === undefined ||\n      this.state.targetEntity === undefined ||\n      this.state.targetEntity.inside(this.state.sourceEntity)\n    ) {\n      return null;\n    }\n    return (\n      <g {...this.groupAttrs()}>\n        <path {...this.pathAttrs()}>\n          <title>{this.props.connection.documentation}</title>\n        </path>\n        {this.selectedHighlight()}\n        {this.lineText()}\n      </g>\n    );\n  }\n\n  public componentDidUpdate(prevProps: IProps) {\n    if (\n      this.props.fromX !== prevProps.fromX ||\n      this.props.fromY !== prevProps.fromY ||\n      this.props.toX !== prevProps.toX ||\n      this.props.toY !== prevProps.toY ||\n      this.props.autoLayout !== prevProps.autoLayout\n    ) {\n      this.setState({\n        path: new Path(this.props.connection, this.props.autoLayout)\n      });\n    }\n  }\n\n  private selectedHighlight() {\n    if (!this.props.selected) {\n      return undefined;\n    }\n    const attrs = this.pathAttrs();\n    attrs.className = \"archimate-selected-element-highlight\";\n    return <path {...attrs} />;\n  }\n\n  private groupAttrs(): React.SVGProps<SVGGElement> {\n    const attrs: React.SVGProps<SVGGElement> = { id: this.props.connection.id };\n    if (this.props.onClicked) {\n      attrs.onClick = this.props.onClicked.bind(\n        this,\n        this.props.connection.entityInstance()\n      );\n    }\n    return attrs;\n  }\n\n  private lineText(): JSX.Element | undefined {\n    const relationship = this.props.connection.entityInstance();\n    const name = relationship ? relationship.name : undefined;\n    if (name === undefined || name.length === 0) {\n      return undefined;\n    }\n    const pt = this.state.path.point(this.text_position());\n    return (\n      <text\n        className=\"archimate-relationship-name\"\n        x={pt.x}\n        y={pt.y}\n        textAnchor=\"middle\"\n        style={this.textStyle()}\n      >\n        {name}\n      </text>\n    );\n  }\n\n  private lineStyle(): React.CSSProperties {\n    const style = this.props.connection.style;\n    if (style === undefined) {\n      return {};\n    }\n    const cssStyle: React.CSSProperties = {};\n    if (style.lineColor) {\n      cssStyle.stroke = style.lineColor.toRGBA();\n    }\n    if (style.lineWidth) {\n      cssStyle.strokeWidth = style.lineWidth;\n    }\n    return cssStyle;\n  }\n\n  private textStyle(): React.CSSProperties {\n    const style = this.props.connection.style;\n    if (style === undefined) {\n      return {};\n    }\n    const cssStyle: React.CSSProperties = {};\n    if (style.fontColor) {\n      cssStyle.fill = style.fontColor.toRGBA();\n      cssStyle.color = style.fontColor.toRGBA();\n    }\n    if (style.font) {\n      if (style.font.name) {\n        cssStyle.fontFamily = style.font.name;\n      }\n      if (style.font.size) {\n        cssStyle.fontSize = style.font.size;\n      }\n    }\n    if (style.textAlignment) {\n      cssStyle.textAlign = style.textAlignment;\n    }\n    return cssStyle;\n  }\n\n  private text_position(): number {\n    const optTp: number | undefined = undefined;\n    if (optTp === undefined) {\n      return 0.5;\n    }\n    const tp = optTp as number;\n    switch (tp) {\n      case 0:\n        return 0.1; // \"10%\"\n      case 1:\n        return 0.9; // \"90%\"\n      default:\n        return 0.5; // \"50%\"\n    }\n  }\n\n  private pathAttrs(): React.SVGProps<SVGPathElement> {\n    return {\n      className: this.pathClass(),\n      d: this.state.path.d(),\n      id: this.id(),\n      style: this.lineStyle()\n    };\n  }\n\n  private id(): string {\n    const rel = this.props.connection.entityInstance();\n    if (rel) {\n      return rel.id;\n    }\n    return this.props.connection.id;\n  }\n\n  // Look at the type (if any of the path and set the class appropriately)\n  private pathClass(): string {\n    const rel = this.props.connection.entityInstance();\n    const type = rel ? rel.type : \"default\";\n    return (\n      [\"archimate\", this.cssClassify(type)].join(\"-\") +\n      \" archimate-relationship\"\n    );\n  }\n\n  private cssClassify(str: string): string {\n    return str\n      .replace(/::/, \"/\")\n      .replace(\"Relationship\", \"\")\n      .replace(/([A-Z]+)([A-Z][a-z])/, \"$1-$2\")\n      .replace(/([a-z\\d])([A-Z])/, \"$1-$2\")\n      .toLowerCase();\n  }\n}\n","import * as React from \"react\";\nimport \"./archimate-svg.css\";\n\ninterface IProps {\n  diagramName: string | undefined;\n  viewBox: SVGRect | undefined;\n}\n\nexport default class ArchimateSvg extends React.PureComponent<IProps> {\n  public render() {\n    const style2: React.CSSProperties = {\n      fill: \"none\",\n      stroke: \"inherit\",\n      strokeLinecap: \"butt\",\n      strokeLinejoin: \"miter\",\n      strokeWidth: 1,\n    };\n    const style3: React.CSSProperties = {\n      fill: \"none\",\n      stroke: \"inherit\",\n      strokeLinecap: \"round\",\n      strokeLinejoin: \"round\",\n      strokeWidth: 1,\n    };\n    const style4: React.CSSProperties = {\n      fill: \"none\",\n      stroke: \"inherent\",\n      strokeWidth: 0.7\n    };\n    // const vb: SVGRect = this.props.viewBox || {x: 0, y: 0, width: 800, height: 800};\n    return (\n      <svg\n        className=\"archimate-svg\"\n        version=\"1.1\"\n        // viewBox={`${vb.x} ${vb.y} ${vb.width} ${vb.height}`}\n        // preserveAspectRatio=\"xMidYMid\"\n        preserveAspectRatio=\"none\"\n        zoomAndPan=\"magnify\"\n      >\n        <title>{this.props.diagramName}</title>\n        <defs>\n          <linearGradient\n            id=\"archimate-highlight-color\"\n            gradientUnits=\"userSpaceOnUse\"\n            spreadMethod=\"reflect\"\n            x1=\"0\"\n            y1=\"0\"\n            x2=\"1\"\n            y2=\"1\"\n          >\n            <stop offset=\"0%\" stopColor=\"black\" />\n            <stop offset=\"100%\" stopColor=\"white\" />\n          </linearGradient>\n          <symbol\n            id=\"archimate-material-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 20\"\n          >\n            <path\n              style={{\n                fill: \"none\",\n                stroke: \"inherit\",\n                strokeLinejoin: \"miter\",\n                strokeWidth: 1,\n              }}\n              d=\"M 15.443383,8.5890552 5.0182941,17.265414 -7.7081977,12.575201 -10.0096,-0.7913701 0.41548896,-9.4677289 13.141981,-4.7775163 Z\"\n              transform=\"matrix(0.59818877,-0.22354387,0.22387513,0.59808805,7.5647066,7.7263348)\"\n            />\n            <path\n              style={style2}\n              d=\"M 4.5472185,10.333586 8.1220759,4.0990346\"\n            />\n            <path style={style2} d=\"m 12.154515,4.0418369 3.51766,6.2917491\" />\n            <path style={style2} d=\"m 6.5491386,14.223031 7.0925174,-0.0572\" />\n          </symbol>\n          <symbol\n            id=\"archimate-distribution-network-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 20\"\n          >\n            <path\n              style={style3}\n              d=\"M 5.8847321,2.5480283 1.4964611,6.7745197 5.7431749,10.596562\"\n            />\n            <path style={style2} d=\"m 3.5995956,4.8129424 12.6592514,0\" />\n            <path d=\"m 3.5995956,8.6754298 13.2861464,0\" style={style2} />\n            <path\n              d=\"m 14.314928,2.7502528 4.388271,4.2264914 -4.246714,3.8220418\"\n              style={style3}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-facility-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 20\"\n          >\n            <path\n              style={{\n                fill: \"none\",\n                stroke: \"inherit\",\n                strokeLinejoin: \"miter\",\n                strokeWidth: 1,\n              }}\n              d=\"m 2.1449144,17.940882 0,-15.7007732 2.1735133,0 0,10.2383912 4.5472185,-2.7740891 0,2.8598861 4.4900208,-2.888485 0,2.74549 4.51862,-2.6882923 0,8.2078723 z\"\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-equipment-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 20\"\n          >\n            <g transform=\"translate(0,-7)\">\n              <circle cx=\"8\" cy=\"18.7\" r=\"2.432014\" style={style4} />\n              <circle cx=\"13.7\" cy=\"12.6\" r=\"2.0318091\" style={style4} />\n              <path\n                d=\"m 10.419829,13.456928 -1.089422,-0.143227 0.049633,-1.333107 1.038029,-0.147302 0.341694,-0.73592 -0.57155,-0.843058 0.841528,-0.8648267 0.957991,0.4937924 0.912018,-0.3836763 0.17842,-0.962147 1.316037,-0.019985 0.101237,0.9711183 0.869824,0.3547524 0.771707,-0.6499933 0.91403,0.8676982 -0.566748,0.882319 0.356276,0.832942 0.930473,0.02346 0.06356,1.262322 -1.035165,0.180358 -0.419167,0.824685 0.690443,0.793236 -0.972585,0.907704 -0.733596,-0.578471 -0.952142,0.360765 -0.169839,0.993647 -1.356163,-0.0029 -0.122641,-0.947842 -0.848419,-0.378029 -0.857761,0.70726 -0.979897,-0.985107 0.737388,-0.77599 z\"\n                style={{\n                  fill: \"none\",\n                  stroke: \"inherit\",\n                  strokeLinejoin: \"bevel\",\n                  strokeWidth: 0.8,\n                }}\n              />\n              <path\n                style={{\n                  fill: \"none\",\n                  stroke: \"inherit\",\n                  strokeLinejoin: \"bevel\",\n                  strokeWidth: 0.8,\n                }}\n                d=\"m 3.5980557,18.939362 -1.3122324,-0.550291 0.5156318,-1.650873 1.3468917,0.16932 0.6772813,-0.804271 -0.4271363,-1.249401 1.3455665,-0.795275 1.0287534,0.944094 1.2699024,-0.169321 0.550291,-1.142912 1.6508729,0.423301 -0.203979,1.2494 0.965921,0.740114 1.185242,-0.550291 0.846601,1.396892 -1.00825,0.91076 0.161649,1.163414 1.154418,0.346312 -0.350147,1.600872 -1.354562,-0.12699 -0.804272,0.888931 0.592621,1.227572 L 9.9052376,23.764991 9.1856262,22.791399 7.8733938,22.918389 7.3231027,24.103632 5.6298996,23.638001 5.7992199,22.410428 4.8679581,21.648487 3.5557257,22.241108 2.666794,20.674895 3.8520362,19.955284 Z\"\n              />\n            </g>\n          </symbol>\n          <symbol\n            id=\"archimate-resource-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 20\"\n          >\n            <rect\n              style={{ fill: \"none\", stroke: \"inherit\", strokeWidth: 0.7 }}\n              width=\"1.6\"\n              height=\"3.3\"\n              x=\"17\"\n              y=\"5\"\n              ry=\"0.8\"\n              rx=\"0.8\"\n            />\n            <rect\n              style={{ fill: \"none\", stroke: \"inherit\", strokeWidth: 0.7 }}\n              width=\"14\"\n              height=\"9\"\n              x=\"3\"\n              y=\"2\"\n              ry=\"1.2\"\n            />\n            <path\n              style={{ fill: \"none\", stroke: \"inherit\", strokeWidth: 1 }}\n              d=\"m 6,4 v 4.4 m 3 -4.4 v 4.4 m 3 -4.4 v 4.4\"\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-outcome-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 15\"\n          >\n            <circle\n              style={{\n                fill: \"none\",\n                stroke: \"inherit\",\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                strokeWidth: 0.9,\n              }}\n              cx=\"9.0192108\"\n              cy=\"11.324571\"\n              r=\"1.718908\"\n            />\n            <circle\n              style={{\n                fill: \"none\",\n                stroke: \"inherit\",\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                strokeWidth: 0.9,\n              }}\n              cx=\"9.1405458\"\n              cy=\"11.304347\"\n              r=\"3.5591507\"\n            />\n            <circle\n              style={{\n                fill: \"none\",\n                stroke: \"inherit\",\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                strokeWidth: 0.9,\n              }}\n              cx=\"9.0798788\"\n              cy=\"11.324571\"\n              r=\"5.2982812\"\n            />\n            <path\n              style={{\n                fill: \"inherit\",\n                stroke: \"inherit\",\n                strokeLinecap: \"butt\",\n                strokeLinejoin: \"round\",\n                strokeWidth: 0.6,\n              }}\n              d=\"M 8.7563195,11.547017 9.4236603,8.0485339 12.598584,10.940344 Z\"\n            />\n            <path\n              style={{\n                fill: \"none\",\n                stroke: \"inherit\",\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"miter\",\n                strokeWidth: 1.4,\n              }}\n              d=\"M 16.097068,4.2264914 10.920121,9.6258847\"\n            />\n            <path\n              style={{\n                fill: \"none\",\n                stroke: \"inherit\",\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"miter\",\n                strokeWidth: 0.9,\n              }}\n              d=\"M 14.742164,2.2244692 13.811931,6.3296259\"\n            />\n            <path\n              style={{\n                fill: \"none\",\n                stroke: \"inherit\",\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"miter\",\n                strokeWidth: 0.9,\n              }}\n              d=\"M 18.200202,5.0151668 13.953489,6.5318504\"\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-course-of-action-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 20\"\n          >\n            <circle\n              style={{ fill: \"inherit\", stroke: \"inherit\", strokeWidth: 1 }}\n              cx=\"14.5\"\n              cy=\"6\"\n              r=\"1\"\n            />\n            <circle\n              style={{ fill: \"none\", stroke: \"inherit\", strokeWidth: 1 }}\n              cx=\"14.5\"\n              cy=\"6\"\n              r=\"2.8\"\n            />\n            <circle\n              style={{ fill: \"none\", stroke: \"inherit\", strokeWidth: 1 }}\n              cx=\"14.5\"\n              cy=\"6\"\n              r=\"4.6\"\n            />\n            <path\n              style={{\n                fill: \"inherit\",\n                stroke: \"inherit\",\n                strokeLinecap: \"butt\",\n                strokeLinejoin: \"miter\",\n                strokeWidth: 1,\n              }}\n              d=\"M 1.1664063,14.167969 C 2.5664063,12.167969 4.1,10.95 5.6,9.85 L 4.5,9 C 4.3,8.25 4.54,7.9 5.25,7.9 l 4.5,0.6 c -0.5108623,0.013713 1.081001,-0.037861 0.5,1.1 l -3,3.7 c -0.6,0.4 -1,0.25 -1.2,-0.15 L 6.01,11.75 C 4.5,12.5 3.5,14 2.5,15 1.83125,15.09375 1.1875,14.617188 1.1703125,14.171875 Z\"\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-capability-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 20\"\n          >\n            <rect\n              x=\"4\"\n              y=\"11.5\"\n              width=\"5\"\n              height=\"5\"\n              style={{ fill: \"none\", stroke: \"#423f30\" }}\n            />\n            <rect\n              x=\"9\"\n              y=\"11.5\"\n              width=\"5\"\n              height=\"5\"\n              style={{ fill: \"none\", stroke: \"#423f30\" }}\n            />\n            <rect\n              x=\"14\"\n              y=\"11.5\"\n              width=\"5\"\n              height=\"5\"\n              style={{ fill: \"none\", stroke: \"#423f30\" }}\n            />\n            <rect\n              x=\"9\"\n              y=\"6.5\"\n              width=\"5\"\n              height=\"5\"\n              style={{ fill: \"none\", stroke: \"#423f30\" }}\n            />\n            <rect\n              x=\"14\"\n              y=\"6.5\"\n              width=\"5\"\n              height=\"5\"\n              style={{ fill: \"none\", stroke: \"#423f30\" }}\n            />\n            <rect\n              x=\"14\"\n              y=\"1.5\"\n              width=\"5\"\n              height=\"5\"\n              style={{ fill: \"none\", stroke: \"#423f30\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-diagram-model-reference-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 20\"\n          >\n            <rect\n              x=\"1\"\n              y=\"0.5\"\n              width=\"7\"\n              height=\"7\"\n              style={{ fill: \"none\", stroke: \"#1c6aa9\" }}\n            />\n            <rect\n              x=\"2\"\n              y=\"1.5\"\n              width=\"4.5\"\n              height=\"4.5\"\n              style={{ fill: \"#c2e8fe\", stroke: \"#c2e8fe\" }}\n            />\n            <path d=\"M11 4 h7\" style={{ fill: \"none\", stroke: \"#c2e8fe\" }} />\n            <path d=\"M11 5 h7\" style={{ fill: \"none\", stroke: \"#1c6aa9\" }} />\n            <rect\n              x=\"12\"\n              y=\"8.5\"\n              width=\"2\"\n              height=\"2\"\n              style={{ fill: \"none\", stroke: \"#1c6aa9\" }}\n            />\n            <path d=\"M15 9.5 h3\" style={{ fill: \"none\", stroke: \"#1c6aa9\" }} />\n            <rect\n              x=\"1\"\n              y=\"11.7\"\n              width=\"7\"\n              height=\"7\"\n              style={{ fill: \"none\", stroke: \"#1c6aa9\" }}\n            />\n            <rect\n              x=\"2\"\n              y=\"12.7\"\n              width=\"4.5\"\n              height=\"4.5\"\n              style={{ fill: \"#c2e8fe\", stroke: \"#c2e8fe\" }}\n            />\n            <path d=\"M11 14.7 h7\" style={{ fill: \"none\", stroke: \"#c2e8fe\" }} />\n            <path d=\"M11 15.7 h7\" style={{ fill: \"none\", stroke: \"#1c6aa9\" }} />\n          </symbol>\n          <symbol\n            id=\"archimate-actor-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 20\"\n          >\n            <path\n              d=\"M 11 18 l 4 -5 l 4 5 m -4 -5 v -3 h -4 h 8 h -4 v -3 a 3 3 0 1 0 0 -6 a 3 3 0 1 0 0 6\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-assessment-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 15\"\n          >\n            <path\n              d=\"m4.5 13 l 5 -5 a 4 4 0 1 0 8 -8 a 4 4 0 1 0 -8 8\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-collaboration-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 15\"\n            preserveAspectRatio=\"xMaxYMin meet\"\n          >\n            <path\n              d=\"m7.5 14 a 6.5 6.5 0 0 1 0 -13 a 6.5 6.5 0 0 1 0 13 m 5 0 a 6.5 6.5 0 0 1 0 -13 a 6.5 6.5 0 0 1 0 13\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-communication-path-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 15\"\n          >\n            <path\n              d=\"m7.5 -1 l -6.5 6.5 l 6.5 6.5 m 5 -13 l 6.5 6.5 l -6.5 6.5 m -7 -6.5 h 2 m 1.5 0 h 2 m 1.5 0 h 2\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-constraint-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 15\"\n          >\n            <path\n              d=\"m6 -1 h 13 l -5 10 h -13 z m 4 0 l -5 10\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-device-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 20\"\n          >\n            <rect\n              x=\"2\"\n              y=\"1\"\n              width=\"16\"\n              height=\"10\"\n              rx=\"3\"\n              ry=\"3\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n            <path\n              d=\"M6 11 l -4.5 4 h 17 l -4.5 -4\"\n              stroke=\"black\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-driver-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 15\"\n          >\n            <path\n              d=\"m17.5 6.5 a 6.5 6.5 0 0 0 -13 0 a 6.5 6.5 0 0 0 13 0 m 2 0 h -17 m 8.5 -8.5 v 17 m -6.01 -2.49 l 12.02 -12.02 m 0 12.02 l -12.02 -12.02\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-event-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 20\"\n          >\n            <path\n              d=\"m1 1 a 8 6.5 0 0 1 0 12 h 12 a 6 5.5 0 0 0 0 -12 z\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-function-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 20\"\n            preserveAspectRatio=\"xMaxYMin meet\"\n          >\n            <path\n              d=\"m7 15 l 0 -9 l 6 -5 l 6 5 l 0 9 l -6 -6 z\"\n              style={{ fill: \"none\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-gap-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 15\"\n          >\n            <path\n              d=\"m4.5 5 a 6.5 6.5 0 0 0 13 0 a 6.5 6.5 0 0 0 -13 0 m -2 -1.5 h 17 m -17 3 h 17\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-goal-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 15\"\n          >\n            <circle\n              cx=\"12\"\n              cy=\"6\"\n              r=\"7\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n            <circle\n              cx=\"12\"\n              cy=\"6\"\n              r=\"4.7\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n            <circle\n              cx=\"12\"\n              cy=\"6\"\n              r=\"2\"\n              style={{ fill: \"black\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-interaction-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 15\"\n            preserveAspectRatio=\"xMaxYMin meet\"\n          >\n            <path\n              d=\"M11 14 a 5 6 0 0 1 0 -13 z\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n            <path\n              d=\"M14 14 a 5 6 0 0 0 0 -13 z\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-interface-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 15\"\n            preserveAspectRatio=\"xMaxYMin meet\"\n          >\n            <path\n              d=\"m0.5 6 h 8.5 a 5 5 0 0 1 10 0 a 5 5 0 0 1 -10 0\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-location-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 15\"\n          >\n            <path\n              d=\"m10 6.5 a 5 5, 0, 1, 1, 8 0 l -4 7 z\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-network-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 15\"\n          >\n            <path\n              d=\"m9 9.5 a 2.5 2.5 0 0 0 -5 0 a 2.5 2.5 0 0 0 5 0 m -2 -2.5 l 1 -3 m 0.5 0 a 2.5 2.5 0 0 0 0 -5 a 2.5 2.5 0 0 0 0 5 m 2 -2.5 h 3.5 a 2.5 2.5 0 0 0 5 0 a 2.5 2.5 0 0 0 -5 0 m 2 2.5 l -1 3 m -0.5 0 a 2.5 2.5 0 0 0 0 5 a 2.5 2.5 0 0 0 0 -5 m -2 2.5 h -3.5\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-app-component-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 20\"\n          >\n            <path\n              d=\"m6 4 v -3 h 12 v 17 h -12 v -3 m 0 -4 v -3\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n            <rect\n              x=\"1\"\n              y=\"4\"\n              width=\"9\"\n              height=\"4\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n            <rect\n              x=\"1\"\n              y=\"11\"\n              width=\"9\"\n              height=\"4\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-node-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 20\"\n          >\n            <path\n              d=\"M1 19 v -15 l 3 -3 h 15 v 15 l -3 3 z M 16 19 v -15 l 3 -3 m -3 3 h -15\"\n              style={{\n                fill: \"none\",\n                stroke: \"inherit\",\n                strokeLinejoin: \"miter\",\n              }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-plateau-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 15\"\n          >\n            <path\n              d=\"m7 0 h 12 m -12 1 h 12 m -14 3 h 12 m -12 1 h 12 m -14 3 h 12 m -12 1 h 12\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-principle-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 15\"\n          >\n            <path\n              d=\"m8.5 -1 h 8 a 2 2 0 0 0 2 2 v 9 a 2 2 0 0 0 -2 2 h -8 a 2 2 0 0 0 -2 -2 v -9 a 2 2 0 0 0 2 -2 m 4 1 v7 m 1 -7 v7 m -1 1.5 v2 m 1 -2 v2\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-process-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 15\"\n          >\n            <path\n              d=\"m1 3 h 11 v -4 l 7 6 l -7 6 v -4 h -11 z\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-requirement-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 15\"\n          >\n            <path\n              d=\"m6 -1 h 13 l -5 10 h -13 z\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-role-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 20\"\n          >\n            <path\n              d=\"m15 10.5 h -10 a 4.5 4.5 0 0 1 0 -9 h 10 a 4.5 4.5 0 0 1 0 9 a 4.5 4.5 0 0 1 0 -9\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-service-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 20\"\n          >\n            <rect\n              x=\"1\"\n              y=\"1\"\n              width=\"17\"\n              height=\"10\"\n              rx=\"5\"\n              ry=\"5\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <symbol\n            id=\"archimate-system-software-badge\"\n            className=\"archimate-badge\"\n            viewBox=\"0 0 20 15\"\n          >\n            <path\n              d=\"m9.5 1 a 5.5 5.5 0 0 1 0 11 a 5.5 5.5 0 0 1 0 -11    m -2.8 0.7    a 5.5 5.5 0 1 1 7.6 7.6\"\n              style={{ fill: \"inherit\", stroke: \"inherit\" }}\n            />\n          </symbol>\n          <marker\n            id=\"archimate-dot-marker\"\n            viewBox=\"0 0 10 10\"\n            refX=\"4\"\n            refY=\"4\"\n            markerUnits=\"strokeWidth\"\n            markerWidth=\"10\"\n            markerHeight=\"10\"\n          >\n            <circle cx=\"4\" cy=\"4\" r=\"3\" fill=\"black\" stroke=\"black\" />\n          </marker>\n          <marker\n            id=\"archimate-used-by-arrow\"\n            viewBox=\"0 0 10 10\"\n            refX=\"9\"\n            refY=\"5\"\n            markerUnits=\"strokeWidth\"\n            markerWidth=\"8\"\n            markerHeight=\"8\"\n            orient=\"auto\"\n          >\n            <path\n              d=\"M 1 1 L 9 5 L 1 9\"\n              fill=\"none\"\n              stroke=\"black\"\n              style={{ fill: \"none\", stroke: \"black\" }}\n            />\n          </marker>\n          <marker\n            id=\"archimate-open-arrow\"\n            viewBox=\"0 0 10 10\"\n            refX=\"9\"\n            refY=\"5\"\n            markerUnits=\"strokeWidth\"\n            markerWidth=\"8\"\n            markerHeight=\"8\"\n            orient=\"auto\"\n            stroke=\"black\"\n            fill=\"none\"\n          >\n            <path d=\"M 1 1 L 9 5 L 1 9\" fill=\"none\" stroke=\"black\" />\n          </marker>\n          <marker\n            id=\"archimate-filled-arrow\"\n            viewBox=\"0 0 10 10\"\n            refX=\"9\"\n            refY=\"5\"\n            markerUnits=\"strokeWidth\"\n            markerWidth=\"12\"\n            markerHeight=\"12\"\n            orient=\"auto\"\n          >\n            <polygon points=\"1,1 9,5 1,9\" fill=\"black\" stroke=\"black\" />\n          </marker>\n          <marker\n            id=\"archimate-hollow-arrow\"\n            viewBox=\"0 0 10 10\"\n            refX=\"9\"\n            refY=\"5\"\n            markerUnits=\"strokeWidth\"\n            markerWidth=\"12\"\n            markerHeight=\"12\"\n            orient=\"auto\"\n          >\n            <polygon points=\"1,1 9,5 1,9\" fill=\"white\" stroke=\"black\" />\n          </marker>\n          <marker\n            id=\"archimate-filled-diamond\"\n            viewBox=\"0 0 10 10\"\n            refX=\"1\"\n            refY=\"5\"\n            markerUnits=\"strokeWidth\"\n            markerWidth=\"24\"\n            markerHeight=\"24\"\n            orient=\"auto\"\n          >\n            <polygon points=\"5,2.5 9,5 5,7.5 1,5\" fill=\"black\" stroke=\"black\" />\n          </marker>\n          <marker\n            id=\"archimate-hollow-diamond\"\n            viewBox=\"0 0 25 25\"\n            refX=\"1\"\n            refY=\"12\"\n            markerUnits=\"strokeWidth\"\n            markerWidth=\"24\"\n            markerHeight=\"24\"\n            orient=\"auto\"\n          >\n            <polygon\n              points=\"12.5,6.25 22.5,12.5 12.5,18.75 2.5,12.5\"\n              fill=\"white\"\n              stroke=\"black\"\n            />\n          </marker>\n        </defs>\n        {this.props.children}\n      </svg>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { Bounds } from \"../../archimate-model\";\nimport \"./archimate-svg.css\";\n\ninterface ILine {\n  text: string;\n  maxWidth: number;\n  calcWidth: number;\n}\n\ninterface IProps {\n  text: string;\n  bounds: Bounds;\n  badgeBounds: Bounds;\n  style: React.CSSProperties;\n}\n\ninterface IState {\n  lines: ILine[];\n}\n\nexport default class TextFlow extends React.PureComponent<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      lines: this.lines()\n    };\n  }\n\n  public render() {\n    return <>{this.tspans()}</>;\n  }\n\n  private lines(): ILine[] {\n    const width = this.textWidth(this.props.text);\n    const maxLineWidth = this.maxLineWidth();\n    if (width <= maxLineWidth) {\n      return [\n        { text: this.props.text, maxWidth: maxLineWidth, calcWidth: width }\n      ];\n    }\n    const words = this.props.text.split(\" \");\n    if (words.length === 1) {\n      // TODO: split at maxLineWidth\n      return [{ text: words[0], maxWidth: maxLineWidth, calcWidth: width }];\n    } else {\n      const lines: ILine[] = [];\n      while (words.length > 0) {\n        let line = words.shift() as string;\n        let calcLineWidth = 0;\n        while (\n          words.length > 0 &&\n          this.textWidth(`${line} ${words[0]}`) < maxLineWidth\n        ) {\n          line = `${line} ${words.shift()}`;\n          calcLineWidth = this.textWidth(line);\n        }\n        lines.push({\n          calcWidth: calcLineWidth,\n          maxWidth: maxLineWidth,\n          text: line\n        });\n        line = \"\";\n      }\n      return lines;\n    }\n  }\n\n  private textWidth(str: string): number {\n    const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    const svgDoc = svg.ownerDocument;\n    if (!svgDoc) {\n      return 0;\n    }\n    const text: SVGTextElement = svgDoc.createElementNS(\n      \"http://www.w3.org/2000/svg\",\n      \"text\"\n    );\n    text.setAttribute(\"x\", \"0\");\n    text.setAttribute(\"y\", \"0\");\n    text.insertAdjacentText(\"afterbegin\", str);\n    svg.insertAdjacentElement(\"afterbegin\", text);\n    const body = document.querySelector(\"body\");\n    if (body) {\n      body.insertAdjacentElement(\"beforeend\", svg);\n      const bbox = text.getBBox();\n      body.removeChild(svg);\n      return bbox.width;\n    }\n\n    return 0;\n  }\n\n  private maxLineWidth(idx = 0): number {\n    if (this.props.badgeBounds && this.props.badgeBounds.width > 0) {\n      return this.props.bounds.width - (this.props.badgeBounds.width + 2);\n    } else {\n      return this.props.bounds.width;\n    }\n  }\n\n  private lineX(idx = 0): number {\n    if (this.props.bounds === undefined) {\n      return 0;\n    }\n    const textBounds = this.props.bounds as Bounds;\n    switch (this.props.style.textAnchor) {\n      case \"start\":\n        return textBounds.left;\n      case \"end\":\n        if (idx > 0) {\n          return textBounds.right;\n        } else {\n          return textBounds.right - this.props.badgeBounds.width;\n        }\n      default:\n        if (idx > 0) {\n          return textBounds.center().x;\n        } else {\n          return textBounds.center().x - this.props.badgeBounds.width / 2.0;\n        }\n    }\n  }\n\n  private tspans() {\n    let idx = 0;\n    return this.state.lines.map(line => (\n      <tspan\n        x={this.lineX(idx)}\n        dy=\"1.1em\"\n        className=\"entity-name\"\n        style={this.props.style}\n        key={++idx}\n      >\n        {line.text}\n      </tspan>\n    ));\n  }\n}\n","import { TextAlignProperty, TextAnchorProperty } from \"csstype\";\nimport * as React from \"react\";\nimport { Bounds, ViewNode } from \"../../archimate-model\";\nimport TextFlow from \"./text-flow\";\n\ninterface IProps {\n  child: ViewNode;\n  label: string;\n  textBounds: Bounds;\n  textAlign?: TextAlignProperty;\n  badgeBounds: Bounds;\n}\n\ninterface IState {\n  textAnchor?: TextAnchorProperty;\n  lineHeight: number;\n  bbox?: number;\n  width?: number;\n}\n\n// **StereotypeLabel** < **Label**\n//\n// Split out any stereotype portion to render separately\n//\n// * Replace angle bracket characters with &laquo; and &raquo;\n// * Apply stereotype styling\n// * Position stereotype line as below\n// * Adjust Label start position (move down line height for remaining label\n//\n// Take remaining text\n//\n// **Label**\n//\n// * ctor:\n//     - rect to contain label\n//     - text\n//     - style\n// * Figure out line breaks based on **Text** length\n// * Render each line (that fits in the rect) in an SVG `text` element\nexport default class EntityLabel extends React.PureComponent<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    let textAnchor: TextAnchorProperty = \"middle\";\n    switch (this.props.textAlign) {\n      case \"left\":\n        textAnchor = \"start\";\n        break;\n      case \"right\":\n        textAnchor = \"end\";\n        break;\n    }\n    this.state = {\n      lineHeight: 12, // TODO: This needs to be calculated\n      textAnchor\n    };\n  }\n\n  public render() {\n    if (!this.props.label || this.props.label.length === 0) {\n      return undefined;\n    }\n    const tb = this.props.textBounds;\n    const clipPathId = `${this.props.child.id}-clip-path`;\n    return (\n      <>\n        <clipPath id={clipPathId}>\n          <path d={this.clipPathD()} />\n        </clipPath>\n        <text\n          clipPath={`url(#${clipPathId})`}\n          x={this.lineX()}\n          y={tb.y}\n          style={this.textStyle()}\n        >\n          <TextFlow\n            text={this.props.label}\n            bounds={this.props.textBounds}\n            badgeBounds={this.props.badgeBounds}\n            style={this.textStyle(this.state.textAnchor)}\n          />\n        </text>\n      </>\n    );\n  }\n\n  private clipPathD() {\n    const tb = this.props.textBounds;\n    if (\n      this.props.badgeBounds &&\n      this.props.badgeBounds.height + 2 < tb.height\n    ) {\n      const bb = this.props.badgeBounds;\n      const badgeNotchHeight = bb.height + 2;\n      return [\n        \"M\",\n        tb.left,\n        tb.top,\n        \"h\",\n        tb.width - bb.width - 2,\n        \"v\",\n        badgeNotchHeight,\n        \"h\",\n        bb.width + 2,\n        \"v\",\n        tb.height - badgeNotchHeight,\n        \"h\",\n        -tb.width,\n        \"z\"\n      ]\n        .map(i => i.toString())\n        .join(\" \");\n    } else {\n      return [\n        \"M\",\n        tb.left,\n        tb.top,\n        \"h\",\n        tb.width,\n        \"v\",\n        tb.height,\n        \"h\",\n        -tb.width,\n        \"z\"\n      ]\n        .map(i => i.toString())\n        .join(\" \");\n    }\n  }\n  private lineX(idx = 0) {\n    if (this.props.textBounds === undefined) {\n      return 0;\n    }\n    const textBounds = this.props.textBounds as Bounds;\n    switch (this.state.textAnchor) {\n      case \"start\":\n        return textBounds.left;\n      case \"end\":\n        if (idx > 0) {\n          return textBounds.right;\n        } else {\n          return textBounds.right - this.props.badgeBounds.width;\n        }\n      default:\n        if (idx > 0) {\n          return textBounds.center().x;\n        } else {\n          return textBounds.center().x - this.props.badgeBounds.width / 2.0;\n        }\n    }\n  }\n\n  private textStyle(textAnchor?: TextAnchorProperty): React.CSSProperties {\n    const style = this.props.child.style;\n    if (style === undefined) {\n      return {\n        textAlign: \"center\",\n        textAnchor: \"middle\"\n      };\n    }\n    const cssStyle: React.CSSProperties = {};\n    if (style.fontColor) {\n      cssStyle.fill = style.fontColor.toRGBA();\n    }\n    if (style.font && style.font.name) {\n      cssStyle.fontFamily = style.font.name;\n    }\n    if (style.font && style.font.size) {\n      cssStyle.fontSize = style.font.size;\n    }\n    if (this.props.textAlign) {\n      cssStyle.textAlign = this.props.textAlign;\n    }\n    if (style.textAlignment) {\n      cssStyle.textAlign = style.textAlignment;\n    }\n    cssStyle.textAnchor =\n      textAnchor || (this.state ? this.state.textAnchor : \"middle\");\n    return cssStyle;\n  }\n}\n","import * as React from \"react\";\nimport { Bounds } from \"../../archimate-model\";\n\ninterface IProps {\n  bounds: Bounds;\n}\n\nexport default class SelectedViewNode extends React.PureComponent<IProps> {\n  public render() {\n    const b = this.props.bounds;\n    return (\n      <rect\n        className=\"archimate-selected-element-highlight\"\n        style={{ display: \"inherit\" }}\n        x={b.x}\n        y={b.y}\n        width={b.width}\n        height={b.height}\n      />\n    );\n  }\n}\n","import { TextAlignProperty } from \"csstype\";\nimport * as React from \"react\";\nimport {\n  Bounds,\n  IEntity,\n  Layer,\n  layerClassName,\n  ViewNode,\n  zeroBounds\n} from \"../../../archimate-model\";\nimport { entityClickedFunc } from \"../../common\";\nimport EntityLabel from \"../entity-label\";\nimport SelectedViewNode from \"../selected-view-node\";\n\nexport interface IViewNodeProps {\n  viewNode: ViewNode;\n  onClicked?: entityClickedFunc;\n  selected: boolean;\n  x: number;\n  y: number;\n}\n\nexport interface IViewNodeState {\n  badge?: string;\n  badgeBounds?: Bounds;\n  backgroundClass?: string;\n  bounds: Bounds;\n  entity?: IEntity | undefined;\n  textAlign?: TextAlignProperty;\n  textBounds: Bounds;\n  margin?: number;\n}\n\nexport default class DefaultViewNode extends React.PureComponent<\n  IViewNodeProps,\n  IViewNodeState\n> {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    const bounds = new Bounds(\n      this.props.x || this.props.viewNode.bounds.left,\n      this.props.y || this.props.viewNode.bounds.top,\n      this.props.viewNode.bounds.width,\n      this.props.viewNode.bounds.height\n    );\n    this.state = {\n      backgroundClass: this.defaultBackgroundClass(),\n      badge: undefined,\n      badgeBounds: undefined,\n      bounds,\n      entity: this.props.viewNode.entityInstance(),\n      margin: 8,\n      textAlign: \"center\",\n      textBounds: bounds.reducedBy(2)\n    };\n  }\n\n  public componentDidUpdate(prevProps: IViewNodeProps) {\n    if (this.props.x !== prevProps.x || this.props.y !== prevProps.y) {\n      this.setState({\n        badgeBounds: this.badgeBounds(),\n        textBounds: this.textBounds()\n      });\n    }\n  }\n\n  public render() {\n    return (\n      <g {...this.groupAttrs()}>\n        {this.title()}\n        {this.desc()}\n        {this.entityShape()}\n        {this.entityBadge()}\n        {this.entityLabel()}\n        {this.selectedHighlight()}\n      </g>\n    );\n  }\n\n  protected textBounds(): Bounds {\n    return new Bounds(\n      this.props.x,\n      this.props.y,\n      this.props.viewNode.bounds.width,\n      this.props.viewNode.bounds.height\n    ).reducedBy(2);\n  }\n\n  protected badgeBounds(): Bounds | undefined {\n    return undefined;\n  }\n  protected groupAttrs(): React.SVGProps<SVGGElement> {\n    const attrs: React.SVGProps<SVGGElement> = { id: this.props.viewNode.id };\n    if (this.props.viewNode.type && this.props.viewNode.type.length > 0) {\n      attrs.className = `archimate-${this.elementType()}`;\n    }\n    if (this.props.onClicked) {\n      attrs.onClick = this.props.onClicked.bind(\n        this,\n        this.props.viewNode.entityInstance()\n      );\n    }\n    return attrs;\n  }\n\n  protected title() {\n    if (this.props.viewNode.name && this.props.viewNode.name.length > 0) {\n      return <title>{this.props.viewNode.name}</title>;\n    } else {\n      return undefined;\n    }\n  }\n\n  protected desc() {\n    if (this.props.viewNode.documentation) {\n      return <desc>{this.props.viewNode.documentation}</desc>;\n    } else {\n      return undefined;\n    }\n  }\n\n  protected entityShape() {\n    const bounds = this.props.viewNode.absolutePosition();\n    return (\n      <rect\n        x={bounds.x}\n        y={bounds.y}\n        width={bounds.width}\n        height={bounds.height}\n        className={this.state.backgroundClass}\n        style={this.shapeStyle()}\n      />\n    );\n  }\n\n  protected shapeStyle(): React.CSSProperties {\n    const style = this.props.viewNode.style;\n    if (style === undefined) {\n      return {};\n    }\n    const cssStyle: React.CSSProperties = {};\n    if (style.fillColor) {\n      cssStyle.fill = style.fillColor.toRGBA();\n    }\n    if (style.lineColor) {\n      cssStyle.stroke = style.lineColor.toRGBA();\n    }\n    if (style.lineWidth) {\n      cssStyle.strokeWidth = style.lineWidth;\n    }\n    return cssStyle;\n  }\n\n  protected entityBadge() {\n    if (this.state.badge === undefined) {\n      return undefined;\n    }\n    return <use href={this.state.badge} {...this.badgeBounds()} />;\n  }\n\n  protected entityLabel() {\n    const optLabel = this.label();\n    if (optLabel === undefined) {\n      return undefined;\n    }\n    const label = optLabel as string;\n    return (\n      <EntityLabel\n        child={this.props.viewNode}\n        label={label}\n        textBounds={\n          this.state.textBounds ||\n          this.props.viewNode.absolutePosition().reducedBy(2)\n        }\n        textAlign={this.state.textAlign}\n        badgeBounds={this.state.badgeBounds || zeroBounds()}\n      />\n    );\n  }\n\n  protected selectedHighlight(): React.ReactFragment | undefined {\n    if (this.props.selected) {\n      return (\n        <SelectedViewNode bounds={this.props.viewNode.absolutePosition()} />\n      );\n    } else {\n      return undefined;\n    }\n  }\n\n  protected label(): string | undefined {\n    if (this.props.viewNode.content && this.props.viewNode.content.length > 0) {\n      return this.props.viewNode.content;\n    }\n    if (this.props.viewNode.name && this.props.viewNode.name.length > 0) {\n      return this.props.viewNode.name;\n    }\n    const el = this.props.viewNode.entityInstance();\n    if (el === undefined) {\n      return undefined;\n    }\n    return el.name;\n  }\n\n  protected defaultBackgroundClass(): string {\n    switch (this.elementType()) {\n      case \"BusinessActor\":\n      case \"BusinessCollaboration\":\n      case \"BusinessEvent\":\n      case \"BusinessFunction\":\n      case \"BusinessInteraction\":\n      case \"BusinessInterface\":\n      case \"BusinessObject\":\n      case \"BusinessProcess\":\n      case \"BusinessRole\":\n      case \"BusinessService\":\n      case \"Contract\":\n      case \"Location\":\n      case \"Product\":\n      case \"Representation\":\n        return layerClassName(Layer.Business);\n      case \"ApplicationCollaboration\":\n      case \"ApplicationComponent\":\n      case \"ApplicationEvent\":\n      case \"ApplicationFunction\":\n      case \"ApplicationInteraction\":\n      case \"ApplicationInterface\":\n      case \"ApplicationProcess\":\n      case \"ApplicationService\":\n      case \"DataObject\":\n        return layerClassName(Layer.Application);\n      case \"Artifact\":\n      case \"CommunicationNetwork\":\n      case \"CommunicationPath\":\n      case \"Device\":\n      case \"InfrastructureFunction\":\n      case \"InfrastructureInterface\":\n      case \"InfrastructureService\":\n      case \"Network\":\n      case \"Node\":\n      case \"Path\":\n      case \"SystemSoftware\":\n      case \"TechnologyCollaboration\":\n      case \"TechnologyEvent\":\n      case \"TechnologyFunction\":\n      case \"TechnologyInteraction\":\n      case \"TechnologyInterface\":\n      case \"TechnologyObject\":\n      case \"TechnologyProcess\":\n      case \"TechnologyService\":\n        return layerClassName(Layer.Technology);\n      case \"DistributionNetwork\":\n      case \"Equipment\":\n      case \"Facility\":\n      case \"Material\":\n        return layerClassName(Layer.Physical);\n      case \"Assessment\":\n      case \"Constraint\":\n      case \"Driver\":\n      case \"Goal\":\n      case \"Meaning\":\n      case \"Outcome\":\n      case \"Principle\":\n      case \"Requirement\":\n      case \"Stakeholder\":\n      case \"Value\":\n        return layerClassName(Layer.Motivation);\n      case \"Deliverable\":\n      case \"Gap\":\n      case \"ImplementationEvent\":\n      case \"Plateau\":\n      case \"WorkPackage\":\n        return layerClassName(Layer.ImplementationAndMigration);\n      case \"AndJunction\":\n      case \"Junction\":\n      case \"OrJunction\":\n        return layerClassName(Layer.Connectors);\n      case \"Capability\":\n      case \"CourseOfAction\":\n      case \"Resource\":\n        return layerClassName(Layer.Strategy);\n      case \"Grouping\":\n      case \"Group\":\n      default:\n        return layerClassName(Layer.Other);\n    }\n  }\n\n  protected elementType(): string {\n    const elInst = this.props.viewNode.entityInstance();\n    if (elInst) {\n      return elInst.type;\n    } else {\n      return this.props.viewNode.type;\n    }\n  }\n}\n","import * as React from \"react\";\nimport { Bounds } from \"../../../archimate-model\";\nimport DefaultViewNode, { IViewNodeProps } from \"./default-element\";\n\nexport default class BadgedRectViewNode extends DefaultViewNode {\n  public static path(\n    bounds: Bounds,\n    backgroundClass: string | undefined,\n    style: React.CSSProperties\n  ): JSX.Element {\n    return (\n      <rect\n        x={bounds.x}\n        y={bounds.y}\n        width={bounds.width}\n        height={bounds.height}\n        className={backgroundClass}\n        style={style}\n      />\n    );\n  }\n\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badgeBounds: this.badgeBounds()\n    };\n  }\n\n  protected badgeBounds(): Bounds | undefined {\n    return new Bounds(\n      this.props.viewNode.absolutePosition().right - 25,\n      this.props.viewNode.absolutePosition().top + 5,\n      20,\n      20\n    );\n  }\n\n  protected entityShape() {\n    const bounds = this.props.viewNode.absolutePosition();\n    return (\n      <rect\n        x={bounds.x}\n        y={bounds.y}\n        width={bounds.width}\n        height={bounds.height}\n        className={this.state.backgroundClass}\n        style={this.shapeStyle()}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport { Bounds } from \"../../../archimate-model\";\nimport BadgedRectViewNode from \"./badged-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class ApplicationComponentViewNode extends BadgedRectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n\n    const badge =\n      this.props.viewNode.childType === \"1\"\n        ? \"#archimate-app-component-badge\"\n        : undefined;\n    this.state = {\n      ...this.state,\n      badge,\n      badgeBounds: undefined,\n      textBounds: this.textBounds()\n    };\n  }\n\n  protected badgeBounds(): Bounds | undefined {\n    if (this.props.viewNode.childType === \"1\") {\n      return super.badgeBounds();\n    } else {\n      return undefined;\n    }\n  }\n\n  protected textBounds(): Bounds {\n    if (this.props.viewNode.childType === \"1\") {\n      return super.textBounds();\n    } else {\n      const bounds = this.props.viewNode.absolutePosition();\n      const mainBoxX = bounds.left + 21.0 / 2;\n      return new Bounds(\n        mainBoxX + 21 / 2,\n        bounds.top + 1,\n        bounds.width - 22,\n        bounds.height - 2\n      );\n    }\n  }\n\n  protected entityShape() {\n    if (this.props.viewNode.childType === \"1\") {\n      return super.entityShape();\n    } else {\n      const bounds = this.props.viewNode.absolutePosition();\n      const mainBoxX = bounds.left + 21.0 / 2;\n      const mainBoxWidth = bounds.width - 21 / 2;\n      return (\n        <>\n          <rect\n            x={mainBoxX}\n            y={bounds.top}\n            width={mainBoxWidth}\n            height={bounds.height}\n            className={this.state.backgroundClass}\n            style={this.shapeStyle()}\n          />\n          {this.componentDecoration(bounds.left, bounds.top + 10)}\n          {this.componentDecoration(bounds.left, bounds.top + 30)}\n        </>\n      );\n    }\n  }\n\n  private componentDecoration(left: number, top: number) {\n    return (\n      <>\n        <rect\n          x={left}\n          y={top}\n          width=\"21\"\n          height=\"13\"\n          className={this.state.backgroundClass}\n          style={this.shapeStyle()}\n        />\n        <rect\n          x={left}\n          y={top}\n          width=\"21\"\n          height=\"13\"\n          className=\"archimate-decoration\"\n        />\n      </>\n    );\n  }\n}\n","import * as React from \"react\";\nimport BadgedRectViewNode from \"./badged-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class ArtifactViewNode extends BadgedRectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"archimate-artifact-badge\"\n    };\n  }\n\n  public entityShape(): JSX.Element {\n    const bounds = this.props.viewNode.absolutePosition();\n    const margin = 18;\n    return (\n      <g className={this.state.backgroundClass} style={this.shapeStyle()}>\n        <path\n          d={[\n            \"M\",\n            bounds.left,\n            bounds.top,\n            \"h\",\n            bounds.width - margin,\n            \"l\",\n            margin,\n            margin,\n            \"v\",\n            bounds.height - margin,\n            \"h\",\n            -bounds.width,\n            \"z\"\n          ].join(\" \")}\n        />\n        <path\n          d={[\n            \"M\",\n            bounds.right - margin,\n            bounds.top,\n            \"v\",\n            margin,\n            \"h\",\n            margin,\n            \"z\"\n          ].join(\" \")}\n          className=\"archimate-decoration\"\n        />\n      </g>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { Bounds } from \"../../../archimate-model\";\nimport DefaultViewNode, { IViewNodeProps } from \"./default-element\";\n\nexport default class MotivationViewNode extends DefaultViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badgeBounds: this.badgeBounds()\n    };\n  }\n\n  protected entityShape() {\n    const bounds = this.props.viewNode.absolutePosition();\n    const margin = 10;\n    const width = bounds.width - margin * 2;\n    const height = bounds.height - margin * 2;\n    return (\n      <path\n        d={[\n          \"M\",\n          bounds.left + margin,\n          bounds.top,\n          \"h\",\n          width,\n          \"l\",\n          margin,\n          margin,\n          \"v\",\n          height,\n          \"l\",\n          -margin,\n          margin,\n          \"h\",\n          -width,\n          \"l\",\n          -margin,\n          -margin,\n          \"v\",\n          -height,\n          \"z\"\n        ].join(\" \")}\n        className={this.state.backgroundClass}\n        style={this.shapeStyle()}\n      />\n    );\n  }\n\n  protected badgeBounds(): Bounds {\n    const bounds = this.props.viewNode.absolutePosition();\n    return new Bounds(bounds.right - 25, bounds.top + 5, 20, 20);\n  }\n}\n","import { IViewNodeProps } from \"./default-element\";\nimport MotivationViewNode from \"./motivation-view-node\";\n\nexport default class AssessmentViewNode extends MotivationViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"#archimate-assessment-badge\"\n    };\n  }\n}\n","import BadgedRectViewNode from \"./badged-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class BusinessActorViewNode extends BadgedRectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"#archimate-actor-badge\"\n    };\n  }\n}\n","import BadgedRectViewNode from \"./badged-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class BusinessRoleViewNode extends BadgedRectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"#archimate-role-badge\"\n    };\n  }\n}\n","import BadgedRectViewNode from \"./badged-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class CollaborationViewNode extends BadgedRectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"#archimate-collaboration-badge\"\n    };\n  }\n}\n","import { IViewNodeProps } from \"./default-element\";\nimport MotivationViewNode from \"./motivation-view-node\";\n\nexport default class ConstraintViewNode extends MotivationViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"#archimate-constraint-badge\"\n    };\n  }\n}\n","import * as React from \"react\";\nimport { Bounds } from \"../../../archimate-model\";\nimport DefaultViewNode, { IViewNodeProps } from \"./default-element\";\n\nexport default class DataObjectViewNode extends DefaultViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      margin: 8,\n      textBounds: this.textBounds()\n    };\n  }\n\n  public entityShape(): JSX.Element {\n    const bounds = this.props.viewNode.absolutePosition();\n    const style = this.shapeStyle();\n    const decorStyle: React.CSSProperties = {\n      stroke: style.stroke,\n      strokeWidth: style.strokeWidth\n    };\n    return (\n      <g className={this.state.backgroundClass}>\n        <rect\n          key=\"data-background\"\n          x={bounds.left}\n          y={bounds.top}\n          width={bounds.width}\n          height={bounds.height}\n          className={this.state.backgroundClass}\n          style={style}\n        />\n        <rect\n          key=\"data-decoration\"\n          x={bounds.left}\n          y={bounds.top}\n          width={bounds.width}\n          height={this.state.margin}\n          className=\"archimate-decoration\"\n          style={decorStyle}\n        />\n      </g>\n    );\n  }\n\n  protected textBounds() {\n    const textBounds = super.textBounds();\n    const margin: number = 8;\n    return new Bounds(\n      textBounds.left,\n      textBounds.top + margin,\n      textBounds.width,\n      textBounds.height - margin\n    );\n  }\n}\n","import * as React from \"react\";\nimport DataObjectViewNode from \"./data-object-view-node\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class ContractViewNode extends DataObjectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      margin: 8\n    };\n  }\n\n  public entityShape(): JSX.Element {\n    const bounds = this.props.viewNode.absolutePosition();\n    const margin = this.state.margin || 8;\n    return (\n      <g className={this.state.backgroundClass}>\n        <rect\n          x={bounds.left}\n          y={bounds.top}\n          width={bounds.width}\n          height={bounds.height}\n          className={this.state.backgroundClass}\n          style={this.shapeStyle()}\n        />\n        <rect\n          x={bounds.left}\n          y={bounds.top}\n          width={bounds.width}\n          height={margin}\n          className=\"archimate-decoration\"\n        />\n        <rect\n          x={bounds.left}\n          y={bounds.top + bounds.height - margin}\n          width={bounds.width}\n          height={margin}\n          className=\"archimate-decoration\"\n        />\n      </g>\n    );\n  }\n}\n","import * as React from \"react\";\nimport DefaultViewNode, { IViewNodeProps } from \"./default-element\";\n\nexport default class DeliverableViewNode extends DefaultViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"archimate-artifact-badge\"\n    };\n  }\n\n  public entityShape(): JSX.Element {\n    const bounds = this.props.viewNode.absolutePosition();\n    return (\n      <>\n        <path\n          d={[\n            \"M\",\n            bounds.left,\n            bounds.top,\n            \"v\",\n            bounds.height - 8,\n            \"c\",\n            0.167 * bounds.width,\n            0.133 * bounds.height,\n            0.336 * bounds.width,\n            0.133 * bounds.height,\n            bounds.width * 0.508,\n            0,\n            \"c\",\n            0.0161 * bounds.width,\n            -0.0778 * bounds.height,\n            0.322 * bounds.width,\n            -0.0778 * bounds.height,\n            bounds.width * 0.475,\n            0,\n            \"v\",\n            -(bounds.height - 8),\n            \"z\"\n          ].join(\" \")}\n          className={this.state.backgroundClass}\n          style={this.shapeStyle()}\n        />\n      </>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { Bounds } from \"../../../archimate-model\";\nimport DefaultViewNode, { IViewNodeProps } from \"./default-element\";\n\nexport default class BadgedNodeViewNode extends DefaultViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badgeBounds: this.badgeBounds(),\n      margin: 14,\n      textBounds: this.textBounds()\n    };\n  }\n\n  protected entityShape(): JSX.Element {\n    const bounds = this.props.viewNode.absolutePosition();\n    const margin = this.state.margin || 14;\n    const nodeBoxHeight = bounds.height - margin;\n    const nodeBoxWidth = bounds.width - margin;\n    return (\n      <g className={this.state.backgroundClass} style={this.shapeStyle()}>\n        <path\n          d={[\n            \"M\",\n            bounds.left,\n            bounds.bottom,\n            \"v\",\n            -nodeBoxHeight,\n            \"l\",\n            margin,\n            -margin,\n            \"h\",\n            nodeBoxWidth,\n            \"v\",\n            nodeBoxHeight,\n            \"l\",\n            -margin,\n            margin,\n            \"z\"\n          ].join(\" \")}\n        />\n        <path\n          d={[\n            \"M\",\n            bounds.left,\n            bounds.top + margin,\n            \"l\",\n            margin,\n            -margin,\n            \"h\",\n            nodeBoxWidth,\n            \"v\",\n            nodeBoxHeight,\n            \"l\",\n            -margin,\n            margin,\n            \"v\",\n            -nodeBoxHeight,\n            \"z\",\n            \"M\",\n            bounds.right,\n            bounds.top,\n            \"l\",\n            -margin,\n            margin\n          ].join(\" \")}\n          className=\"archimate-decoration\"\n        />\n        <path\n          d={[\n            \"M\",\n            bounds.left,\n            bounds.top + margin,\n            \"h\",\n            nodeBoxWidth,\n            \"l\",\n            margin,\n            -margin,\n            \"M\",\n            bounds.left + nodeBoxWidth,\n            bounds.bottom,\n            \"v\",\n            -nodeBoxHeight\n          ].join(\" \")}\n          style={{ fill: \"none\", stroke: \"inherit\" }}\n        />\n      </g>\n    );\n  }\n\n  protected badgeBounds(): Bounds {\n    const bounds = this.props.viewNode.absolutePosition();\n    const margin = 14;\n    return new Bounds(\n      bounds.right - margin - 25,\n      bounds.top + margin + 5,\n      20,\n      20\n    );\n  }\n\n  protected textBounds(): Bounds {\n    const bounds = this.props.viewNode.absolutePosition();\n    const margin = 14;\n    const nodeBoxHeight = bounds.height - margin;\n    const nodeBoxWidth = bounds.width - margin;\n    return new Bounds(\n      bounds.left + 1,\n      bounds.top + margin + 1,\n      nodeBoxWidth - 2,\n      nodeBoxHeight - 2\n    );\n  }\n}\n","import * as React from \"react\";\nimport { Bounds } from \"../../../archimate-model\";\nimport BadgedNodeViewNode from \"./badged-node-view-node\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class DeviceViewNode extends BadgedNodeViewNode {\n  public static path(\n    viewNodeBounds: Bounds,\n    backgroundClass: string | undefined,\n    style: React.CSSProperties\n  ): JSX.Element {\n    const bounds = viewNodeBounds;\n    const margin = 10;\n    const decorationPath = [\n      \"M\",\n      bounds.left + margin,\n      bounds.bottom - margin,\n      \"l\",\n      -margin,\n      margin,\n      \"h\",\n      bounds.width,\n      \"l\",\n      -margin,\n      -margin,\n      \"z\"\n    ].join(\" \");\n\n    return (\n      <>\n        <rect\n          x={bounds.left}\n          y={bounds.top}\n          width={bounds.width}\n          height={bounds.height - margin}\n          rx={\"6\"}\n          ry={\"6\"}\n          className={backgroundClass}\n          style={style}\n        />\n        <path d={decorationPath} className={backgroundClass} style={style} />\n        <path\n          d={decorationPath}\n          className=\"archimate-decoration\"\n          style={style}\n        />\n      </>\n    );\n  }\n\n  constructor(props: IViewNodeProps) {\n    super(props);\n    if (this.props.viewNode.childType === \"1\") {\n      this.state = {\n        ...this.state,\n        badge: \"#archimate-device-badge\"\n      };\n    } else {\n      this.state = {\n        ...this.state,\n        badge: undefined,\n        badgeBounds: undefined,\n        textBounds: this.props.viewNode.absolutePosition().reducedBy(2)\n      };\n    }\n  }\n\n  public entityShape(): JSX.Element {\n    if (this.props.viewNode.childType === \"1\") {\n      return super.entityShape();\n    } else {\n      return DeviceViewNode.path(\n        this.props.viewNode.absolutePosition(),\n        this.state.backgroundClass,\n        this.shapeStyle()\n      );\n    }\n  }\n}\n","import BadgedRectViewNode from \"./badged-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class DiagramRefViewNode extends BadgedRectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      backgroundClass: \"archimate-diagram-model-reference-background\",\n      badge: \"#archimate-diagram-model-reference-badge\"\n    };\n  }\n}\n","import BadgedRectViewNode from \"./badged-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class DistributionNetworkViewNode extends BadgedRectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"#archimate-distribution-network-badge\"\n    };\n  }\n}\n","import { IViewNodeProps } from \"./default-element\";\nimport MotivationViewNode from \"./motivation-view-node\";\n\nexport default class DriverViewNode extends MotivationViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"#archimate-driver-badge\"\n    };\n  }\n}\n","import * as React from \"react\";\nimport { Bounds } from \"../../../archimate-model\";\nimport DefaultViewNode, { IViewNodeProps } from \"./default-element\";\n\nexport default class BadgedRoundedRectViewNode extends DefaultViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badgeBounds: this.badgeBounds()\n    };\n  }\n\n  protected entityShape() {\n    const bounds = this.props.viewNode.absolutePosition();\n    return (\n      <rect\n        x={bounds.left}\n        y={bounds.top}\n        width={bounds.width}\n        height={bounds.height}\n        rx={\"5\"}\n        ry={\"5\"}\n        className={this.state.backgroundClass}\n        style={this.shapeStyle()}\n      />\n    );\n  }\n\n  protected badgeBounds(): Bounds | undefined {\n    const bounds = this.props.viewNode.absolutePosition();\n    return new Bounds(bounds.right - 25, bounds.top + 5, 20, 20);\n  }\n}\n","import * as React from \"react\";\nimport { Bounds } from \"../../../archimate-model\";\nimport BadgedRoundedRectViewNode from \"./badged-rounded-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class EventViewNode extends BadgedRoundedRectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    const badge =\n      this.props.viewNode.childType === \"1\"\n        ? undefined\n        : \"#archimate-event-badge\";\n    this.state = {\n      ...this.state,\n      badge,\n      badgeBounds: this.badgeBounds(),\n      textBounds: this.textBounds()\n    };\n  }\n\n  protected entityShape() {\n    if (this.props.viewNode.childType === \"1\") {\n      return this.eventPath();\n    } else {\n      return super.entityShape();\n    }\n  }\n\n  protected badgeBounds(): Bounds | undefined {\n    if (this.props.viewNode.childType === \"1\") {\n      return undefined;\n    } else {\n      return super.badgeBounds();\n    }\n  }\n\n  protected textBounds(): Bounds {\n    if (this.props.viewNode.childType === \"1\") {\n      const textBounds = super.textBounds();\n      const notchX = 18;\n      return new Bounds(\n        textBounds.left + notchX * 0.8,\n        textBounds.top,\n        textBounds.width - notchX,\n        textBounds.height\n      );\n    } else {\n      return super.textBounds();\n    }\n  }\n\n  private eventPath(): JSX.Element {\n    const bounds = this.props.viewNode.absolutePosition();\n    const notchX = 18;\n    const notchHeight = bounds.height / 2.0;\n    const eventWidth = bounds.width * 0.85;\n    const rx = 17;\n    const d = [\n      \"M\",\n      bounds.left,\n      bounds.top,\n      \"l\",\n      notchX,\n      notchHeight,\n      \"l\",\n      -notchX,\n      notchHeight,\n      \"h\",\n      eventWidth,\n      \"a\",\n      rx,\n      notchHeight,\n      0,\n      0,\n      0,\n      0,\n      -bounds.height,\n      \"z\"\n    ].join(\" \");\n    return (\n      <path\n        d={d}\n        className={this.state.backgroundClass}\n        style={this.shapeStyle()}\n      />\n    );\n  }\n}\n","import BadgedRoundedRectViewNode from \"./badged-rounded-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class FunctionViewNode extends BadgedRoundedRectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"#archimate-function-badge\"\n    };\n  }\n}\n","import { Bounds } from \"../../../archimate-model\";\nimport { IViewNodeProps } from \"./default-element\";\nimport DeliverableViewNode from \"./deliverable-view-node\";\n\nexport default class GapViewNode extends DeliverableViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      backgroundClass: \"archimate-implementation2-background\",\n      badge: \"#archimate-gap-badge\",\n      badgeBounds: this.badgeBounds()\n    };\n  }\n\n  protected badgeBounds(): Bounds | undefined {\n    return new Bounds(\n      this.props.viewNode.absolutePosition().right - 25,\n      this.props.viewNode.absolutePosition().top + 5,\n      20,\n      20\n    );\n  }\n}\n","import { IViewNodeProps } from \"./default-element\";\nimport MotivationViewNode from \"./motivation-view-node\";\n\nexport default class GoalViewNode extends MotivationViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"#archimate-goal-badge\"\n    };\n  }\n}\n","import * as React from \"react\";\nimport { Bounds } from \"../../../archimate-model\";\nimport DefaultViewNode, { IViewNodeProps } from \"./default-element\";\n\nexport default class GroupViewNode extends DefaultViewNode {\n  private groupHeaderHeight = 21;\n\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      backgroundClass: \"archimate-group-background\",\n      textAlign: \"left\",\n      textBounds: this.textBounds()\n    };\n  }\n\n  public entityShape(): JSX.Element {\n    const bounds = this.props.viewNode.absolutePosition();\n    return (\n      <>\n        <rect\n          x={bounds.left}\n          y={bounds.top + this.groupHeaderHeight}\n          width={bounds.width}\n          height={bounds.height - this.groupHeaderHeight}\n          className={this.state.backgroundClass}\n          style={this.shapeStyle()}\n        />\n        <rect\n          x={bounds.left}\n          y={bounds.top}\n          width={bounds.width / 2.0}\n          height={this.groupHeaderHeight}\n          className={this.state.backgroundClass}\n          style={this.shapeStyle()}\n        />\n        <rect\n          x={bounds.left}\n          y={bounds.top}\n          width={bounds.width / 2.0}\n          height={this.groupHeaderHeight}\n          className={\"archimate-decoration\"}\n        />\n        )\n      </>\n    );\n  }\n\n  protected textBounds(): Bounds {\n    const bounds = this.props.viewNode.absolutePosition();\n    return new Bounds(\n      bounds.left + 3,\n      bounds.top,\n      bounds.width / 2.0 - 6,\n      this.groupHeaderHeight\n    );\n  }\n}\n","import * as React from \"react\";\nimport { IViewNodeProps } from \"./default-element\";\nimport GroupViewNode from \"./group-view-node\";\n\nexport default class GroupingViewNode extends GroupViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      backgroundClass: \"archimate-grouping-background\",\n      textAlign: \"left\"\n    };\n  }\n\n  public entityShape(): JSX.Element {\n    const bounds = this.props.viewNode.absolutePosition();\n    const groupHeaderHeight = 21;\n    return (\n      <>\n        <rect\n          x={bounds.left}\n          y={bounds.top + groupHeaderHeight}\n          width={bounds.width}\n          height={bounds.height - groupHeaderHeight}\n          className={this.state.backgroundClass}\n          style={this.shapeStyle()}\n        />\n        <path\n          d={[\n            \"M\",\n            bounds.left,\n            bounds.top + groupHeaderHeight - 1,\n            \"v\",\n            -(groupHeaderHeight - 1),\n            \"h\",\n            bounds.width / 2,\n            \"v\",\n            groupHeaderHeight - 1\n          ].join(\" \")}\n          className={this.state.backgroundClass}\n          style={this.shapeStyle()}\n        />\n      </>\n    );\n  }\n}\n","import BadgedRoundedRectViewNode from \"./badged-rounded-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class InteractionViewNode extends BadgedRoundedRectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"#archimate-interaction-badge\"\n    };\n  }\n}\n","import * as React from \"react\";\nimport BadgedRectViewNode from \"./badged-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class InterfaceViewNode extends BadgedRectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    if (this.props.viewNode.childType === \"1\") {\n      this.state = {\n        ...this.state,\n        badge: undefined,\n        badgeBounds: undefined\n      };\n    } else {\n      this.state = {\n        ...this.state,\n        badge: \"#archimate-interface-badge\"\n      };\n    }\n  }\n\n  protected entityShape(): JSX.Element {\n    if (this.props.viewNode.childType === \"1\") {\n      return this.elipsePath();\n    } else {\n      return super.entityShape();\n    }\n  }\n\n  private elipsePath(): JSX.Element {\n    const bounds = this.props.viewNode.absolutePosition();\n    return (\n      <ellipse\n        cx={bounds.left + bounds.width / 2.0}\n        cy={bounds.top + bounds.height / 2.0}\n        rx={bounds.width / 2.0}\n        ry={bounds.height / 2.0}\n        className={this.state.backgroundClass}\n        style={this.shapeStyle()}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport DefaultViewNode, { IViewNodeProps } from \"./default-element\";\n\nexport default class JunctionViewNode extends DefaultViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      backgroundClass: \"archimate-junction-background\"\n    };\n  }\n\n  protected entityLabel() {\n    return undefined;\n  }\n\n  protected entityShape() {\n    const bounds = this.props.viewNode.absolutePosition();\n    const center = bounds.center();\n    const r = Math.min(bounds.width, bounds.height) / 2;\n    return (\n      <circle\n        cx={center.x}\n        cy={center.y}\n        r={r}\n        className={this.state.backgroundClass}\n        style={this.shapeStyle()}\n      />\n    );\n  }\n}\n","import BadgedRectViewNode from \"./badged-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class LocationViewNode extends BadgedRectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      backgroundClass: \"archimate-location-background\",\n      badge: \"#archimate-location-badge\"\n    };\n  }\n}\n","import * as React from \"react\";\nimport { Point } from \"../../../archimate-model\";\nimport DefaultViewNode, { IViewNodeProps } from \"./default-element\";\n\nexport default class MeaningViewNode extends DefaultViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state\n    };\n  }\n\n  public entityShape(): JSX.Element {\n    const bounds = this.props.viewNode.absolutePosition();\n    const pts = [\n      new Point(\n        bounds.left + bounds.width * 0.04,\n        bounds.top + bounds.height * 0.5\n      ),\n      new Point(\n        bounds.left + bounds.width * 0.5,\n        bounds.top + bounds.height * 0.12\n      ),\n      new Point(\n        bounds.left + bounds.width * 0.94,\n        bounds.top + bounds.height * 0.55\n      ),\n      new Point(\n        bounds.left + bounds.width * 0.53,\n        bounds.top + bounds.height * 0.87\n      )\n    ];\n    return (\n      <path\n        d={[\n          \"M\",\n          pts[0].x,\n          pts[0].y,\n          \"C\",\n          pts[0].x - bounds.width * 0.15,\n          pts[0].y - bounds.height * 0.32,\n          pts[1].x - bounds.width * 0.3,\n          pts[1].y - bounds.height * 0.15,\n          pts[1].x,\n          pts[1].y,\n          \"C\",\n          pts[1].x + bounds.width * 0.29,\n          pts[1].y - bounds.height * 0.184,\n          pts[2].x + bounds.width * 0.204,\n          pts[2].y - bounds.height * 0.304,\n          pts[2].x,\n          pts[2].y,\n          \"C\",\n          pts[2].x + bounds.width * 0.028,\n          pts[2].y + bounds.height * 0.295,\n          pts[3].x + bounds.width * 0.156,\n          pts[3].y + bounds.height * 0.088,\n          pts[3].x,\n          pts[3].y,\n          \"C\",\n          pts[3].x - bounds.width * 0.279,\n          pts[3].y + bounds.height * 0.326,\n          pts[0].x - bounds.width * 0.164,\n          pts[0].y + bounds.height * 0.314,\n          pts[0].x,\n          pts[0].y\n        ].join(\" \")}\n        className={this.state.backgroundClass}\n        style={this.shapeStyle()}\n      />\n    );\n  }\n}\n","import BadgedRectViewNode from \"./badged-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class NetworkViewNode extends BadgedRectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"#archimate-network-badge\"\n    };\n  }\n}\n","import BadgedNodeViewNode from \"./badged-node-view-node\";\nimport BadgedRectViewNode from \"./badged-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class NodeViewNode extends BadgedNodeViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    if (this.props.viewNode.childType === \"1\") {\n      this.state = {\n        ...this.state,\n        badge: \"#archimate-node-badge\"\n      };\n    } else {\n      this.state = {\n        ...this.state,\n        badge: undefined,\n        badgeBounds: undefined\n      };\n    }\n  }\n\n  public entityShape(): JSX.Element {\n    if (this.props.viewNode.childType === \"1\") {\n      return BadgedRectViewNode.path(\n        this.props.viewNode.absolutePosition(),\n        this.state.backgroundClass,\n        this.shapeStyle()\n      );\n    } else {\n      return super.entityShape();\n    }\n  }\n}\n","import * as React from \"react\";\nimport DefaultViewNode, { IViewNodeProps } from \"./default-element\";\n\nexport default class NoteViewNode extends DefaultViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      backgroundClass: \"archimate-note-background\",\n      textAlign: \"left\",\n      textBounds: this.props.viewNode.absolutePosition().reducedBy(3)\n    };\n  }\n\n  public entityShape(): JSX.Element {\n    const bounds = this.props.viewNode.absolutePosition();\n    return (\n      <path\n        d={[\n          \"m\",\n          bounds.left,\n          bounds.top,\n          \"h\",\n          bounds.width,\n          \"v\",\n          bounds.height - 8,\n          \"l\",\n          -8,\n          8,\n          \"h\",\n          -(bounds.width - 8),\n          \"z\"\n        ].join(\" \")}\n        className={this.state.backgroundClass}\n        style={this.shapeStyle()}\n      />\n    );\n  }\n}\n","import { IViewNodeProps } from \"./default-element\";\nimport JunctionViewNode from \"./junction\";\n\nexport default class OrJunctionViewNode extends JunctionViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      backgroundClass: \"archimate-or-junction-background\"\n    };\n  }\n}\n","import { IViewNodeProps } from \"./default-element\";\nimport MotivationViewNode from \"./motivation-view-node\";\n\nexport default class OutcomeViewNode extends MotivationViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"#archimate-outcome-badge\"\n    };\n  }\n}\n","import BadgedRectViewNode from \"./badged-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class PathViewNode extends BadgedRectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"#archimate-communication-path-badge\"\n    };\n  }\n}\n","import BadgedNodeViewNode from \"./badged-node-view-node\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class PlateauViewNode extends BadgedNodeViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      backgroundClass: \"archimate-implementation2-background\",\n      badge: \"#archimate-plateau-badge\"\n    };\n  }\n}\n","import { IViewNodeProps } from \"./default-element\";\nimport MotivationViewNode from \"./motivation-view-node\";\n\nexport default class PrincipleViewNode extends MotivationViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"#archimate-principle-badge\"\n    };\n  }\n}\n","import * as React from \"react\";\nimport { Bounds, zeroBounds } from \"../../../archimate-model\";\nimport BadgedRoundedRectViewNode from \"./badged-rounded-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class ProcessViewNode extends BadgedRoundedRectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    if (this.props.viewNode.childType === \"1\") {\n      this.state = {\n        ...this.state,\n        badgeBounds: zeroBounds(),\n        textBounds: this.textBounds()\n      };\n    } else {\n      this.state = {\n        ...this.state,\n        badge: \"#archimate-process-badge\"\n      };\n    }\n  }\n\n  protected entityShape(): JSX.Element {\n    if (this.props.viewNode.childType === \"1\") {\n      return this.processPath();\n    } else {\n      return super.entityShape();\n    }\n  }\n\n  protected textBounds(): Bounds {\n    const bounds = this.props.viewNode.absolutePosition();\n    const shaftTop = bounds.top + bounds.height * 0.15;\n    const shaftBottom = bounds.bottom - bounds.height * 0.15;\n    const left = bounds.left;\n    const textBounds = new Bounds(\n      left,\n      shaftTop,\n      bounds.width - bounds.height * 0.25,\n      shaftBottom - shaftTop\n    );\n    return textBounds.reducedBy(2);\n  }\n\n  private processPath(): JSX.Element {\n    const bounds = this.props.viewNode.absolutePosition();\n    const top = bounds.top;\n    const shaftTop = bounds.top + bounds.height * 0.15;\n    const middle = bounds.top + bounds.height * 0.5;\n    const shaftBottom = bounds.bottom - bounds.height * 0.15;\n    const bottom = bounds.bottom;\n\n    const left = bounds.left;\n    const arrowBack = bounds.right - bounds.height * 0.5;\n    const right = bounds.right;\n    return (\n      <path\n        d={[\n          \"M\",\n          left,\n          shaftTop,\n          \"L\",\n          arrowBack,\n          shaftTop,\n          \"L\",\n          arrowBack,\n          top,\n          \"L\",\n          right,\n          middle,\n          \"L\",\n          arrowBack,\n          bottom,\n          \"L\",\n          arrowBack,\n          shaftBottom,\n          \"L\",\n          left,\n          shaftBottom,\n          \"z\"\n        ].join(\" \")}\n        className={this.state.backgroundClass}\n        style={this.shapeStyle()}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport DataObjectViewNode from \"./data-object-view-node\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class ProductViewNode extends DataObjectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state\n    };\n  }\n\n  public entityShape(): JSX.Element {\n    const bounds = this.props.viewNode.absolutePosition();\n    return (\n      <g className={this.state.backgroundClass}>\n        <rect\n          x={bounds.left}\n          y={bounds.top}\n          width={bounds.width}\n          height={bounds.height}\n          className={this.state.backgroundClass}\n          style={this.shapeStyle()}\n        />\n        <rect\n          x={bounds.left}\n          y={bounds.top}\n          width={bounds.width / 2.0}\n          height=\"8\"\n          className=\"archimate-decoration\"\n        />\n      </g>\n    );\n  }\n}\n","import * as React from \"react\";\nimport DataObjectViewNode from \"./data-object-view-node\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class RepresentationViewNode extends DataObjectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state\n    };\n  }\n\n  public entityShape(): JSX.Element {\n    const bounds = this.props.viewNode.absolutePosition();\n    return (\n      <>\n        <path\n          d={[\n            \"M\",\n            bounds.left,\n            bounds.top,\n            \"v\",\n            bounds.height - 8,\n            \"c\",\n            0.167 * bounds.width,\n            0.133 * bounds.height,\n            0.336 * bounds.width,\n            0.133 * bounds.height,\n            bounds.width * 0.508,\n            0,\n            \"c\",\n            0.0161 * bounds.width,\n            -0.0778 * bounds.height,\n            0.322 * bounds.width,\n            -0.0778 * bounds.height,\n            bounds.width * 0.475,\n            0,\n            \"v\",\n            -(bounds.height - 8),\n            \"z\"\n          ].join(\" \")}\n          className={this.state.backgroundClass}\n          style={this.shapeStyle()}\n        />\n        <rect\n          key=\"data-decoration\"\n          x={bounds.left}\n          y={bounds.top}\n          width={bounds.width}\n          height={this.state.margin}\n          className=\"archimate-decoration\"\n        />\n      </>\n    );\n  }\n}\n","import { IViewNodeProps } from \"./default-element\";\nimport MotivationViewNode from \"./motivation-view-node\";\n\nexport default class RequirementViewNode extends MotivationViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"#archimate-requirement-badge\"\n    };\n  }\n}\n","import BadgedRectViewNode from \"./badged-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class ResourceViewNode extends BadgedRectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"#archimate-resource-badge\"\n    };\n  }\n}\n","import * as React from \"react\";\nimport { Bounds, zeroBounds } from \"../../../archimate-model\";\nimport BadgedRoundedRectViewNode from \"./badged-rounded-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class ServiceViewNode extends BadgedRoundedRectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    if (this.props.viewNode.childType === \"1\") {\n      this.state = {\n        ...this.state,\n        badgeBounds: zeroBounds(),\n        textBounds: this.textBounds()\n      };\n    } else {\n      this.state = {\n        ...this.state,\n        badge: \"#archimate-service-badge\"\n      };\n    }\n  }\n\n  protected entityShape(): JSX.Element {\n    if (this.props.viewNode.childType === \"1\") {\n      return this.servicePath();\n    } else {\n      return super.entityShape();\n    }\n  }\n\n  protected textBounds(): Bounds {\n    const bounds = this.props.viewNode.absolutePosition();\n    return new Bounds(\n      bounds.left + 7,\n      bounds.top + 5,\n      bounds.width - 14,\n      bounds.height - 10\n    );\n  }\n\n  private servicePath(): JSX.Element {\n    const bounds = this.props.viewNode.absolutePosition();\n    return (\n      <rect\n        x={bounds.left}\n        y={bounds.top}\n        width={bounds.width}\n        height={bounds.height}\n        rx={bounds.height / 2.0}\n        ry={bounds.height / 2.0}\n        className={this.state.backgroundClass}\n        style={this.shapeStyle()}\n      />\n    );\n  }\n}\n","import { IViewNodeProps } from \"./default-element\";\nimport MotivationViewNode from \"./motivation-view-node\";\n\nexport default class StakeholderViewNode extends MotivationViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"#archimate-role-badge\"\n    };\n  }\n}\n","import DefaultViewNode, { IViewNodeProps } from \"./default-element\";\n\nexport default class StickyViewNode extends DefaultViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      backgroundClass: \"archimate-sticky-background\"\n    };\n  }\n}\n","import BadgedRectViewNode from \"./badged-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class SystemSoftwareViewNode extends BadgedRectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: \"#archimate-system-software-badge\"\n    };\n  }\n}\n","import * as React from \"react\";\nimport { Bounds } from \"../../../archimate-model\";\nimport DefaultViewNode, { IViewNodeProps } from \"./default-element\";\n\nexport default class ValueViewNode extends DefaultViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      textBounds: this.textBounds()\n    };\n  }\n\n  public entityShape(): JSX.Element {\n    const bounds = this.props.viewNode.absolutePosition();\n    const cx = bounds.left + bounds.width / 2.0;\n    const rx = bounds.width / 2.0 - 1;\n    const cy = bounds.top + bounds.height / 2.0;\n    const ry = bounds.height / 2.0 - 1;\n    return (\n      <ellipse\n        cx={cx}\n        cy={cy}\n        rx={rx}\n        ry={ry}\n        className={this.state.backgroundClass}\n        style={this.shapeStyle()}\n      />\n    );\n  }\n\n  protected textBounds(): Bounds {\n    const textBounds = super.textBounds();\n    return new Bounds(\n      textBounds.left + 10,\n      textBounds.top + 10,\n      textBounds.width - 20,\n      textBounds.height - 20\n    );\n  }\n}\n","import BadgedRoundedRectViewNode from \"./badged-rounded-rect\";\nimport { IViewNodeProps } from \"./default-element\";\n\nexport default class WorkPackageViewNode extends BadgedRoundedRectViewNode {\n  constructor(props: IViewNodeProps) {\n    super(props);\n    this.state = {\n      ...this.state,\n      badge: undefined,\n      badgeBounds: undefined\n    };\n  }\n}\n","import * as React from \"react\";\nimport * as wheel from \"wheel\";\nimport { LogicError, Point } from \"../../archimate-model\";\n\ninterface IProps {\n  maxX: number;\n  maxY: number;\n  minX: number;\n  minY: number;\n  onZoom: (scale: number) => void;\n  scale: number;\n  svgPanZoomRef: React.RefObject<SVGGElement>;\n  zoomMode: ZoomMode;\n}\n\nenum ZoomMode {\n  OneToOne,\n  FitToWindow,\n  FitToWindowWidth,\n  UserZoom\n}\n\ninterface IState {\n  clientHeight: number;\n  clientWidth: number;\n  scale: number;\n  tx: number;\n  ty: number;\n}\n\nconst DIAGRAM_MARGIN = 24;\n\nconst MOUSE_WHEEL_SPEED = 0.065;\n\nconst BOUNDS_PADDING = 0.05;\n\nexport default class SvgPanZoom extends React.PureComponent<IProps, IState> {\n  private minZoom: number = 0;\n  private maxZoom: number = Number.POSITIVE_INFINITY;\n  private storedCTMResult?: Point;\n  private mouseX: number = 0;\n  private mouseY: number = 0;\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      clientHeight: 0,\n      clientWidth: 0,\n      scale: props.scale,\n      tx: 0,\n      ty: 0\n    };\n  }\n\n  public render() {\n    return (\n      <g\n        onKeyDown={this.onKeyDown}\n        ref={this.props.svgPanZoomRef}\n        transform={`matrix(${this.state.scale}, 0, 0, ${this.state.scale}, ${\n          this.state.tx\n        }, ${this.state.ty})`}\n      >\n        {this.props.children}\n      </g>\n    );\n  }\n\n  public componentDidMount() {\n    window.addEventListener(\"resize\", this.onSvgResize);\n    this.svgSize();\n    if (\n      this.props.svgPanZoomRef.current &&\n      this.props.svgPanZoomRef.current.ownerSVGElement\n    ) {\n      const svg = this.props.svgPanZoomRef.current.ownerSVGElement;\n      svg.addEventListener(\"mousedown\", this.onMouseDown);\n      wheel.addWheelListener(svg, this.onWheel, true);\n    }\n  }\n\n  public componentDidUpdate(prevProps: IProps) {\n    if (\n      prevProps.scale !== this.props.scale &&\n      numbersDiffer(this.props.scale, this.state.scale)\n    ) {\n      this.setState({ scale: this.props.scale });\n    }\n    this.calculateTransform();\n  }\n\n  public componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.onSvgResize);\n    if (\n      this.props.svgPanZoomRef.current &&\n      this.props.svgPanZoomRef.current.ownerSVGElement\n    ) {\n      const svg = this.props.svgPanZoomRef.current.ownerSVGElement;\n      svg.removeEventListener(\"mousedown\", this.onMouseDown);\n      wheel.removeWheelListener(svg, this.onWheel);\n    }\n  }\n\n  private calculateTransform = () => {\n    const width = this.props.maxX - this.props.minX;\n    const height = this.props.maxY - this.props.minY;\n    const scalex = this.state.clientWidth / (width + DIAGRAM_MARGIN);\n    const scaley = this.state.clientHeight / (height + DIAGRAM_MARGIN);\n    let scale = this.state.scale;\n    let tx = this.state.tx;\n    let ty = this.state.ty;\n    // const minScaleX = (this.state.clientWidth - DIAGRAM_MARGIN) / VIEW_NODE_WIDTH;\n    // const maxScaleX = (this.state.clientWidth - DIAGRAM_MARGIN) / (width * 4);\n    // const minScaleY = (this.state.clientHeight - DIAGRAM_MARGIN) / VIEW_NODE_HEIGHT;\n    // const maxScaleY = (this.state.clientHeight - DIAGRAM_MARGIN) / (height * 4);\n    switch (this.props.zoomMode) {\n      case ZoomMode.FitToWindow:\n        scale = Math.min(scalex, scaley);\n        tx = (this.state.clientWidth - scale * width) / 2 - this.props.minX;\n        ty = (this.state.clientHeight - scale * height) / 2 - this.props.minY;\n        break;\n      case ZoomMode.FitToWindowWidth:\n        scale = scalex;\n        tx = (this.state.clientWidth - scale * width) / 2 - this.props.minX;\n        if (height * scale + DIAGRAM_MARGIN > this.state.clientHeight) {\n          ty = DIAGRAM_MARGIN / 2 - this.props.minY;\n        } else {\n          ty = (this.state.clientHeight - scale * height) / 2 - this.props.minY;\n        }\n        break;\n      case ZoomMode.OneToOne:\n        scale = 1;\n        if (width + DIAGRAM_MARGIN > this.state.clientWidth) {\n          tx = DIAGRAM_MARGIN / 2 - this.props.minX;\n        } else {\n          tx = (this.state.clientWidth - scale * width) / 2 - this.props.minX;\n        }\n        if (height * scale + DIAGRAM_MARGIN > this.state.clientHeight) {\n          ty = DIAGRAM_MARGIN / 2 - this.props.minY;\n        } else {\n          ty = (this.state.clientHeight - scale * height) / 2 - this.props.minY;\n        }\n        break;\n      case ZoomMode.UserZoom:\n      default:\n    }\n    if (numbersDiffer(this.state.scale, scale)) {\n      this.setState({ scale });\n      this.props.onZoom(scale);\n    }\n    if (numbersDiffer(this.state.tx, tx)) {\n      this.setState({ tx });\n    }\n    if (numbersDiffer(this.state.ty, ty)) {\n      this.setState({ ty });\n    }\n  };\n\n  private onMouseDown = (e: MouseEvent) => {\n    // for IE, left click == 1\n    // for Firefox, left click == 0\n    const isLeftButton =\n      (e.button === 1 && window.event !== null) || e.button === 0;\n    if (!isLeftButton) {\n      return;\n    }\n\n    const offset = this.getOffsetXY(e);\n    const point = this.transformToScreen(offset.x, offset.y);\n    this.mouseX = point.x;\n    this.mouseY = point.y;\n\n    // We need to listen on document itself, since mouse can go outside of the\n    // window, and we will loose it\n    document.addEventListener(\"mousemove\", this.onMouseMove);\n    document.addEventListener(\"mouseup\", this.onMouseUp);\n    return false;\n  };\n\n  private onMouseMove = (e: MouseEvent) => {\n    const offset = this.getOffsetXY(e);\n    const point = this.transformToScreen(offset.x, offset.y);\n    const dx = point.x - this.mouseX;\n    const dy = point.y - this.mouseY;\n\n    this.mouseX = point.x;\n    this.mouseY = point.y;\n\n    this.internalMoveBy(dx, dy);\n  };\n\n  private onMouseUp = () => {\n    this.releaseDocumentMouse();\n  };\n\n  private releaseDocumentMouse = () => {\n    document.removeEventListener(\"mousemove\", this.onMouseMove);\n    document.removeEventListener(\"mouseup\", this.onMouseUp);\n  };\n\n  private onWheel = (e: WheelEvent) => {\n    // smoothScroll.cancel()\n\n    const scaleMultiplier = getScaleMultiplier(e.deltaY);\n\n    if (scaleMultiplier !== 1) {\n      const offset = this.getOffsetXY(e);\n      this.publicZoomTo(offset.x, offset.y, scaleMultiplier);\n      e.preventDefault();\n    }\n  };\n\n  private onKeyDown = (e: React.KeyboardEvent<SVGGElement>) => {\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    if (e.keyCode === 38) {\n      y = 1; // up\n    } else if (e.keyCode === 40) {\n      y = -1; // down\n    } else if (e.keyCode === 37) {\n      x = 1; // left\n    } else if (e.keyCode === 39) {\n      x = -1; // right\n    } else if (e.keyCode === 189 || e.keyCode === 109) {\n      // DASH or SUBTRACT\n      z = 1; // `-` -  zoom out\n    } else if (e.keyCode === 187 || e.keyCode === 107) {\n      // EQUAL SIGN or ADD\n      z = -1; // `=` - zoom in (equal sign on US layout is under `+`)\n    }\n\n    if (x || y) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      const clientRect = this.owner().getBoundingClientRect();\n      // movement speed should be the same in both X and Y direction:\n      const offset = Math.min(clientRect.width, clientRect.height);\n      const moveSpeedRatio = 0.05;\n      const dx = offset * moveSpeedRatio * x;\n      const dy = offset * moveSpeedRatio * y;\n\n      this.internalMoveBy(dx, dy);\n    }\n\n    if (z) {\n      const scaleMultiplier = getScaleMultiplier(z);\n      const ownerRect = this.owner().getBoundingClientRect();\n      this.publicZoomTo(\n        ownerRect.width / 2,\n        ownerRect.height / 2,\n        scaleMultiplier\n      );\n    }\n  };\n\n  private moveTo(x: number, y: number) {\n    this.setState({\n      tx: x,\n      ty: y\n    });\n\n    this.keepTransformInsideBounds();\n  }\n\n  private moveBy(dx: number, dy: number) {\n    this.moveTo(this.state.tx + dx, this.state.ty + dy);\n  }\n\n  private internalMoveBy(dx: number, dy: number, smooth?: boolean) {\n    return this.moveBy(dx, dy);\n  }\n\n  private publicZoomTo(x: number, y: number, scaleMultiplier: number) {\n    return this.zoomByRatio(x, y, scaleMultiplier);\n  }\n\n  private zoomByRatio(clientX: number, clientY: number, ratio: number) {\n    if (isNaN(clientX) || isNaN(clientY) || isNaN(ratio)) {\n      throw new Error(\"zoom requires valid numbers\");\n    }\n\n    const newScale = this.state.scale * ratio;\n\n    if (newScale < this.minZoom) {\n      if (this.state.scale === this.minZoom) {\n        return;\n      }\n\n      ratio = this.minZoom / this.state.scale;\n    }\n    if (newScale > this.maxZoom) {\n      if (this.state.scale === this.maxZoom) {\n        return;\n      }\n\n      ratio = this.maxZoom / this.state.scale;\n    }\n\n    const size = this.transformToScreen(clientX, clientY);\n\n    this.setState({\n      tx: size.x - ratio * (size.x - this.state.tx),\n      ty: size.y - ratio * (size.y - this.state.ty)\n    });\n\n    this.keepTransformInsideBounds();\n    const scale = this.state.scale * ratio;\n    if (numbersDiffer(this.state.scale, scale)) {\n      this.setState({ scale });\n    }\n    this.props.onZoom(scale);\n  }\n\n  private keepTransformInsideBounds(): boolean {\n    const boundingBox = this.getBoundingBox();\n\n    let adjusted = false;\n    const clientRect = this.getClientRect();\n\n    let diff = boundingBox.left - clientRect.right;\n    if (diff > 0) {\n      this.setState({ tx: this.state.tx + diff });\n      adjusted = true;\n    }\n    // check the other side:\n    diff = boundingBox.right - clientRect.left;\n    if (diff < 0) {\n      this.setState({ tx: this.state.tx + diff });\n      adjusted = true;\n    }\n\n    // y axis:\n    diff = boundingBox.top - clientRect.bottom;\n    if (diff > 0) {\n      // we adjust transform, so that it matches exactly our bounding box:\n      // this.state.ty = boundingBox.top - (boundingBox.height + boundingBox.y) * this.state.scale =>\n      // this.state.ty = boundingBox.top - (clientRect.bottom - this.state.ty) =>\n      // this.state.ty = diff + this.state.ty =>\n      this.setState({ ty: this.state.ty + diff });\n      adjusted = true;\n    }\n\n    diff = boundingBox.bottom - clientRect.top;\n    if (diff < 0) {\n      this.setState({ ty: this.state.ty + diff });\n      adjusted = true;\n    }\n\n    return adjusted;\n  }\n\n  private getClientRect() {\n    const bbox: SVGRect = this.owner().getBBox();\n    const leftTop = this.client(bbox.x, bbox.y);\n\n    return {\n      bottom: bbox.height * this.state.scale + leftTop.y,\n      left: leftTop.x,\n      right: bbox.width * this.state.scale + leftTop.x,\n      top: leftTop.y\n    };\n  }\n\n  private client(x: number, y: number) {\n    return {\n      x: x * this.state.scale + this.state.tx,\n      y: y * this.state.scale + this.state.ty\n    };\n  }\n\n  /**\n   * Returns bounding box that should be used to restrict scene movement.\n   */\n  private getBoundingBox() {\n    const ownerRect = this.owner().getBoundingClientRect();\n    const sceneWidth = ownerRect.width;\n    const sceneHeight = ownerRect.height;\n\n    return {\n      bottom: sceneHeight * (1 - BOUNDS_PADDING),\n      left: sceneWidth * BOUNDS_PADDING,\n      right: sceneWidth * (1 - BOUNDS_PADDING),\n      top: sceneHeight * BOUNDS_PADDING\n    };\n  }\n\n  private transformToScreen(x: number, y: number) {\n    const parentCTM = this.owner().getScreenCTM();\n    if (parentCTM) {\n      const parentScaleX = parentCTM.a;\n      const parentScaleY = parentCTM.d;\n      const parentOffsetX = parentCTM.e;\n      const parentOffsetY = parentCTM.f;\n      this.storedCTMResult = new Point(\n        x * parentScaleX - parentOffsetX,\n        y * parentScaleY - parentOffsetY\n      );\n    } else {\n      this.storedCTMResult = new Point(x, y);\n    }\n    return this.storedCTMResult;\n  }\n\n  private getOffsetXY(e: MouseEvent | WheelEvent): Point {\n    let offsetX: number;\n    let offsetY: number;\n\n    const ownerRect = this.owner().getBoundingClientRect();\n    offsetX = e.clientX - ownerRect.left;\n    offsetY = e.clientY - ownerRect.top;\n\n    return new Point(offsetX, offsetY);\n  }\n\n  private owner(): SVGSVGElement {\n    if (\n      this.props.svgPanZoomRef.current &&\n      this.props.svgPanZoomRef.current.ownerSVGElement\n    ) {\n      return this.props.svgPanZoomRef.current.ownerSVGElement;\n    } else {\n      throw new LogicError(\n        \"Shouldn't have called owner when this element isn't mounted\"\n      );\n    }\n  }\n\n  private onSvgResize = () => {\n    this.svgSize();\n  };\n\n  private svgSize = () => {\n    if (\n      this.props.svgPanZoomRef &&\n      this.props.svgPanZoomRef.current &&\n      this.props.svgPanZoomRef.current.ownerSVGElement\n    ) {\n      const svg: SVGSVGElement = this.props.svgPanZoomRef.current\n        .ownerSVGElement;\n      const rect = svg.getClientRects()[0];\n      const clientHeight = rect.height;\n      const clientWidth = rect.width;\n      if (\n        numbersDiffer(clientHeight, this.state.clientHeight) ||\n        numbersDiffer(clientWidth, this.state.clientWidth)\n      ) {\n        this.setState({ clientHeight, clientWidth });\n      }\n    }\n  };\n}\n\nconst MIN_DETECTABLE_CHANGE = 0.001;\n\nexport function numbersDiffer(a: number, b: number): boolean {\n  return Math.abs(a - b) > MIN_DETECTABLE_CHANGE;\n}\n\nfunction getScaleMultiplier(delta: number): number {\n  let scaleMultiplier = 1;\n  if (delta > 0) {\n    // zoom out\n    scaleMultiplier = 1 - MOUSE_WHEEL_SPEED;\n  } else if (delta < 0) {\n    // zoom in\n    scaleMultiplier = 1 + MOUSE_WHEEL_SPEED;\n  }\n\n  return scaleMultiplier;\n}\n\nexport function zoomIn(scale: number): number {\n  return scale * (1 + MOUSE_WHEEL_SPEED);\n}\n\nexport function zoomOut(scale: number): number {\n  return scale * (1 - MOUSE_WHEEL_SPEED);\n}\n","import * as d3force from \"d3-force\";\nimport { is, Set } from \"immutable\";\nimport * as React from \"react\";\nimport { Connection, VIEW_NODE_WIDTH, ViewNode } from \"../../archimate-model\";\n\ninterface IProps {\n  centerX: number;\n  centerY: number;\n  connections: Connection[];\n  autoLayout: boolean;\n  nodes: ViewNode[];\n  onForceLayoutTick?: () => void;\n}\n\nconst DEFAULT_DISTANCE = 30; // Default distance for D3 Force simulations\n\nexport default class ForceLayout extends React.PureComponent<IProps> {\n  private forceLink?: d3force.ForceLink<ViewNode, Connection>;\n  private simulation?: d3force.Simulation<ViewNode, Connection>;\n  private prevNodes: Set<string>;\n  private prevConnections: Set<string>;\n\n  constructor(props: IProps) {\n    super(props);\n    this.prevNodes = Set<string>();\n    this.prevConnections = Set<string>();\n  }\n\n  public render() {\n    return this.props.children;\n  }\n\n  public componentDidMount() {\n    if (!this.props.autoLayout) {\n      return;\n    }\n    // TODO: look into doing this in a web worker\n    this.forceLink = d3force\n      .forceLink<ViewNode, Connection>(this.props.connections)\n      .id((node: ViewNode, i: number, nodesData: ViewNode[]) => node.id)\n      .distance(this.adjustLinkDistance);\n    this.simulation = d3force\n      .forceSimulation(this.props.nodes)\n      .force(\n        \"center\",\n        d3force.forceCenter(this.props.centerX, this.props.centerY)\n      )\n      .force(\"collide\", d3force.forceCollide(VIEW_NODE_WIDTH))\n      .force(\"link\", this.forceLink)\n      .force(\"charge\", d3force.forceManyBody())\n      .on(\"tick\", this.ticked);\n  }\n\n  public componentDidUpdate(prevProps: IProps) {\n    if (!this.props.autoLayout) {\n      if (this.simulation) {\n        this.simulation.stop();\n      }\n      return;\n    }\n\n    // If our set of nodes and connections haven't changed, then nothing to do here.\n    const nextConnections = Set.of<string>(\n      ...this.props.connections.map(c => c.id)\n    );\n    const nextNodes = Set.of<string>(...this.props.nodes.map(n => n.id));\n    if (\n      is(this.prevConnections, nextConnections) &&\n      is(this.prevNodes, nextNodes)\n    ) {\n      return;\n    }\n    this.prevNodes = nextNodes;\n    this.prevConnections = nextConnections;\n\n    if (this.simulation) {\n      this.simulation.nodes(this.props.nodes);\n      if (this.forceLink) {\n        this.forceLink.links(this.props.connections);\n      }\n      this.simulation.alpha(1);\n      this.simulation.restart();\n    }\n  }\n\n  public componentWillUnmount() {\n    if (this.simulation) {\n      this.simulation.stop();\n    }\n  }\n\n  // •  Influence (weakest)\n  // •  Access\n  // •  Serving\n  // •  Realization\n  // •  Assignment\n  // •  Aggregation\n  // •  Composition (strongest)\n  private adjustLinkDistance = (d: Connection): number => {\n    const rel = d.entityInstance();\n    const relType = rel ? rel.type : \"\";\n    const dist = (x: number) => (DEFAULT_DISTANCE * x) / 100;\n    switch (relType) {\n      case \"Influence\":\n        return dist(200);\n      case \"Access\":\n        return dist(150);\n      case \"Serving\":\n        return dist(120);\n      case \"Realization\":\n        return dist(100);\n      case \"Assignment\":\n        return dist(80);\n      case \"Aggregation\":\n        return dist(60);\n      case \"Composition\":\n        return dist(50);\n      default:\n        return dist(100);\n    }\n  };\n\n  /**\n   * Called on each \"tick\" of the D3 Force simulation\n   * Not to be called directly\n   */\n  private ticked = () => {\n    if (this.simulation) {\n      this.simulation.force(\n        \"center\",\n        d3force.forceCenter(this.props.centerX, this.props.centerY)\n      );\n      if (this.props.onForceLayoutTick) {\n        this.props.onForceLayoutTick();\n      }\n    }\n  };\n}\n","import * as React from \"react\";\nimport { Button, Glyphicon } from \"react-bootstrap\";\nimport {\n  Connection,\n  Diagram,\n  DiagramType,\n  IEntity,\n  IEntityRef,\n  IExtents,\n  ViewNode\n} from \"../../archimate-model\";\nimport { entityClickedFunc } from \"../common\";\nimport ArchimateConnection from \"./archimate-connection\";\nimport ArchimateSvg from \"./archimate-svg\";\nimport archimateViewNode from \"./archimate-view-node\";\nimport ForceLayout from \"./force-layout\";\nimport SvgPanZoom, { numbersDiffer, zoomIn, zoomOut } from \"./svg-pan-zoom\";\n\ninterface IProps {\n  selectedDiagram?: Diagram;\n  nodes: ViewNode[];\n  connections: Connection[];\n  selectedEntity?: IEntity;\n  entityClicked: entityClickedFunc;\n  diagramClicked: entityClickedFunc;\n}\n\nenum ZoomMode {\n  OneToOne,\n  FitToWindow,\n  FitToWindowWidth,\n  UserZoom\n}\n\ninterface IState {\n  maxX: number;\n  maxY: number;\n  minX: number;\n  minY: number;\n  scale: number;\n  zoomMode: ZoomMode;\n}\n\nexport default class ArchimateDiagramView extends React.PureComponent<\n  IProps,\n  IState\n> {\n  public static diagramExtents(dia: Diagram | undefined): IExtents {\n    return dia\n      ? dia.calculateMaxExtents()\n      : { maxX: 0, maxY: 0, minX: 0, minY: 0 };\n  }\n\n  private svgTopGroup: React.RefObject<SVGGElement>;\n\n  constructor(props: IProps) {\n    super(props);\n    const ext = ArchimateDiagramView.diagramExtents(this.props.selectedDiagram);\n    this.state = {\n      maxX: ext.maxX,\n      maxY: ext.maxY,\n      minX: ext.minX,\n      minY: ext.minY,\n      scale: 1,\n      zoomMode: ZoomMode.FitToWindow\n    };\n    this.svgTopGroup = React.createRef();\n  }\n\n  public render() {\n    if (this.props.selectedDiagram) {\n      return (\n        <>\n          <div\n            className=\"archimate-zoombar\"\n            style={{ position: \"absolute\", top: 0, right: 0 }}\n          >\n            <Button onClick={this.onOneHundredPercent}>\n              <small>1:1</small>\n            </Button>\n            <Button onClick={this.onFitToWindow}>\n              <Glyphicon glyph=\"resize-full\" />\n            </Button>\n            <Button onClick={this.onFitToWidth}>\n              <Glyphicon glyph=\"resize-horizontal\" />\n            </Button>\n            <Button onClick={this.onZoomIn}>\n              <Glyphicon glyph=\"zoom-in\" />\n            </Button>\n            <Button onClick={this.onZoomOut}>\n              <Glyphicon glyph=\"zoom-out\" />\n            </Button>\n            <small>\n              {\"  \"}\n              {(this.state.scale * 100).toFixed(0)}%\n            </small>\n          </div>\n          <ArchimateSvg\n            key={this.props.selectedDiagram.id}\n            diagramName={\n              this.props.selectedDiagram ? this.props.selectedDiagram.name : \"\"\n            }\n            viewBox={this.viewBox()}\n          >\n            <ForceLayout\n              centerX={(this.state.maxX - this.state.minX) / 2}\n              centerY={(this.state.maxY - this.state.minY) / 2}\n              connections={this.props.connections}\n              autoLayout={this.isAutoLayout()}\n              nodes={this.props.nodes}\n              onForceLayoutTick={this.onForceLayoutTick}\n            >\n              <SvgPanZoom\n                maxX={this.state.maxX}\n                maxY={this.state.maxY}\n                minX={this.state.minX}\n                minY={this.state.minY}\n                onZoom={this.onZoom}\n                svgPanZoomRef={this.svgTopGroup}\n                scale={this.state.scale}\n                zoomMode={this.state.zoomMode}\n              >\n                {this.props.nodes.map(node =>\n                  React.createElement(archimateViewNode(node), {\n                    key: node.id,\n                    onClicked: this.props.entityClicked,\n                    selected: this.nodeIsSelected(node),\n                    viewNode: node,\n                    x: node.x || node.bounds.left,\n                    y: node.y || node.bounds.top\n                  })\n                )}\n                {this.props.connections.map(conn => (\n                  <ArchimateConnection\n                    autoLayout={this.isAutoLayout()}\n                    key={conn.id}\n                    connection={conn}\n                    onClicked={this.props.entityClicked}\n                    selected={this.nodeIsSelected(conn)}\n                    fromX={conn.sourceBounds().left}\n                    fromY={conn.sourceBounds().top}\n                    toX={conn.targetBounds().left}\n                    toY={conn.targetBounds().top}\n                  />\n                ))}\n              </SvgPanZoom>\n            </ForceLayout>\n          </ArchimateSvg>\n        </>\n      );\n    } else {\n      return (\n        <div\n          className=\"jumbotron\"\n          style={{ paddingLeft: \"2em\", paddingRight: \"2em\" }}\n        >\n          <h1>ArchiMate Viewer</h1>\n          <p>\n            <Glyphicon glyph=\"arrow-left\" />\n            &nbsp; Select a diagram to view and explore.\n          </p>\n        </div>\n      );\n    }\n  }\n\n  public componentDidUpdate() {\n    const ext = ArchimateDiagramView.diagramExtents(this.props.selectedDiagram);\n    if (\n      numbersDiffer(this.state.maxX, ext.maxX) ||\n      numbersDiffer(this.state.maxY, ext.maxY) ||\n      numbersDiffer(this.state.minX, ext.minX) ||\n      numbersDiffer(this.state.minY, ext.minY)\n    ) {\n      this.setState({\n        maxX: ext.maxX,\n        maxY: ext.maxY,\n        minX: ext.minX,\n        minY: ext.minY\n      });\n    }\n  }\n\n  private isAutoLayout() {\n    return (\n      (this.props.selectedDiagram &&\n        this.props.selectedDiagram.type === DiagramType.ModelQuery) ||\n      false\n    );\n  }\n\n  private nodeIsSelected(node: IEntityRef): boolean {\n    if (this.props.selectedEntity === undefined) {\n      return false;\n    }\n    const nodeElement = node.entityInstance();\n    if (nodeElement === undefined) {\n      return false;\n    }\n    return this.props.selectedEntity.id === nodeElement.id;\n  }\n\n  private onFitToWindow = () => {\n    this.setState({ zoomMode: ZoomMode.FitToWindow });\n  };\n\n  private onFitToWidth = () => {\n    this.setState({ zoomMode: ZoomMode.FitToWindowWidth });\n  };\n\n  private onOneHundredPercent = () => {\n    this.setState({ zoomMode: ZoomMode.OneToOne });\n  };\n\n  // TODO: This needs to change\n  private onZoomIn = () => {\n    this.setState({\n      scale: zoomIn(this.state.scale),\n      zoomMode: ZoomMode.UserZoom\n    });\n  };\n\n  // TODO: This needs to change\n  private onZoomOut = () => {\n    this.setState({\n      scale: zoomOut(this.state.scale),\n      zoomMode: ZoomMode.UserZoom\n    });\n  };\n\n  // Called when the Force Layout has updated node positions\n  private onForceLayoutTick = () => {\n    this.onFitToWindow();\n  };\n\n  // Called when the PanZoom wheel event has initiated a zoom\n  private onZoom = (scale: number) => {\n    if (\n      this.state.scale !== scale ||\n      this.state.zoomMode !== ZoomMode.UserZoom\n    ) {\n      this.setState({ scale, zoomMode: ZoomMode.UserZoom });\n    }\n  };\n\n  private viewBox(): SVGRect {\n    return new DOMRect(\n      this.state.minX,\n      this.state.minY,\n      this.state.maxY - this.state.minY,\n      this.state.maxX - this.state.minX\n    );\n  }\n}\n","import { LogicError, ViewNode } from \"../../archimate-model\";\nimport \"./archimate-svg.css\";\nimport ApplicationComponentViewNode from \"./view-nodes/application-component-view-node\";\nimport ArtifactViewNode from \"./view-nodes/artifact-view-node\";\nimport AssessmentViewNode from \"./view-nodes/assessment-view-node\";\nimport BusinessActorViewNode from \"./view-nodes/business-actor-view-node\";\nimport BusinessRoleViewNode from \"./view-nodes/business-role-view-node\";\nimport CollaborationViewNode from \"./view-nodes/collaboration-view-node\";\nimport ConstraintViewNode from \"./view-nodes/constraint-view-node\";\nimport ContractViewNode from \"./view-nodes/contract-view-node\";\nimport DataObjectViewNode from \"./view-nodes/data-object-view-node\";\nimport DeliverableViewNode from \"./view-nodes/deliverable-view-node\";\nimport DeviceViewNode from \"./view-nodes/device-view-node\";\nimport DiagramRefViewNode from \"./view-nodes/diagram-ref-view-node\";\nimport DistributionNetworkViewNode from \"./view-nodes/distribution-network-view-node\";\nimport DriverViewNode from \"./view-nodes/driver-view-node\";\nimport EventViewNode from \"./view-nodes/event-view-node\";\nimport FunctionViewNode from \"./view-nodes/function-view-node\";\nimport GapViewNode from \"./view-nodes/gap-view-node\";\nimport GoalViewNode from \"./view-nodes/goal-view-node\";\nimport GroupViewNode from \"./view-nodes/group-view-node\";\nimport GroupingViewNode from \"./view-nodes/grouping-view-node\";\nimport InteractionViewNode from \"./view-nodes/interaction-view-node\";\nimport InterfaceViewNode from \"./view-nodes/interface-view-node\";\nimport JunctionViewNode from \"./view-nodes/junction\";\nimport LocationViewNode from \"./view-nodes/location-view-node\";\nimport MeaningViewNode from \"./view-nodes/meaning-view-node\";\nimport NetworkViewNode from \"./view-nodes/network-view-node\";\nimport NodeViewNode from \"./view-nodes/node-view-node\";\nimport NoteViewNode from \"./view-nodes/note-view-node\";\nimport OrJunctionViewNode from \"./view-nodes/or-junction\";\nimport OutcomeViewNode from \"./view-nodes/outcome-view-node\";\nimport PathViewNode from \"./view-nodes/path-view-node\";\nimport PlateauViewNode from \"./view-nodes/plateau-view-node\";\nimport PrincipleViewNode from \"./view-nodes/principle-view-node\";\nimport ProcessViewNode from \"./view-nodes/process-view-node\";\nimport ProductViewNode from \"./view-nodes/product-view-node\";\nimport RepresentationViewNode from \"./view-nodes/representation-view-node\";\nimport RequirementViewNode from \"./view-nodes/requirement-view-node\";\nimport ResourceViewNode from \"./view-nodes/resource-view-node\";\nimport ServiceViewNode from \"./view-nodes/service-view-node\";\nimport StakeholderViewNode from \"./view-nodes/stakeholder-view-node\";\nimport StickyViewNode from \"./view-nodes/sticky-view-node\";\nimport SystemSoftwareViewNode from \"./view-nodes/system-software-view-node\";\nimport ValueViewNode from \"./view-nodes/value-view-node\";\nimport WorkPackageViewNode from \"./view-nodes/work-package-view-node\";\n\nexport default function archimateViewNode(viewNode: ViewNode) {\n  const elType = elementType(viewNode);\n  switch (elType) {\n    case \"AndJunction\":\n    case \"Junction\":\n      return JunctionViewNode;\n    case \"OrJunction\":\n      return OrJunctionViewNode;\n    case \"ApplicationCollaboration\":\n    case \"BusinessCollaboration\":\n    case \"TechnologyCollaboration\":\n      return CollaborationViewNode;\n    case \"ApplicationComponent\":\n      return ApplicationComponentViewNode;\n    case \"ApplicationEvent\":\n    case \"BusinessEvent\":\n    case \"TechnologyEvent\":\n      return EventViewNode;\n    case \"ApplicationFunction\":\n    case \"BusinessFunction\":\n    case \"TechnologyFunction\":\n      return FunctionViewNode;\n    case \"ApplicationInteraction\":\n    case \"BusinessInteraction\":\n    case \"TechnologyInteraction\":\n      return InteractionViewNode;\n    case \"ApplicationInterface\":\n    case \"BusinessInterface\":\n    case \"TechnologyInterface\":\n      return InterfaceViewNode;\n    case \"ApplicationProcess\":\n    case \"BusinessProcess\":\n    case \"TechnologyProcess\":\n      return ProcessViewNode;\n    case \"ApplicationService\":\n    case \"BusinessService\":\n    case \"TechnologyService\":\n      return ServiceViewNode;\n    case \"BusinessActor\":\n      return BusinessActorViewNode;\n    case \"Artifact\":\n      return ArtifactViewNode;\n    case \"Assessment\":\n      return AssessmentViewNode;\n    case \"Driver\":\n      return DriverViewNode;\n    case \"Constraint\":\n      return ConstraintViewNode;\n    case \"Goal\":\n      return GoalViewNode;\n    case \"Outcome\":\n      return OutcomeViewNode;\n    case \"Principle\":\n      return PrincipleViewNode;\n    case \"Requirement\":\n      return RequirementViewNode;\n    case \"Stakeholder\":\n      return StakeholderViewNode;\n    case \"BusinessObject\":\n    case \"DataObject\":\n      return DataObjectViewNode;\n    case \"BusinessRole\":\n      return BusinessRoleViewNode;\n    case \"Contract\":\n      return ContractViewNode;\n    case \"Deliverable\":\n      return DeliverableViewNode;\n    case \"Gap\":\n      return GapViewNode;\n    case \"DiagramModelReference\":\n    case \"ArchimateDiagramModel\":\n    case \"DiagramModel\":\n      return DiagramRefViewNode;\n    case \"Device\":\n      return DeviceViewNode;\n    case \"Plateau\":\n      return PlateauViewNode;\n    case \"Node\":\n      return NodeViewNode;\n    case \"DistributionNetwork\":\n      return DistributionNetworkViewNode;\n    case \"Group\":\n      return GroupViewNode;\n    case \"Grouping\":\n      return GroupingViewNode;\n    case \"Location\":\n      return LocationViewNode;\n    case \"Meaning\":\n      return MeaningViewNode;\n    case \"CommunicationNetwork\":\n    case \"Network\":\n      return NetworkViewNode;\n    case \"Path\":\n      return PathViewNode;\n    case \"Resource\":\n      return ResourceViewNode;\n    case \"SystemSoftware\":\n      return SystemSoftwareViewNode;\n    case \"DiagramObject\":\n    case \"Note\":\n      return NoteViewNode;\n    case \"Product\":\n      return ProductViewNode;\n    case \"Representation\":\n      return RepresentationViewNode;\n    case \"SketchModelSticky\":\n      return StickyViewNode;\n    case \"Value\":\n      return ValueViewNode;\n    case \"WorkPackage\":\n      return WorkPackageViewNode;\n    default:\n      throw new LogicError(`Unexpected view node type ${elType}`);\n  }\n}\n\nfunction elementType(viewNode: ViewNode): string {\n  const elInst = viewNode.entityInstance();\n  if (elInst) {\n    return elInst.type;\n  } else {\n    return viewNode.type;\n  }\n}\n","import * as React from \"react\";\n\ninterface IProps {\n  header?: string | React.ReactFragment;\n  initiallyCollapsed?: boolean;\n}\n\ninterface IState {\n  collapse: boolean;\n}\n\nexport default class Panel extends React.PureComponent<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      collapse:\n        this.props.initiallyCollapsed === undefined\n          ? false\n          : this.props.initiallyCollapsed\n    };\n  }\n\n  public render() {\n    const panelClsName = this.state.collapse\n      ? \"panel-body collapse\"\n      : \"panel-body collapse in\";\n    return (\n      <div className=\"panel panel-default\">\n        {this.header()}\n        <div id=\"archimate-view-props\" className={panelClsName}>\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n\n  public componentDidUpdate(prevProps: IProps) {\n    if (this.props.initiallyCollapsed !== prevProps.initiallyCollapsed) {\n      this.setState({\n        collapse: this.props.initiallyCollapsed ? true : false\n      });\n    }\n  }\n\n  private handleCollapseExpand = () => {\n    this.setState({ collapse: !this.state.collapse });\n  };\n\n  private header() {\n    if (this.props.header) {\n      const iconClsName = this.state.collapse\n        ? \"glyphicon glyphicon-menu-down\"\n        : \"glyphicon glyphicon-menu-up\";\n      return (\n        <div className=\"panel-heading\">\n          <h3 className=\"panel-title\">\n            {this.props.header}\n            <button\n              className=\"btn btn-primary btn-xs pull-right\"\n              type=\"button\"\n              aria-expanded={!this.state.collapse}\n              onClick={this.handleCollapseExpand}\n            >\n              <span className={iconClsName} aria-hidden=\"true\" />\n            </button>\n          </h3>\n        </div>\n      );\n    }\n    return null;\n  }\n}\n","import \"github-markdown-css/github-markdown.css\";\nimport * as React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport Panel from \"../panel\";\n\ninterface IProps {\n  str: string | undefined;\n  header?: string;\n}\n\nexport default class DocumentationPanel extends React.PureComponent<IProps> {\n  public render() {\n    const hasContent = this.props.str && this.props.str.trim().length > 0;\n    const title = this.props.header || \"Documentation\";\n    const header = hasContent ? (\n      title\n    ) : (\n      <>\n        {title} <span className=\"small\">(none)</span>\n      </>\n    );\n    return (\n      <Panel header={header} initiallyCollapsed={!hasContent}>\n        <ReactMarkdown\n          className=\"markdown-body\"\n          source={this.props.str || \"No Documentation\"}\n        />\n      </Panel>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { IEntity } from \"../../archimate-model\";\nimport { entityClickedFunc } from \"../common\";\n\ninterface IProps {\n  entity: IEntity | undefined;\n  entityClicked: entityClickedFunc;\n  text?: string;\n  textClass?: string;\n}\n\nexport default class EntityLink extends React.PureComponent<IProps> {\n  public render() {\n    const text = this.props.text ? this.props.text : this.props.entity!.name;\n    if (this.props.entity) {\n      return (\n        <a\n          href={this.props.entity!.href}\n          onClick={this.entityClicked}\n        >\n          {this.props.children}\n          <span className={this.props.textClass}>{text}</span>\n        </a>\n      );\n    } else {\n      return undefined;\n    }\n  }\n\n  private entityClicked = () => this.props.entityClicked(this.props.entity);\n}\n","import * as React from \"react\";\nimport { Element } from \"../../../archimate-model\";\nimport { entityClickedFunc } from \"../../common\";\nimport EntityLink from \"../entity-link\";\nimport Panel from \"../panel\";\n\ninterface IProps {\n  elements: Element[];\n  elementClicked: entityClickedFunc;\n}\n\nexport default class ElementsTable extends React.PureComponent<IProps> {\n  public render() {\n    let elementRows = [\n      <tr key=\"no-elements\">\n        <td colSpan={4}>\n          <p className=\"text-info\">No elements</p>\n        </td>\n      </tr>\n    ];\n\n    if (this.props.elements.length > 0) {\n      elementRows = this.props.elements.sort(byTypeAndName).map(element => {\n        return (\n          <tr key={element.id}>\n            <td>\n              <EntityLink\n                entity={element}\n                entityClicked={this.props.elementClicked}\n              />\n            </td>\n            <td>{element.type}</td>\n          </tr>\n        );\n      });\n    }\n    const empty = this.props.elements.length === 0;\n    const header = !empty ? (\n      \"Elements\"\n    ) : (\n      <>\n        Elements <span className=\"small\">(none)</span>\n      </>\n    );\n    return (\n      <Panel header={header} initiallyCollapsed={empty}>\n        <table className=\"table archimate-elements-table\">\n          <thead>\n            <tr key=\"elements-header\">\n              <th>Element</th>\n              <th>Type</th>\n            </tr>\n          </thead>\n          <tbody>{elementRows}</tbody>\n        </table>\n      </Panel>\n    );\n  }\n}\n\nexport function byTypeAndName(a: Element, b: Element): number {\n  if (a === b) {\n    return 0;\n  }\n\n  if (a.type !== b.type) {\n    return a.type.localeCompare(b.type);\n  } else {\n    return a.name.localeCompare(b.name);\n  }\n}\n","import * as React from \"react\";\nimport {\n  Diagram,\n  Element,\n  IEntity,\n  Relationship\n} from \"../../../archimate-model\";\nimport { entityClickedFunc } from \"../../common\";\nimport EntityLink from \"../entity-link\";\nimport Panel from \"../panel\";\n\ninterface IProps {\n  entity: IEntity | undefined;\n  entityClicked: entityClickedFunc;\n}\n\nexport default class EntityIdPanel extends React.PureComponent<IProps> {\n  public render() {\n    const entity = this.props.entity;\n    const name = entity ? (\n      entity.name\n    ) : (\n      <span className=\"text-muted\">Nothing Selected</span>\n    );\n    return (\n      <Panel>\n        <table className=\"table\">\n          <tbody>\n            <tr key=\"entity-name\">\n              <th>Name</th>\n              <td>{name}</td>\n            </tr>\n            {this.entityContent()}\n          </tbody>\n        </table>\n      </Panel>\n    );\n  }\n\n  private entityContent(): React.ReactFragment {\n    const entity = this.props.entity;\n    if (entity instanceof Diagram) {\n      return this.diagramContent();\n    } else if (entity instanceof Relationship) {\n      return this.relationshipContent();\n    } else if (entity instanceof Element) {\n      return this.elementContent();\n    } else {\n      return [];\n    }\n  }\n\n  private diagramContent(): React.ReactFragment {\n    const diagram = this.props.entity as Diagram;\n    return (\n      <tr key=\"entity-type\">\n        <th>Diagram Viewpoint</th>\n        <td>{diagram.viewpointDescription()}</td>\n      </tr>\n    );\n  }\n\n  private relationshipRefLink(refMaybe: IEntity | undefined) {\n    if (refMaybe === undefined) {\n      return \"\";\n    }\n    const ref = refMaybe as IEntity;\n    return (\n      <EntityLink\n        entity={ref}\n        entityClicked={this.props.entityClicked}\n        text={`${ref.name} (${ref.type})`}\n      />\n    );\n  }\n\n  private relationshipContent(): React.ReactFragment {\n    const relationship = this.props.entity as Relationship;\n    return (\n      <>\n        <tr key=\"relationship-type\">\n          <th>Relationship</th>\n          <td>{relationship.type}</td>\n        </tr>\n        <tr key=\"relationship-source\">\n          <th>Source</th>\n          <td>{this.relationshipRefLink(relationship.sourceElement())}</td>\n        </tr>\n        <tr key=\"relationship-target\">\n          <th>Target</th>\n          <td>{this.relationshipRefLink(relationship.targetElement())}</td>\n        </tr>\n      </>\n    );\n  }\n\n  private elementContent(): React.ReactFragment {\n    const entity = this.props.entity as Element;\n    return (\n      <tr key=\"entity-type\">\n        <th>Element</th>\n        <td>{entity.type}</td>\n      </tr>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { IDiagram, IEntity } from \"../../../archimate-model\";\nimport { entityClickedFunc } from \"../../common\";\nimport EntityLink from \"../entity-link\";\nimport Panel from \"../panel\";\n\ninterface IProps {\n  views: IDiagram[];\n  entityClicked: entityClickedFunc;\n}\n\nexport default class ViewsTable extends React.PureComponent<IProps> {\n  public render() {\n    const views = this.props.views ? this.props.views : [];\n    let tableRows = null;\n    if (views.length === 0) {\n      tableRows = [\n        <tr key={\"views-table-no-views\"}>\n          <td colSpan={2}>No Views</td>\n        </tr>\n      ];\n    } else {\n      tableRows = views.sort(byName).map(view => (\n        <tr key={view.path}>\n          <td>\n            <EntityLink\n              entity={view}\n              entityClicked={this.props.entityClicked}\n            />\n          </td>\n          <td>{view.viewpoint}</td>\n        </tr>\n      ));\n    }\n\n    const empty = this.props.views.length === 0;\n    const header = !empty ? (\n      \"Views\"\n    ) : (\n      <>\n        Views <span className=\"small\">(none)</span>\n      </>\n    );\n    return (\n      <Panel header={header} initiallyCollapsed={empty}>\n        <table className=\"table archimate-views-table\">\n          <thead>\n            <tr key=\"views-table-header\">\n              <th>View</th>\n              <th>Viewpoint</th>\n            </tr>\n          </thead>\n          <tbody>{tableRows}</tbody>\n        </table>\n      </Panel>\n    );\n  }\n}\n\nexport function byName(a: IEntity, b: IEntity): number {\n  if (a === b) {\n    return 0;\n  }\n  return byOptionalString(a.name, b.name);\n}\n\nexport function byOptionalString(\n  a: string | undefined,\n  b: string | undefined\n): number {\n  if (a === b) {\n    return 0;\n  }\n  if (a === undefined) {\n    if (b === undefined) {\n      return 0;\n    } else {\n      return -1;\n    }\n  } else {\n    if (b === undefined) {\n      return 1;\n    } else {\n      return a.localeCompare(b);\n    }\n  }\n}\n","import \"github-markdown-css/github-markdown.css\";\nimport * as React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { Property } from \"../../../archimate-model\";\nimport Panel from \"../panel\";\nimport { byOptionalString } from \"./views-table\";\n\ninterface IProps {\n  properties: Property[];\n}\n\nexport default class PropertiesPanel extends React.PureComponent<IProps> {\n  public render() {\n    const properties = this.props.properties ? this.props.properties : [];\n    let tableRows = null;\n    if (properties.length === 0) {\n      tableRows = [\n        <tr key={\"no-properties\"}>\n          <td colSpan={2}>No Properties</td>\n        </tr>\n      ];\n    } else {\n      tableRows = properties.sort(byKeyAndValue).map(property => (\n        <tr key={property.key}>\n          <td>{property.key}</td>\n          <td>{this.value(property.value)}</td>\n        </tr>\n      ));\n    }\n\n    const propertiesEmpty = this.props.properties.length === 0;\n    const header = !propertiesEmpty ? (\n      \"Properties\"\n    ) : (\n      <>\n        Properties <span className=\"small\">(none)</span>\n      </>\n    );\n    return (\n      <Panel header={header} initiallyCollapsed={propertiesEmpty}>\n        <table className=\"table\">\n          <thead>\n            <tr key=\"properties-header\">\n              <th>Property</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody id=\"element-properties\">{tableRows}</tbody>\n        </table>\n      </Panel>\n    );\n  }\n\n  private value(v: string | undefined) {\n    if (v) {\n      return <ReactMarkdown className=\"markdown-body\" source={v} />;\n    }\n\n    return <i>undefined</i>;\n  }\n}\n\nexport function byKeyAndValue(a: Property, b: Property): number {\n  if (a === b) {\n    return 0;\n  }\n\n  if (a.key !== b.key) {\n    return a.key.localeCompare(b.key);\n  } else {\n    return byOptionalString(a.value, b.value);\n  }\n}\n","import * as React from \"react\";\nimport { IEntity, IRelationship, Relationship } from \"../../../archimate-model\";\nimport { entityClickedFunc } from \"../../common\";\nimport EntityLink from \"../entity-link\";\nimport Panel from \"../panel\";\n\ninterface IProps {\n  relationships: IRelationship[];\n  entityClicked: entityClickedFunc;\n}\n\nexport default class RelationshipsTable extends React.PureComponent<IProps> {\n  public render() {\n    const relationships = this.props.relationships\n      ? this.props.relationships\n      : [];\n    let tableRows = null;\n    if (relationships.length === 0) {\n      tableRows = [\n        <tr key=\"no-relationships\">\n          <td colSpan={3}>No Relationships</td>\n        </tr>\n      ];\n    } else {\n      tableRows = relationships\n        .filter(r => r !== undefined)\n        .filter(r => r instanceof Relationship)\n        .sort(byType)\n        .map(relationship => (\n          <tr key={relationship.id}>\n            <td>\n              <EntityLink\n                entity={relationship}\n                entityClicked={this.props.entityClicked}\n                text={this.relationshipName(relationship)}\n              />\n            </td>\n            <td>{this.relationshipRefLink(relationship.sourceElement())}</td>\n            <td>{this.relationshipRefLink(relationship.targetElement())}</td>\n          </tr>\n        ));\n    }\n    const empty = this.props.relationships.length === 0;\n    const header = !empty ? (\n      \"Relationships\"\n    ) : (\n      <>\n        Relationships <span className=\"small\">(none)</span>\n      </>\n    );\n    return (\n      <Panel header={header} initiallyCollapsed={empty}>\n        <table className=\"table\">\n          <thead>\n            <tr key=\"relationships-header\">\n              <th>Relationship Type</th>\n              <th>Source</th>\n              <th>Target</th>\n            </tr>\n          </thead>\n          <tbody id=\"element-relationships\">{tableRows}</tbody>\n        </table>\n      </Panel>\n    );\n  }\n\n  private relationshipRefLink(refMaybe: IEntity | undefined) {\n    if (refMaybe === undefined) {\n      return \"\";\n    }\n    const ref = refMaybe as IEntity;\n    return (\n      <EntityLink\n        entity={ref}\n        entityClicked={this.props.entityClicked}\n        text={`${ref.name} (${ref.type})`}\n      />\n    );\n  }\n\n  private relationshipName(rel: IRelationship): string {\n    if (rel.name && rel.name.length > 0) {\n      return `${rel.name} (${rel.type})`;\n    }\n    return rel.type;\n  }\n}\n\nexport function byType(a: IEntity, b: IEntity): number {\n  if (a === b) {\n    return 0;\n  }\n\n  return a.type.localeCompare(b.type);\n}\n","import * as React from \"react\";\nimport {\n  Diagram,\n  Element,\n  IEntity,\n  IHasRelationships,\n  IHasViews,\n  Relationship\n} from \"../../../archimate-model\";\nimport { entityClickedFunc } from \"../../common\";\nimport DocumentationPanel from \"./documentation-panel\";\nimport ElementsTable from \"./elements-table\";\nimport EntityIdPanel from \"./entity-id-panel\";\nimport PropertiesPanel from \"./properties-panel\";\nimport RelationshipsTable from \"./relationships-table\";\nimport ViewsTable from \"./views-table\";\n\ninterface IProps {\n  entity?: IEntity;\n  entityClicked: entityClickedFunc;\n}\n\nexport default class InfoTab extends React.PureComponent<IProps> {\n  public render() {\n    return (\n      <>\n        <EntityIdPanel\n          entity={this.props.entity}\n          entityClicked={this.props.entityClicked}\n        />\n        <DocumentationPanel\n          str={this.props.entity ? this.props.entity.documentation : undefined}\n        />\n        {this.properties()}\n        {this.elements()}\n        {this.relationships()}\n        {this.views()}\n      </>\n    );\n  }\n\n  private elements(): JSX.Element | undefined {\n    if (this.props.entity instanceof Diagram) {\n      const diagram = this.props.entity as Diagram;\n      return (\n        <ElementsTable\n          elements={diagram.elements()}\n          elementClicked={this.props.entityClicked}\n        />\n      );\n    } else {\n      return undefined;\n    }\n  }\n  private relationships(): JSX.Element | undefined {\n    if (\n      this.props.entity instanceof Diagram ||\n      this.props.entity instanceof Element\n    ) {\n      return (\n        <RelationshipsTable\n          relationships={(this.props\n            .entity as IHasRelationships).relationships()}\n          entityClicked={this.props.entityClicked}\n        />\n      );\n    } else {\n      return undefined;\n    }\n  }\n\n  private views(): JSX.Element | undefined {\n    if (\n      this.props.entity instanceof Diagram ||\n      this.props.entity instanceof Element ||\n      this.props.entity instanceof Relationship\n    ) {\n      const viewsEntity = this.props.entity as IHasViews;\n      return (\n        <ViewsTable\n          views={viewsEntity.diagrams()}\n          entityClicked={this.props.entityClicked}\n        />\n      );\n    } else {\n      return undefined;\n    }\n  }\n  private properties(): JSX.Element | undefined {\n    if (this.props.entity === undefined) {\n      return undefined;\n    }\n    return <PropertiesPanel properties={this.props.entity.properties || []} />;\n  }\n}\n","import * as React from \"react\";\nimport {\n  Col,\n  ControlLabel,\n  Form,\n  FormControl,\n  FormGroup\n} from \"react-bootstrap\";\nimport \"../archimate-navigator.css\";\n\ninterface IProps {\n  modelName: string;\n  diagramName: string | undefined;\n  diagramViewpoint: string | undefined;\n}\n\nexport default class ModelInfo extends React.Component<IProps> {\n  public render() {\n    return (\n      <Form horizontal={true}>\n        <FormGroup>\n          <Col componentClass={ControlLabel} sm={2}>\n            <small className=\"text-muted\">Model</small>\n          </Col>\n          <Col sm={10}>\n            <FormControl.Static>\n              <strong>{this.props.modelName}</strong>\n            </FormControl.Static>\n          </Col>\n        </FormGroup>\n        {this.diagramRow()}\n      </Form>\n    );\n  }\n\n  protected diagramRow() {\n    if (this.props.diagramName) {\n      return (\n        <FormGroup>\n          <Col componentClass={ControlLabel} sm={2}>\n            <small className=\"text-muted\">Diagram</small>\n          </Col>\n          <Col sm={10}>\n            <FormControl.Static>\n              <strong>{this.props.diagramName}</strong>{\" \"}\n              <small>\n                &lt;\n                {this.props.diagramViewpoint}\n                &nbsp;Viewpoint&gt;\n              </small>\n            </FormControl.Static>\n          </Col>\n        </FormGroup>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n","import { List } from \"immutable\";\nimport * as React from \"react\";\nimport {\n  Button,\n  Form,\n  FormControl,\n  FormGroup,\n  HelpBlock,\n  InputGroup,\n  Panel\n} from \"react-bootstrap\";\nimport { Query } from \"../../../archimate-model\";\n\ninterface IProps {\n  onNewQuery: () => void;\n  onQuerySelected: (query: Query) => void;\n  queries: List<Query>;\n  selectedQuery: Query;\n}\n\nexport default class QueryTab extends React.PureComponent<IProps> {\n  public render() {\n    return (\n      <Panel defaultExpanded={false}>\n        <Panel.Heading>\n          <Panel.Title componentClass=\"h3\" toggle={true}>\n            Queries\n          </Panel.Title>\n        </Panel.Heading>\n        <Panel.Collapse>\n          <Panel.Body>\n            <Form>\n              <FormGroup controlId=\"queryDiagramSelector\">\n                <InputGroup>\n                  <FormControl\n                    componentClass=\"select\"\n                    placeholder=\"Select Query\"\n                    defaultValue={this.props.selectedQuery.name}\n                    onChange={this.onQuerySelected}\n                  >\n                    {this.props.queries.map(\n                      q =>\n                        q ? (\n                          <option key={q.id} value={q.id}>\n                            {q.name}\n                          </option>\n                        ) : (\n                          undefined\n                        )\n                    )}\n                  </FormControl>\n                  <FormControl.Feedback />\n                  <InputGroup.Button onClick={this.props.onNewQuery}>\n                    <Button>New</Button>\n                  </InputGroup.Button>\n                </InputGroup>\n                <HelpBlock>\n                  Select an existing query, or create a new one.\n                </HelpBlock>\n              </FormGroup>\n            </Form>\n          </Panel.Body>\n        </Panel.Collapse>\n      </Panel>\n    );\n  }\n\n  private onQuerySelected = (event: any) => {\n    const queryId = event.target.value;\n    const query = this.props.queries.find(q => (q ? q.id === queryId : false));\n    this.props.onQuerySelected(query);\n  };\n}\n","import * as React from \"react\";\nimport {\n  Checkbox, ControlLabel, FormGroup, Glyphicon\n} from \"react-bootstrap\";\nimport { ElementType, Query, viewpointForElementTypes } from \"../../../../archimate-model\";\n\ninterface IProps {\n  onQueryChanged: (query: Query) => void;\n  query: Query;\n}\n\ninterface IState {\n  filterCollapsed: boolean;\n}\n\nexport default class ElementTypeFilter extends React.PureComponent<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      filterCollapsed: true,\n    }\n  }\n\n  public render() {\n    return (\n      <FormGroup>\n        <ControlLabel>\n          Element Type Filter\n          {\"  \"}\n          <Glyphicon glyph={this.state.filterCollapsed ? \"collapse-up\" : \"collapse-down\"} onClick={this.onFilterCollapse}/>\n        </ControlLabel>\n        {this.state.filterCollapsed ? null : (\n        <table style={{fontSize: \"75%\"}}>\n          <thead>\n            <tr>\n              <td/>\n              <th>Passive Structure</th>\n              <th>Behavior</th>\n              <th>Active Structure</th>\n              <th>Motivation</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr style={{background: \"#fffead\"}}>\n              <th>Strategy</th>\n              <td>\n                { this.checkboxes(ElementType.Resource) }\n              </td>\n              <td>\n                { this.checkboxes(ElementType.Capability, ElementType.CourseOfAction) }\n              </td>\n              <td/>\n              <td rowSpan={6} style={{background: \"#f2f2fe\"}}>\n                { this.checkboxes(\n                  ElementType.Stakeholder,\n                  ElementType.Driver,\n                  ElementType.Assessment,\n                  ElementType.Goal,\n                  ElementType.Outcome,\n                  ElementType.Principle,\n                  ElementType.Requirement,\n                  ElementType.Constraint,\n                  ElementType.Meaning,\n                  ElementType.Value\n                ) } \n              </td>\n            </tr>\n            <tr style={{background: \"#fffed0\"}}>\n              <th>Business</th>\n              <td>\n                { this.checkboxes(\n                  ElementType.BusinessActor,\n                  ElementType.BusinessRole,\n                  ElementType.BusinessCollaboration,\n                  ElementType.BusinessInterface\n                ) \n                }\n              </td>\n              <td>\n                { this.checkboxes(\n                  ElementType.BusinessProcess,\n                  ElementType.BusinessFunction,\n                  ElementType.BusinessInteraction,\n                  ElementType.BusinessEvent,\n                  ElementType.BusinessService\n                ) \n                }\n              </td>\n              <td>\n                { this.checkboxes(\n                  ElementType.BusinessObject,\n                  ElementType.Contract,\n                  ElementType.Representation\n                ) \n                }\n              </td>\n            </tr>\n            <tr style={{background: \"#c5f1fe\"}}>\n              <th>Application</th>\n              <td>\n                { this.checkboxes(\n                  ElementType.ApplicationComponent,\n                  ElementType.ApplicationCollaboration,\n                  ElementType.ApplicationInterface\n                ) \n                }\n              </td>\n              <td>\n                { this.checkboxes(\n                  ElementType.ApplicationFunction,\n                  ElementType.ApplicationInteraction,\n                  ElementType.ApplicationProcess,\n                  ElementType.ApplicationEvent,\n                  ElementType.ApplicationService\n                ) \n                }\n              </td>\n              <td>\n                { this.checkboxes(\n                  ElementType.DataObject\n                ) \n                }\n              </td>\n            </tr>\n            <tr style={{background: \"#ccfecc\"}}>\n              <th>Technology</th>\n              <td>\n                { this.checkboxes(\n                  ElementType.Node,\n                  ElementType.Device,\n                  ElementType.SystemSoftware,\n                  ElementType.TechnologyCollaboration,\n                  ElementType.TechnologyInterface,\n                  ElementType.Path,\n                  ElementType.CommunicationNetwork\n                ) \n                }\n              </td>\n              <td>\n                { this.checkboxes(\n                  ElementType.TechnologyFunction,\n                  ElementType.TechnologyProcess,\n                  ElementType.TechnologyInteraction,\n                  ElementType.TechnologyEvent,\n                  ElementType.TechnologyService\n                ) \n                }\n              </td>\n              <td>\n                { this.checkboxes(\n                  ElementType.TechnologyObject,\n                  ElementType.Artifact\n                ) \n                }\n              </td>\n            </tr>\n            <tr style={{background: \"#9cfd9d\"}}>\n              <th>Physical</th>\n              <td>\n                { this.checkboxes(\n                  ElementType.Equipment,\n                  ElementType.Facility,\n                  ElementType.DistributionNetwork\n                ) \n                }\n              </td>\n              <td/>\n              <td>\n                { this.checkboxes(\n                  ElementType.Material\n                ) \n                }\n              </td>\n            </tr>\n            <tr style={{background: \"#fee1e1\"}}>\n              <th>Implementation<br/>&amp;<br/>Migration</th>\n              <td colSpan={3}>\n                { this.checkboxes(\n                  ElementType.WorkPackage,\n                  ElementType.Deliverable,\n                  ElementType.ImplementationEvent,\n                  ElementType.Plateau,\n                  ElementType.Gap\n                ) \n                }\n              </td>\n            </tr>\n          </tbody>\n        </table>)}\n      </FormGroup>\n    );\n  }\n\n  private onToggle = (elementType: ElementType, event: React.FormEvent<Checkbox>) => {\n    const elementTypes = this.props.query.elementTypes.includes(elementType) ?\n      this.props.query.elementTypes.delete(elementType) : this.props.query.elementTypes.add(elementType);\n    this.props.onQueryChanged(\n      this.props.query.updateQuery({ elementTypes, viewpointType: viewpointForElementTypes(elementTypes) })\n    );\n  }\n\n  private checkboxes(...elementTypes: ElementType[]) {\n    return elementTypes.map(elementType => {\n      return (\n        <Checkbox \n            key={elementType}\n            checked={this.props.query.elementTypes.includes(elementType)}\n            onChange={this.onToggle.bind(this, elementType)}\n        >\n          {elementType}\n        </Checkbox>\n      );\n    });\n  }\n\n  private onFilterCollapse = () => {\n    this.setState({filterCollapsed: !this.state.filterCollapsed});\n  }\n}\n","import * as React from \"react\";\nimport { Checkbox } from \"react-bootstrap\";\nimport { Layer } from \"../../../../archimate-model\";\n\ninterface IProps {\n  layer: Layer;\n  checked: boolean;\n  onChange: (layer: Layer, checked: boolean) => void;\n}\n\nexport default class LayerCheckbox extends React.PureComponent<IProps> {\n  public render() {\n    return (\n      <Checkbox\n        checked={this.props.checked}\n        onClick={this.onChange}\n      >\n        {this.props.layer}\n      </Checkbox>\n    );\n  }\n\n  private onChange = (event: React.FormEvent<Checkbox>) => {\n    this.props.onChange(this.props.layer, !this.props.checked);\n  };\n}\n","import Fuse from \"fuse.js\";\nimport { List, Set } from \"immutable\";\nimport * as React from \"react\";\nimport {\n  Badge,\n  Button,\n  ControlLabel,\n  Form,\n  FormControl,\n  FormGroup,\n  Glyphicon,\n  HelpBlock,\n  ListGroup,\n  ListGroupItem,\n  Panel,\n  Well\n} from \"react-bootstrap\";\nimport {\n  Diagram,\n  DisplayLayers,\n  Element,\n  ElementType,\n  elementTypesForViewpoint,\n  Layer,\n  Model,\n  Query,\n  Viewpoints\n} from \"../../../archimate-model\";\nimport ElementTypeFilter from \"./query-wizard-form/element-type-filter\";\nimport LayerCheckbox from \"./query-wizard-form/layer-checkbox\";\n\ntype ElementTypeFilterType = ElementType | string;\n\ninterface IProps {\n  model: Model;\n  selectedDiagram: Diagram | undefined;\n  query: Query;\n  onQueryChanged: (query: Query) => void;\n}\n\ninterface IState {\n  elementTypeFilter: ElementTypeFilterType;\n  elementTypeFilterCollapsed: boolean;\n  fuse?: Fuse<Element, Fuse.FuseOptions<any>>;\n  fuseElementTypes?: Set<ElementType>;\n  fuseFilteredElements?: Set<Element>;\n  layerFilterCollapsed: boolean;\n  results: List<Element>;\n  search: string;\n}\n\nexport default class QueryWizard extends React.PureComponent<IProps, IState> {\n  private fuseOptions = {\n    distance: 100,\n    keys: [\"name\", \"type\"],\n    location: 0,\n    maxPatternLength: 32,\n    shouldSort: true,\n    threshold: 0.6\n  };\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      elementTypeFilter: \"All\",\n      elementTypeFilterCollapsed: true,\n      layerFilterCollapsed: true,\n      results: List(),\n      search: \"\"\n    };\n  }\n\n  public render() {\n    return (\n      <Panel defaultExpanded={true}>\n        <Panel.Heading>\n          <Panel.Title componentClass=\"h3\" toggle={true}>\n            Query Wizard\n          </Panel.Title>\n        </Panel.Heading>\n        <Panel.Collapse>\n          <Panel.Body>\n            <Form>\n              <FormGroup controlId=\"queryName\">\n                <ControlLabel>Name</ControlLabel>\n                <FormControl\n                  type=\"text\"\n                  value={this.props.query.name}\n                  placeholder=\"Query Name\"\n                  onChange={this.onQueryNameChanged}\n                />\n              </FormGroup>\n              <FormGroup controlId=\"viewpointType\">\n                <ControlLabel>Viewpoint</ControlLabel>\n                <FormControl\n                  componentClass=\"select\"\n                  onChange={this.onViewpointChanged}\n                  value={this.props.query.viewpointType}\n                >\n                  {Viewpoints.map(v => v).sort().map(v => (\n                    <option key={v} value={v}>\n                      {v}\n                    </option>\n                  ))}\n                </FormControl>\n              </FormGroup>\n              <FormGroup controlId=\"layerFilter\">\n                <ControlLabel>\n                  Layer Filter\n                  {\"  \"}\n                  <Glyphicon glyph={this.state.layerFilterCollapsed ? \"collapse-up\" : \"collapse-down\"} onClick={this.onLayerFilterCollapse}/>\n                </ControlLabel>\n                {this.state.layerFilterCollapsed ? null : (\n                  <Well bsSize=\"small\">\n                    <div style={{columns: 2}}>\n                      {DisplayLayers.map(layer => \n                        (<LayerCheckbox layer={layer} checked={this.layerChecked(layer)} onChange={this.onLayerFilterChanged}/>))\n                      }\n                    </div>\n                  </Well>\n                ) }\n              </FormGroup>\n              <ElementTypeFilter\n                query={this.props.query}\n                onQueryChanged={this.props.onQueryChanged}\n              />\n              <FormGroup>\n                <ControlLabel>Max Path Depth</ControlLabel>\n                <FormControl\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"100\"\n                  step=\"1\"\n                  value={this.props.query.pathDepth}\n                  onChange={this.onPathDepthChanged}\n                />\n                <HelpBlock>Maximum number of connections to include</HelpBlock>\n              </FormGroup>\n              <FormGroup controlId=\"search\">\n                <ControlLabel>Search</ControlLabel>\n                <input\n                  type=\"text\"\n                  value={this.state.search}\n                  className=\"form-control\"\n                  id=\"search\"\n                  placeholder=\"search\"\n                  onChange={this.onSearchChanged}\n                />\n              </FormGroup>\n              <FormGroup controlId=\"results\">\n                <ControlLabel>\n                  Results <Badge>{this.state.results.size}</Badge>\n                </ControlLabel>\n                <ListGroup>\n                  {this.state.results\n                    .slice(0, Math.min(20, this.state.results.size))\n                    .map(\n                      el =>\n                        el ? (\n                          <ListGroupItem key={el.id}>\n                            <div className=\"pull-right\">\n                              {this.addRemoveElement(el)}\n                            </div>\n                            <span className=\"text-info\">{el.type}</span>\n                            {\": \"}\n                            {<span className=\"text-primary\">{el.name}</span> || (\n                              <span className=\"text-muted\">unnamed</span>\n                            )}\n                          </ListGroupItem>\n                        ) : (\n                          undefined\n                        )\n                    )}\n                </ListGroup>\n              </FormGroup>\n            </Form>\n          </Panel.Body>\n        </Panel.Collapse>\n      </Panel>\n    );\n  }\n\n  private onQueryNameChanged = (event: any) => {\n    this.props.onQueryChanged(\n      this.props.query.updateQuery({ name: event.target.value })\n    );\n  };\n\n  private onViewpointChanged = (event: any) => {\n    const viewpointType = event.target.value;\n    this.props.onQueryChanged(\n      this.props.query.updateQuery({ \n        elementTypes: Set<ElementType>(elementTypesForViewpoint(viewpointType, this.props.query.elementTypes)),\n        viewpointType,\n      })\n    );\n  };\n\n  private onPathDepthChanged = (event: any) => {\n    this.props.onQueryChanged(\n      this.props.query.updateQuery({\n        pathDepth: Number.parseInt(event.target.value, 10)\n      })\n    );\n  };\n\n  private onLayerFilterChanged = (layer: Layer, checked: boolean) => {\n    let layerFilter;\n    if (checked) {\n      layerFilter = this.props.query.layerFilter.add(layer);\n    } else {\n      layerFilter = this.props.query.layerFilter.remove(layer);\n    }\n    this.props.onQueryChanged(this.props.query.updateQuery({ layerFilter }));\n  }\n\n  private layerChecked(layer: Layer): boolean {\n    return this.props.query.layerFilter.includes(layer);\n  }\n\n  private onAddClick = (element: Element, event: any) => {\n    this.props.onQueryChanged(\n      this.props.query.updateQuery({\n        elements: this.props.query.elements.add(element)\n      })\n    );\n  }\n\n  private onRemoveClick = (element: Element, event: any) => {\n    this.props.onQueryChanged(\n      this.props.query.updateQuery({\n        elements: this.props.query.elements.remove(element)\n      })\n    );\n  }\n\n  private addRemoveElement(el: Element): JSX.Element {\n    // TODO: should be working with Immutable v4\n    // const isSelected = this.props.selectedElements.includes(el);\n    const isSelected = this.props.query.elements.some(\n      e => (e ? e.id === el.id : false)\n    );\n    const glyph = isSelected ? \"remove\" : \"plus\";\n    const onClick = isSelected\n      ? this.onRemoveClick.bind(this, el)\n      : this.onAddClick.bind(this, el);\n    const bsStyle = isSelected ? \"danger\" : \"primary\";\n    return (\n      <Button bsSize=\"xsmall\" bsStyle={bsStyle} onClick={onClick}>\n        <Glyphicon glyph={glyph} />\n      </Button>\n    );\n  }\n\n  private onSearchChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ search: event.target.value });\n    this.calculateResults();\n  };\n\n  private calculateResults() {\n    if (this.state.fuse === undefined) {\n      const fuseElementTypes = this.props.query.elementTypes;\n      const fuseFilteredElements = Set<Element>(\n        this.allElements().filter(\n          e => (e ? fuseElementTypes.some(et => et === e.type) : false)\n        )\n      );\n      this.setState({\n        fuseElementTypes,\n        fuseFilteredElements\n      });\n      const fuse = new Fuse<Element, Fuse.FuseOptions<any>>(fuseFilteredElements.toJS(), this.fuseOptions);\n      this.setState({ fuse });\n    }\n    const results: List<Element> =\n      this.state.search.length > 0\n        ? List<Element>((this.state.fuse as Fuse<Element, Fuse.FuseOptions<any>>).search(this.state.search))\n        : List<Element>();\n    this.setState({ results });\n  }\n\n  private allElements = () => {\n    return List<Element>(this.props.query.model.elements);\n  };\n\n  private onLayerFilterCollapse = () => {\n    this.setState({layerFilterCollapsed: !this.state.layerFilterCollapsed});\n  }\n}\n","import { List } from \"immutable\";\nimport * as React from \"react\";\nimport { Checkbox } from \"react-bootstrap\";\nimport { Diagram, Model, Query } from \"../../../archimate-model\";\nimport QueryPicker from \"./query-picker\";\nimport QueryWizard from \"./query-wizard\";\n\nexport type autoLayoutToggledFunc = (\n  autoLayout: boolean,\n  event?: React.FormEvent<Checkbox>\n) => void;\n\ninterface IProps {\n  model: Model;\n  selectedDiagram: Diagram | undefined;\n  onDiagramUpdated: (diagram: Diagram) => void;\n}\n\ninterface IState {\n  autoLayout: boolean;\n  queries: List<Query>;\n  selectedQuery: Query;\n}\n\nexport default class QueryTab extends React.PureComponent<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    const query = new Query(this.props.model);\n    this.state = {\n      autoLayout: true,\n      queries: List([query]),\n      selectedQuery: query\n    };\n  }\n\n  public componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (prevProps.model !== this.props.model) {\n      const query = new Query(this.props.model);\n      this.setState({\n        queries: List([query]),\n        selectedQuery: query\n      });\n    }\n  }\n\n  public render() {\n    return (\n      <>\n        <QueryPicker\n          onNewQuery={this.onNewQuery}\n          onQuerySelected={this.onQuerySelected}\n          queries={this.state.queries}\n          selectedQuery={this.state.selectedQuery}\n        />\n        <QueryWizard\n          model={this.props.model}\n          selectedDiagram={this.props.selectedDiagram}\n          query={this.state.selectedQuery}\n          onQueryChanged={this.onQueryChanged}\n        />\n      </>\n    );\n  }\n\n  private onQuerySelected = (event: any /*: React.FormEvent<FormControl>*/) => {\n    const query = event.target.value as Query;\n    this.setState({ selectedQuery: query });\n  };\n\n  private onNewQuery = () => {\n    const newQuery = new Query(this.props.model);\n    this.setState({\n      queries: this.state.queries.push(newQuery),\n      selectedQuery: newQuery\n    });\n  };\n\n  private onQueryChanged = (query: Query) => {\n    const diagram = query.run();\n    this.setState({\n      selectedQuery: query\n    });\n    this.props.onDiagramUpdated(diagram);\n  };\n}\n","import * as React from \"react\";\nimport {\n  Diagram,\n  Element,\n  IEntity,\n  Relationship\n} from \"../../../archimate-model\";\nimport { entityClickedFunc } from \"../../common\";\nimport EntityLink from \"../entity-link\";\n\ninterface IProps {\n  entity: IEntity;\n  resultClicked: entityClickedFunc;\n}\n\nexport default class SearchResult extends React.PureComponent<IProps> {\n  public render() {\n    return (\n      <li>\n        <EntityLink\n          entity={this.props.entity}\n          entityClicked={this.props.resultClicked}\n          text={`${this.props.entity.name} (${this.entityType()})`}\n        />\n      </li>\n    );\n  }\n\n  private entityType(): string {\n    const entity = this.props.entity;\n    let entityType = entity.type;\n    if (entity instanceof Element) {\n      entityType = entity.type || entityType;\n    } else if (entity instanceof Relationship) {\n      entityType = entity.type || entityType;\n    } else if (entity instanceof Diagram) {\n      entityType = entity.viewpoint || \"Total\";\n    }\n    return entityType;\n  }\n}\n","import Fuse from \"fuse.js\";\nimport React from \"react\";\nimport {\n  Button,\n  Form,\n  FormControl,\n  FormGroup,\n  InputGroup,\n  Panel\n} from \"react-bootstrap\";\nimport { IEntity, Model } from \"../../../archimate-model\";\nimport { entityClickedFunc } from \"../../common\";\nimport SearchResult from \"./search-result\";\n\ninterface IProps {\n  model: Model;\n  resultClicked: entityClickedFunc;\n  searchText?: string;\n}\n\ninterface IState {\n  fuse: Fuse<IEntity, Fuse.FuseOptions<any>>;\n  results: any[];\n  search: string;\n}\n\nexport default class SearchTab extends React.PureComponent<IProps, IState> {\n  private fuseOptions = {\n    distance: 100,\n    keys: [\"name\", \"type\", \"documentation\", \"properties\"],\n    location: 0,\n    maxPatternLength: 32,\n    shouldSort: true,\n    threshold: 0.6\n  };\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      fuse: new Fuse<IEntity, Fuse.FuseOptions<any>>(this.props.model.entities(), this.fuseOptions),\n      results: [],\n      search: this.props.searchText || \"\"\n    };\n  }\n\n  public componentWillReceiveProps(nextProps: IProps) {\n    if (this.props.model !== nextProps.model) {\n      this.setState({\n        fuse: new Fuse<IEntity, Fuse.FuseOptions<any>>(nextProps.model.entities(), this.fuseOptions)\n      });\n    }\n  }\n\n  public render() {\n    const maxResultIdx =\n      this.state.results.length > 100 ? 100 : this.state.results.length;\n    const opts: any = {};\n    let searchTitle = \"Search\";\n    if (this.state.fuse === null) {\n      opts.disabled = \"disabled\";\n      searchTitle = \"Loading\";\n    }\n    const resultItems = this.state.results\n      .slice(0, maxResultIdx)\n      .map(result => (\n        <SearchResult\n          key={result.id}\n          entity={result}\n          resultClicked={this.props.resultClicked}\n        />\n      ));\n    return (\n      <Panel>\n        <Panel.Body>\n          <Form>\n            <FormGroup>\n              <InputGroup>\n                <FormControl\n                  type=\"text\"\n                  placeholder=\"Search\"\n                  defaultValue={this.state.search}\n                  onChange={this.handleChange}\n                />\n                <InputGroup.Button>\n                  <Button onClick={this.handleClick} {...opts}>\n                    {searchTitle}\n                  </Button>\n                </InputGroup.Button>\n              </InputGroup>\n            </FormGroup>\n            <ol>{resultItems}</ol>\n          </Form>\n        </Panel.Body>\n      </Panel>\n    );\n  }\n\n  private handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    if (this.state.search.length > 0) {\n      this.setState({\n        results: this.state.fuse.search(this.state.search)\n      });\n    }\n  };\n\n  private handleChange = (event: any) => {\n    this.setState({ search: event.currentTarget.value });\n    if (this.state.search.length > 0) {\n      this.setState({\n        results: this.state.fuse.search(this.state.search)\n      });\n    }\n  };\n}\n","import * as React from \"react\";\nimport { IEntity } from \"../../../archimate-model\";\nimport \"../../archimate-navigator.css\";\nimport { entityClickedFunc } from \"../../common\";\nimport EntityLink from \"../entity-link\";\n\ninterface IProps {\n  entity: IEntity;\n  entityClicked: entityClickedFunc;\n  selectedEntity: IEntity | undefined;\n}\n\n// Displays the list of organizations and entities that belong to the given organization\nexport default class OrganizationItem extends React.PureComponent<IProps> {\n  public render() {\n    return (\n      <li\n        key={this.props.entity.id}\n        className={this.selectedItemClass(this.props.entity)}\n      >\n        <EntityLink\n          entity={this.props.entity}\n          entityClicked={this.props.entityClicked}\n          textClass={this.selectedItemClass(this.props.entity)}\n        >\n          <span\n            className=\"glyphicon glyphicon-picture\"\n            style={this.selectedItemIconStyle(this.props.entity)}\n          />\n          &nbsp;\n        </EntityLink>\n      </li>\n    );\n  }\n\n  private selectedItemIconStyle(item: IEntity): React.CSSProperties {\n    if (this.props.selectedEntity && this.props.selectedEntity.id === item.id) {\n      return { color: \"white\" };\n    } else {\n      return {};\n    }\n  }\n\n  private selectedItemClass(item: IEntity): string {\n    if (this.props.selectedEntity && this.props.selectedEntity.id === item.id) {\n      return \"bg-primary\";\n    } else {\n      return \"\";\n    }\n  }\n}\n","import * as React from \"react\";\nimport { IEntity, Organization } from \"../../../archimate-model\";\nimport \"../../archimate-navigator.css\";\nimport { entityClickedFunc } from \"../../common\";\nimport OrganizationContent from \"./organization-content\";\n\ninterface IProps {\n  // model: Model;\n  // organization: Organization;\n  organizationName: string | undefined;\n  organizationId: string;\n  organizations: Organization[];\n  items: IEntity[];\n  entityClicked: entityClickedFunc;\n  selectedEntity: IEntity | undefined;\n}\n\ninterface IState {\n  collapse: boolean;\n}\n\n// TODO: save the open closed state to localStorage\n// (https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API)\nexport default class OrganizationTree extends React.PureComponent<\n  IProps,\n  IState\n> {\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      collapse: true\n    };\n  }\n\n  public render(): JSX.Element {\n    const ulId = `${this.props.organizationId}`;\n    const linkHref = `#${ulId}`;\n    return (\n      <li key={this.props.organizationId} id={this.props.organizationId}>\n        <a\n          className=\"archimate-folder text-muted\"\n          role=\"button\"\n          data-toggle=\"collapse\"\n          href={linkHref}\n          onClick={this.handleClick}\n        >\n          <span\n            className={\n              this.state.collapse\n                ? \"glyphicon glyphicon-folder-close\"\n                : \"glyphicon glyphicon-folder-open\"\n            }\n          />\n          &nbsp;\n          {this.props.organizationName}\n        </a>\n        <ul\n          id={ulId}\n          className={\n            this.state.collapse\n              ? \"archimate-organization-list collapse\"\n              : \"archimate-organization-list\"\n          }\n        >\n          <OrganizationContent\n            organizations={this.props.organizations}\n            items={this.props.items}\n            entityClicked={this.props.entityClicked}\n            selectedEntity={this.props.selectedEntity}\n          />\n        </ul>\n      </li>\n    );\n  }\n\n  private handleClick = (event: React.MouseEvent<Element>) => {\n    event.preventDefault();\n    this.setState({ collapse: !this.state.collapse });\n  };\n}\n","import { isEqual } from \"lodash-es\";\nimport memoizeOne from 'memoize-one';\nimport * as React from \"react\";\nimport { IEntity, Organization } from \"../../../archimate-model\";\nimport \"../../archimate-navigator.css\";\nimport { entityClickedFunc } from \"../../common\";\nimport OrganizationItem from \"./organization-item\";\nimport OrganizationTree from \"./organization-tree\";\n\ninterface IProps {\n  // model: Model;\n  // organization: Organization;\n  organizations: Organization[];\n  items: IEntity[];\n  entityClicked: entityClickedFunc;\n  selectedEntity: IEntity | undefined;\n}\n\ninterface IState {\n  itemEntities: string[];\n}\n\n// Displays the list of organizations and entities that belong to the given organization\nexport default class OrganizationContent extends React.Component<\n  IProps,\n  IState\n> {\n  public static getDerivedStateFromProps(\n    props: Readonly<IProps>,\n    state: Readonly<IState>\n  ): IState | null {\n    const itemEntities = props.items.map(i => i.id);\n    if (state && isEqual(itemEntities, state.itemEntities)) {\n      return null;\n    } else {\n      return { itemEntities };\n    }\n  }\n\n  private sortedOrganizations = memoizeOne<\n    (organizations: Organization[]) => Organization[]\n  >(organizations => organizations.sort(entitySortFunc));\n\n  // private sortedItems = memoize<(items: string[]) => IEntity[]>(\n  //   items => items\n  //       .map(id => this.props.model.lookup(id))\n  //       .filter(e => e !== undefined)\n  //       .map(e => e as IEntity)\n  //       .sort(entitySortFunc)\n  // );\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      itemEntities: []\n    };\n  }\n\n  public shouldComponentUpdate(\n    nextProps: Readonly<IProps>,\n    nextState: Readonly<IState>\n  ): boolean {\n    if (\n      this.props.organizations !== nextProps.organizations ||\n      this.props.items !== nextProps.items ||\n      this.props.selectedEntity !== nextProps.selectedEntity\n    ) {\n      return true;\n    }\n\n    if (this.state.itemEntities.length !== nextState.itemEntities.length) {\n      return true;\n    }\n\n    return !isEqual(this.state.itemEntities, nextState.itemEntities);\n  }\n\n  // public componentDidUpdate(prevProps: IProps) {\n  // }\n\n  public render() {\n    return (\n      <ul className=\"archimate-organization-list\">\n        {this.sortedOrganizations(this.props.organizations).map(\n          organization => (\n            <OrganizationTree\n              key={organization.id}\n              organizationName={organization.name}\n              organizationId={organization.id}\n              organizations={organization.organizations}\n              items={organization.itemEntities()}\n              entityClicked={this.props.entityClicked}\n              selectedEntity={this.props.selectedEntity}\n            />\n          )\n        )}\n        {this.props.items.sort(entitySortFunc).map(entity => (\n          <OrganizationItem\n            key={entity.id}\n            entity={entity}\n            entityClicked={this.props.entityClicked}\n            selectedEntity={this.props.selectedEntity}\n          />\n        ))}\n      </ul>\n    );\n  }\n}\n\nfunction entitySortFunc(a: IEntity, b: IEntity): number {\n  if (a.name === undefined && b.name === undefined) {\n    return 0;\n  } else if (a.name === undefined) {\n    return -1;\n  } else if (b.name === undefined) {\n    return 1;\n  }\n\n  const nameA = a.name;\n  const nameB = b.name;\n  if (nameA < nameB) {\n    return -1;\n  }\n  if (nameA > nameB) {\n    return 1;\n  }\n\n  // names must be equal\n  return 0;\n}\n","import * as React from \"react\";\nimport { Button, Glyphicon, Tab, Tabs } from \"react-bootstrap\";\nimport { Diagram, IEntity, Model } from \"../../archimate-model\";\nimport \"../archimate-navigator.css\";\nimport { entityClickedFunc } from \"../common\";\nimport InfoTab from \"./info/info-tab\";\nimport ModelInfo from \"./model-info\";\nimport QueryTab from \"./query/query-tab\";\nimport SearchTab from \"./search/search-tab\";\nimport ViewsTab from \"./views/views-tab\";\n\nexport enum SidebarTab {\n  DiagramTreeTab = 1,\n  InfoTab,\n  SearchTab,\n  GraphTab\n}\n\nexport enum SidebarWidth {\n  Normal = 360,\n  Collapsed = 4,\n  Wide = 520,\n}\n\ninterface IProps {\n  diagramLinkClicked: entityClickedFunc;\n  entityClicked: entityClickedFunc;\n  model: Model;\n  onDiagramUpdated: (diagram: Diagram) => void;\n  onTabSelected: (eventKey: any) => void;\n  selectedDiagram?: Diagram;\n  selectedEntity?: IEntity;\n  sidebarTabKey: SidebarTab;\n}\n\ninterface IState {\n  sidebarCollapsed: boolean;\n  sidebarWidth: number;\n}\n\nexport default class Sidebar extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      sidebarCollapsed: false,\n      sidebarWidth: SidebarWidth.Normal,\n    };\n  }\n\n  public render() {\n    return (\n      <div\n        className=\"archimate-view-nav\"\n        style={{\n          flexBasis: `${this.state.sidebarWidth}px`\n        }}\n      >\n        <div className=\"nav-control\">\n          <span>\n          <Button className=\"btn-default btn-sm\" onClick={this.onSizeButtonClick.bind(this, SidebarWidth.Collapsed)} bsStyle={this.widthStyle(SidebarWidth.Collapsed)}><Glyphicon glyph=\"triangle-left\" /></Button>\n          <Button className=\"btn-default btn-sm\" onClick={this.onSizeButtonClick.bind(this, SidebarWidth.Normal)} bsStyle={this.widthStyle(SidebarWidth.Normal)}><Glyphicon glyph=\"resize-horizontal\" /></Button>\n          <Button className=\"btn-default btn-sm\" onClick={this.onSizeButtonClick.bind(this, SidebarWidth.Wide)} bsStyle={this.widthStyle(SidebarWidth.Wide)}><Glyphicon glyph=\"triangle-right\" /></Button>\n          </span>\n          <a href=\"https://gigamaster.github.io/codemo/\" className=\"codemo\" title=\"Codemo\"><span className=\"icon-logo\"></span> Codemo</a>\n        </div>\n        <div className=\"nav-model\">\n        <ModelInfo\n          modelName={this.props.model.name}\n          diagramName={\n            this.props.selectedDiagram\n              ? this.props.selectedDiagram.name\n              : undefined\n          }\n          diagramViewpoint={\n            this.props.selectedDiagram\n              ? this.props.selectedDiagram.viewpointDescription()\n              : undefined\n          }\n        />\n        <Tabs\n          id=\"archimate-sidebar-tabs\"\n          animation={false}\n          defaultActiveKey={SidebarTab.DiagramTreeTab}\n          activeKey={this.props.sidebarTabKey}\n          onSelect={this.props.onTabSelected}\n        >\n          <Tab eventKey={SidebarTab.DiagramTreeTab} title=\"Views\">\n            <ViewsTab\n              organizations={this.props.model.viewOrganization().organizations}\n              items={this.props.model.viewOrganization().itemEntities()}\n              selectedEntity={this.props.selectedDiagram}\n              entityClicked={this.props.diagramLinkClicked}\n            />\n          </Tab>\n          <Tab eventKey={SidebarTab.InfoTab} title=\"Info\">\n            <InfoTab\n              entity={this.props.selectedEntity}\n              entityClicked={this.props.entityClicked}\n            />\n          </Tab>\n          <Tab eventKey={SidebarTab.SearchTab} title=\"Search\">\n            <SearchTab\n              model={this.props.model}\n              resultClicked={this.props.entityClicked}\n            />\n          </Tab>\n          <Tab eventKey={SidebarTab.GraphTab} title=\"Query\">\n            <QueryTab\n              model={this.props.model}\n              selectedDiagram={this.props.selectedDiagram}\n              onDiagramUpdated={this.props.onDiagramUpdated}\n            />\n          </Tab>\n        </Tabs>\n        </div>\n      </div>\n    );\n  }\n\n  private widthStyle(width: SidebarWidth): string | null {\n    return (this.state.sidebarWidth === width ? \"primary\" : null);\n  }\n\n  private onSizeButtonClick(width: SidebarWidth) {\n    if (this.state.sidebarWidth !== width) {\n      this.setState({sidebarWidth: width});\n    }\n  }\n}\n","import * as React from \"react\";\nimport { Panel } from \"react-bootstrap\";\nimport { IEntity, Organization } from \"../../../archimate-model\";\nimport \"../../archimate-navigator.css\";\nimport { entityClickedFunc } from \"../../common\";\nimport OrganizationContent from \"./organization-content\";\n\ninterface IProps {\n  organizations: Organization[];\n  items: IEntity[];\n  entityClicked: entityClickedFunc;\n  selectedEntity: IEntity | undefined;\n}\n\nexport default class ViewsTab extends React.PureComponent<IProps> {\n  public render() {\n    return (\n      <Panel>\n        <Panel.Body>\n          {this.props.organizations ? (\n            <OrganizationContent\n              organizations={this.props.organizations}\n              items={this.props.items}\n              entityClicked={this.props.entityClicked}\n              selectedEntity={this.props.selectedEntity}\n            />\n          ) : (\n            undefined\n          )}\n        </Panel.Body>\n      </Panel>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { Alert, Button, Modal } from \"react-bootstrap\";\nimport {\n  Diagram,\n  IEntity,\n  LogicError,\n  Model,\n  parse,\n  ViewNode\n} from \"../archimate-model\";\nimport \"./archimate-navigator.css\";\nimport ArchimateDiagramView from \"./main/archimate-diagram-view\";\nimport Sidebar, { SidebarTab } from \"./sidebar/sidebar\";\n\ninterface IProps {\n  modelUrl: string; // URL of model to load\n  selectedDiagramId?: string; // diagram id to load from model\n  selectedEntityId?: string; // entity id to select\n}\n\ninterface IState {\n  error?: any; // Any error loading the model\n  loadStart?: number; // Timestamp when started loading the model\n  loadTime?: number; // Time spent loading the model\n  model: Model; // Currently loaded model\n  parseDone?: number; // Timestamp when parse complete\n  parseTime?: number; // Time spent parsing the model\n  parseStart?: number; // Timestamp when parse started\n  selectedDiagram?: Diagram; // Currently selected diagram\n  selectedEntity?: IEntity; // Currently selected entity (model, element, relationship, diagram)\n  sidebarTabKey: SidebarTab; // Currently selected sidebar tab\n  sidebarWidth: number; // Current pixel width of the sidebar\n  working?: string; // Progress bar message while loading/parsing\n}\n\nexport default class ArchimateNavigator extends React.Component<\n  IProps,\n  IState\n> {\n  constructor(props: IProps) {\n    super(props);\n    const model = new Model();\n    const selectedDiagramId =\n      props.selectedDiagramId || window.location.hash.replace(/^#/, \"\");\n    const selectedDiagram = model.lookupDiagram(selectedDiagramId);\n    const selectedEntity =\n      model.lookup(props.selectedEntityId) || selectedDiagram;\n    this.state = {\n      model,\n      selectedDiagram,\n      selectedEntity,\n      sidebarTabKey: SidebarTab.DiagramTreeTab,\n      sidebarWidth: 385 \n    }; // TODO\n  }\n\n  public render() {\n    return (\n      <>\n        {this.exceptionView()}\n        {this.workingView()}\n        <div className=\"archimate-row\">\n          <Sidebar\n            diagramLinkClicked={this.onDiagramLinkClick}\n            entityClicked={this.onEntityClick}\n            model={this.state.model}\n            onDiagramUpdated={this.onDiagramLinkClick}\n            onTabSelected={this.onSidebarTabSelected}\n            selectedDiagram={this.state.selectedDiagram}\n            selectedEntity={this.state.selectedEntity}\n            sidebarTabKey={this.state.sidebarTabKey}\n          />\n          <div className=\"archimate-diagram-view\">\n            <div className=\"archimate-svg-container\">\n              <ArchimateDiagramView\n                key={\n                  this.state.selectedDiagram\n                    ? this.state.selectedDiagram.id\n                    : \"archimate-no-diagram\"\n                }\n                selectedEntity={this.state.selectedEntity}\n                selectedDiagram={this.state.selectedDiagram}\n                nodes={\n                  this.state.selectedDiagram\n                    ? this.state.selectedDiagram.nodes\n                    : []\n                }\n                // TODO: Needs to be a way to handle edges that connect to other edges\n                //       current solution is to remove the edge from the selected set.\n                connections={\n                  this.state.selectedDiagram\n                    ? this.state.selectedDiagram.connections.filter(\n                        c => c.targetViewNode() instanceof ViewNode\n                      )\n                    : []\n                }\n                entityClicked={this.onEntityClick}\n                diagramClicked={this.onDiagramLinkClick}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  public componentDidMount() {\n    const parser = new DOMParser();\n    this.setState({\n      loadStart: Date.now(),\n      loadTime: undefined,\n      parseDone: undefined,\n      parseStart: undefined,\n      parseTime: undefined,\n      working: \"Loading ArchiMate Model\"\n    });\n    fetch(this.props.modelUrl)\n      .then((response: Response) => response.text())\n      .then(\n        (str: string) => {\n          this.setState({\n            loadTime: (Date.now() - (this.state.loadStart as number)) / 1000.0,\n            parseStart: Date.now(),\n            working: \"Parsing ArchiMate Model\"\n          });\n          const xmlDocument = parser.parseFromString(str, \"application/xml\");\n          let parsedModel;\n          try {\n            if (xmlDocument.children[0].ownerDocument) {\n              parsedModel = parse(xmlDocument.children[0].ownerDocument);\n            } else {\n              this.setState({\n                error: \"ArchiMate Model Document was null\"\n              });\n            }\n          } catch (err) {\n            this.setState({\n              error: err\n            });\n          }\n          this.setState({\n            parseDone: Date.now(),\n            parseTime:\n              (Date.now() - (this.state.parseStart as number)) / 1000.0,\n            working: undefined\n          });\n          const curModel: Model = parsedModel || this.state.model;\n          const selectedDiagram = curModel.lookupDiagram(\n            this.props.selectedDiagramId ||\n              window.location.hash.replace(/^#/, \"\")\n          );\n          const selectedEntity =\n            curModel.lookup(this.props.selectedEntityId) ||\n            selectedDiagram ||\n            curModel;\n          this.setState({\n            model: parsedModel || this.state.model,\n            selectedDiagram,\n            selectedEntity\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        error => {\n          this.setState({\n            error,\n            working: undefined\n          });\n        }\n      );\n  }\n\n  private exceptionView() {\n    if (this.state.error === undefined) {\n      return undefined;\n    }\n    if (this.state.error instanceof String) {\n      return this.state.error;\n    }\n    const err = this.state.error as Error;\n    const errorMessage = `${err.name}: ${err.message}`;\n\n    return (\n      <Alert bsStyle=\"danger\" onDismiss={this.onCloseException}>\n        <h4>An Exception Occurred</h4>\n        <p> {errorMessage} </p>\n        <p>\n          <Button onClick={this.onCloseException}>Close</Button>\n        </p>\n      </Alert>\n    );\n  }\n\n  private onCloseException = () => {\n    this.setState({ error: undefined });\n  };\n\n  private workingView() {\n    return (\n      <Modal\n        show={this.state.working ? true : false}\n        onHide={this.onWorkingViewHide}\n      >\n        <Modal.Header>\n          <Modal.Title>Loading...</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"progress\">\n            <div\n              className=\"progress-bar progress-bar-striped active\"\n              role=\"progressbar\"\n              aria-valuenow={100}\n              aria-valuemin={0}\n              aria-valuemax={100}\n            >\n              {this.state.working}\n            </div>\n          </div>\n          <p>{this.state.working}</p>\n        </Modal.Body>\n      </Modal>\n    );\n  }\n\n  private onWorkingViewHide = () => {\n    this.setState({ working: undefined });\n  };\n\n  private onDiagramLinkClick = (\n    entity: IEntity | undefined,\n    event?: React.MouseEvent<Element>\n  ) => {\n    if (!entity) {\n      this.setState({ selectedDiagram: undefined });\n      throw new LogicError(\"diagram wasn't passed\");\n    }\n    const diagram = entity as Diagram;\n    this.setState({\n      selectedDiagram: diagram,\n      selectedEntity: diagram\n    });\n    if (diagram && diagram.id && diagram.id.length > 0) {\n      window.location.hash = `#${diagram.id}`;\n    }\n  };\n\n  private onEntityClick = (\n    entity: IEntity | undefined,\n    event?: React.MouseEvent<Element>\n  ) => {\n    if (!entity) {\n      this.setState({ selectedEntity: undefined });\n      return;\n    }\n    this.setState({\n      selectedEntity: entity,\n      sidebarTabKey: SidebarTab.InfoTab\n    });\n    if (entity instanceof Diagram) {\n      this.onDiagramLinkClick(entity as Diagram);\n    }\n  };\n\n  // Called when a sidebar tab is clicked.\n  private onSidebarTabSelected = (eventKey: any) => {\n    this.setState({ sidebarTabKey: eventKey });\n  };\n}\n","import { UnsupportedFormat } from \"../interfaces\";\nimport { ArchiFileReader } from \"./archi/archi-file-reader\";\n\nexport interface IUnsupportedFormat {\n  xmlns?: string;\n}\n\nexport function parse(doc: XMLDocument) {\n  const nsAttr = doc.children[0].attributes.getNamedItem(\"xmlns\");\n  const ns = nsAttr ? (nsAttr as Attr).value : undefined;\n  let model;\n  switch (ns) {\n    case \"http://www.opengroup.org/xsd/archimate/3.0/\":\n    case \"http://www.opengroup.org/xsd/archimate\":\n      throw new UnsupportedFormat(\"Format not supported\", ns);\n    default:\n      model = new ArchiFileReader().parse(doc);\n  }\n  return model;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap-theme.min.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ArchimateNavigator from \"./components/archimate-navigator\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(\n  // <ArchimateNavigator modelUrl=\"./archimate/ArchiSurance V3.archimate\" />,\n  // <ArchimateNavigator modelUrl=\"/archimate/everything.archimate\" />,\n  <ArchimateNavigator modelUrl=\"/archimate/ArchiSurance V3.archimate\" />,\n  document.getElementById(\"root\") as HTMLElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}